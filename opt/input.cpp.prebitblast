; ModuleID = 'input.cpp.opt'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: alwaysinline nounwind readnone uwtable
define i32 @_Z5min_1ii(i32 %x, i32 %y) #0 {
entry:
  %cmp = icmp slt i32 %x, %y
  %cond = select i1 %cmp, i32 %x, i32 %y
  ret i32 %cond
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define i32 @_Z5min_2ii(i32 %x, i32 %y) #0 {
entry:
  %xor = xor i32 %y, %x
  %cmp = icmp slt i32 %x, %y
  %and = select i1 %cmp, i32 %xor, i32 0
  %xor1 = xor i32 %and, %y
  ret i32 %xor1
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z13CHECK_min_1_2ii(i32 %x, i32 %y) #1 {
entry:
  %cmp.i = icmp slt i32 %x, %y
  %cond.i = select i1 %cmp.i, i32 %x, i32 %y
  %xor.i = xor i32 %y, %x
  %and.i = select i1 %cmp.i, i32 %xor.i, i32 0
  %xor1.i = xor i32 %and.i, %y
  %cmp = icmp eq i32 %cond.i, %xor1.i
  ret i1 %cmp
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define i32 @_Z5max_1ii(i32 %x, i32 %y) #0 {
entry:
  %cmp = icmp sgt i32 %x, %y
  %cond = select i1 %cmp, i32 %x, i32 %y
  ret i32 %cond
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define i32 @_Z5max_2ii(i32 %x, i32 %y) #0 {
entry:
  %xor = xor i32 %y, %x
  %cmp = icmp slt i32 %x, %y
  %and = select i1 %cmp, i32 %xor, i32 0
  %xor1 = xor i32 %and, %x
  ret i32 %xor1
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z13CHECK_max_1_2ii(i32 %x, i32 %y) #1 {
entry:
  %cmp.i = icmp sgt i32 %x, %y
  %cond.i = select i1 %cmp.i, i32 %x, i32 %y
  %xor.i = xor i32 %y, %x
  %cmp.i4 = icmp slt i32 %x, %y
  %and.i = select i1 %cmp.i4, i32 %xor.i, i32 0
  %xor1.i = xor i32 %and.i, %x
  %cmp = icmp eq i32 %cond.i, %xor1.i
  ret i1 %cmp
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define i32 @_Z14set_or_clear_1bjj(i1 zeroext %f, i32 %m, i32 %w) #0 {
entry:
  br i1 %f, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %or = or i32 %w, %m
  br label %cond.end

cond.false:                                       ; preds = %entry
  %neg = xor i32 %m, -1
  %and = and i32 %w, %neg
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %or, %cond.true ], [ %and, %cond.false ]
  ret i32 %cond
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define i32 @_Z14set_or_clear_2bjj(i1 zeroext %f, i32 %m, i32 %w) #0 {
entry:
  %sub = sext i1 %f to i32
  %xor = xor i32 %sub, %w
  %and = and i32 %xor, %m
  %xor1 = xor i32 %and, %w
  ret i32 %xor1
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define i32 @_Z14set_or_clear_3bjj(i1 zeroext %f, i32 %m, i32 %w) #0 {
entry:
  %neg = xor i32 %m, -1
  %and = and i32 %w, %neg
  %and1 = select i1 %f, i32 %m, i32 0
  %or = or i32 %and, %and1
  ret i32 %or
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z22CHECK_set_or_clear_1_2bjj(i1 zeroext %f, i32 %m, i32 %w) #1 {
entry:
  br i1 %f, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %entry
  %or.i = or i32 %w, %m
  br label %_Z14set_or_clear_1bjj.exit

cond.false.i:                                     ; preds = %entry
  %neg.i = xor i32 %m, -1
  %and.i = and i32 %w, %neg.i
  br label %_Z14set_or_clear_1bjj.exit

_Z14set_or_clear_1bjj.exit:                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %or.i, %cond.true.i ], [ %and.i, %cond.false.i ]
  %sub.i = sext i1 %f to i32
  %xor.i = xor i32 %sub.i, %w
  %and.i8 = and i32 %xor.i, %m
  %xor1.i = xor i32 %and.i8, %w
  %cmp = icmp eq i32 %cond.i, %xor1.i
  ret i1 %cmp
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z22CHECK_set_or_clear_1_3bjj(i1 zeroext %f, i32 %m, i32 %w) #1 {
entry:
  br i1 %f, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %entry
  %or.i = or i32 %w, %m
  %neg.i7.pre = xor i32 %m, -1
  %and.i8.pre = and i32 %w, %neg.i7.pre
  br label %_Z14set_or_clear_1bjj.exit

cond.false.i:                                     ; preds = %entry
  %neg.i = xor i32 %m, -1
  %and.i = and i32 %w, %neg.i
  br label %_Z14set_or_clear_1bjj.exit

_Z14set_or_clear_1bjj.exit:                       ; preds = %cond.false.i, %cond.true.i
  %and.i8.pre-phi = phi i32 [ %and.i, %cond.false.i ], [ %and.i8.pre, %cond.true.i ]
  %cond.i = phi i32 [ %and.i, %cond.false.i ], [ %or.i, %cond.true.i ]
  %and1.i = select i1 %f, i32 %m, i32 0
  %or.i10 = or i32 %and.i8.pre-phi, %and1.i
  %cmp = icmp eq i32 %cond.i, %or.i10
  ret i1 %cmp
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z22CHECK_set_or_clear_2_3bjj(i1 zeroext %f, i32 %m, i32 %w) #1 {
entry:
  %sub.i = sext i1 %f to i32
  %xor.i = xor i32 %sub.i, %w
  %and.i = and i32 %xor.i, %m
  %xor1.i = xor i32 %and.i, %w
  %neg.i = xor i32 %m, -1
  %and.i7 = and i32 %w, %neg.i
  %and1.i = select i1 %f, i32 %m, i32 0
  %or.i = or i32 %and.i7, %and1.i
  %cmp = icmp eq i32 %xor1.i, %or.i
  ret i1 %cmp
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define i32 @_Z16count_bits_set_1j(i32 %v) #0 {
entry:
  %and = and i32 %v, 1
  %and.1 = lshr i32 %v, 1
  %and.1.lobit = and i32 %and.1, 1
  %c.0.inc.1 = add i32 %and.1.lobit, %and
  %and.2 = lshr i32 %v, 2
  %and.2.lobit = and i32 %and.2, 1
  %c.0.inc.2 = add i32 %and.2.lobit, %c.0.inc.1
  %and.3 = lshr i32 %v, 3
  %and.3.lobit = and i32 %and.3, 1
  %c.0.inc.3 = add i32 %and.3.lobit, %c.0.inc.2
  %and.4 = lshr i32 %v, 4
  %and.4.lobit = and i32 %and.4, 1
  %c.0.inc.4 = add i32 %and.4.lobit, %c.0.inc.3
  %and.5 = lshr i32 %v, 5
  %and.5.lobit = and i32 %and.5, 1
  %c.0.inc.5 = add i32 %and.5.lobit, %c.0.inc.4
  %and.6 = lshr i32 %v, 6
  %and.6.lobit = and i32 %and.6, 1
  %c.0.inc.6 = add i32 %and.6.lobit, %c.0.inc.5
  %and.7 = lshr i32 %v, 7
  %and.7.lobit = and i32 %and.7, 1
  %c.0.inc.7 = add i32 %and.7.lobit, %c.0.inc.6
  %and.8 = lshr i32 %v, 8
  %and.8.lobit = and i32 %and.8, 1
  %c.0.inc.8 = add i32 %and.8.lobit, %c.0.inc.7
  %and.9 = lshr i32 %v, 9
  %and.9.lobit = and i32 %and.9, 1
  %c.0.inc.9 = add i32 %and.9.lobit, %c.0.inc.8
  %and.10 = lshr i32 %v, 10
  %and.10.lobit = and i32 %and.10, 1
  %c.0.inc.10 = add i32 %and.10.lobit, %c.0.inc.9
  %and.11 = lshr i32 %v, 11
  %and.11.lobit = and i32 %and.11, 1
  %c.0.inc.11 = add i32 %and.11.lobit, %c.0.inc.10
  %and.12 = lshr i32 %v, 12
  %and.12.lobit = and i32 %and.12, 1
  %c.0.inc.12 = add i32 %and.12.lobit, %c.0.inc.11
  %and.13 = lshr i32 %v, 13
  %and.13.lobit = and i32 %and.13, 1
  %c.0.inc.13 = add i32 %and.13.lobit, %c.0.inc.12
  %and.14 = lshr i32 %v, 14
  %and.14.lobit = and i32 %and.14, 1
  %c.0.inc.14 = add i32 %and.14.lobit, %c.0.inc.13
  %and.15 = lshr i32 %v, 15
  %and.15.lobit = and i32 %and.15, 1
  %c.0.inc.15 = add i32 %and.15.lobit, %c.0.inc.14
  %and.16 = lshr i32 %v, 16
  %and.16.lobit = and i32 %and.16, 1
  %c.0.inc.16 = add i32 %and.16.lobit, %c.0.inc.15
  %and.17 = lshr i32 %v, 17
  %and.17.lobit = and i32 %and.17, 1
  %c.0.inc.17 = add i32 %and.17.lobit, %c.0.inc.16
  %and.18 = lshr i32 %v, 18
  %and.18.lobit = and i32 %and.18, 1
  %c.0.inc.18 = add i32 %and.18.lobit, %c.0.inc.17
  %and.19 = lshr i32 %v, 19
  %and.19.lobit = and i32 %and.19, 1
  %c.0.inc.19 = add i32 %and.19.lobit, %c.0.inc.18
  %and.20 = lshr i32 %v, 20
  %and.20.lobit = and i32 %and.20, 1
  %c.0.inc.20 = add i32 %and.20.lobit, %c.0.inc.19
  %and.21 = lshr i32 %v, 21
  %and.21.lobit = and i32 %and.21, 1
  %c.0.inc.21 = add i32 %and.21.lobit, %c.0.inc.20
  %and.22 = lshr i32 %v, 22
  %and.22.lobit = and i32 %and.22, 1
  %c.0.inc.22 = add i32 %and.22.lobit, %c.0.inc.21
  %and.23 = lshr i32 %v, 23
  %and.23.lobit = and i32 %and.23, 1
  %c.0.inc.23 = add i32 %and.23.lobit, %c.0.inc.22
  %and.24 = lshr i32 %v, 24
  %and.24.lobit = and i32 %and.24, 1
  %c.0.inc.24 = add i32 %and.24.lobit, %c.0.inc.23
  %and.25 = lshr i32 %v, 25
  %and.25.lobit = and i32 %and.25, 1
  %c.0.inc.25 = add i32 %and.25.lobit, %c.0.inc.24
  %and.26 = lshr i32 %v, 26
  %and.26.lobit = and i32 %and.26, 1
  %c.0.inc.26 = add i32 %and.26.lobit, %c.0.inc.25
  %and.27 = lshr i32 %v, 27
  %and.27.lobit = and i32 %and.27, 1
  %c.0.inc.27 = add i32 %and.27.lobit, %c.0.inc.26
  %and.28 = lshr i32 %v, 28
  %and.28.lobit = and i32 %and.28, 1
  %c.0.inc.28 = add i32 %and.28.lobit, %c.0.inc.27
  %and.29 = lshr i32 %v, 29
  %and.29.lobit = and i32 %and.29, 1
  %c.0.inc.29 = add i32 %and.29.lobit, %c.0.inc.28
  %and.30 = lshr i32 %v, 30
  %and.30.lobit = and i32 %and.30, 1
  %c.0.inc.30 = add i32 %and.30.lobit, %c.0.inc.29
  %v.lobit = lshr i32 %v, 31
  %c.0.inc.31 = add i32 %v.lobit, %c.0.inc.30
  ret i32 %c.0.inc.31
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define i32 @_Z16count_bits_set_5j(i32 %v) #0 {
entry:
  %shr = lshr i32 %v, 1
  %and = and i32 %shr, 1431655765
  %sub = sub i32 %v, %and
  %shr1 = lshr i32 %sub, 2
  %and2 = and i32 %shr1, 858993459
  %and3 = and i32 %sub, 858993459
  %add = add i32 %and2, %and3
  %shr4 = lshr i32 %add, 4
  %add5 = add i32 %shr4, %add
  %and6 = and i32 %add5, 252645135
  %shr7 = lshr i32 %and6, 8
  %add8 = add i32 %shr7, %and6
  %and9 = and i32 %add8, 16711935
  %shr10 = lshr i32 %and9, 16
  %add11 = add i32 %shr10, %and9
  %and12 = and i32 %add11, 65535
  ret i32 %and12
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z24CHECK_count_bits_set_1_5j(i32 %u) #1 {
entry:
  %and.i = and i32 %u, 1
  %and.i.1 = lshr i32 %u, 1
  %and.i.1.lobit = and i32 %and.i.1, 1
  %c.i.0.inc.i.1 = add i32 %and.i.1.lobit, %and.i
  %and.i.2 = lshr i32 %u, 2
  %and.i.2.lobit = and i32 %and.i.2, 1
  %c.i.0.inc.i.2 = add i32 %and.i.2.lobit, %c.i.0.inc.i.1
  %and.i.3 = lshr i32 %u, 3
  %and.i.3.lobit = and i32 %and.i.3, 1
  %c.i.0.inc.i.3 = add i32 %and.i.3.lobit, %c.i.0.inc.i.2
  %and.i.4 = lshr i32 %u, 4
  %and.i.4.lobit = and i32 %and.i.4, 1
  %c.i.0.inc.i.4 = add i32 %and.i.4.lobit, %c.i.0.inc.i.3
  %and.i.5 = lshr i32 %u, 5
  %and.i.5.lobit = and i32 %and.i.5, 1
  %c.i.0.inc.i.5 = add i32 %and.i.5.lobit, %c.i.0.inc.i.4
  %and.i.6 = lshr i32 %u, 6
  %and.i.6.lobit = and i32 %and.i.6, 1
  %c.i.0.inc.i.6 = add i32 %and.i.6.lobit, %c.i.0.inc.i.5
  %and.i.7 = lshr i32 %u, 7
  %and.i.7.lobit = and i32 %and.i.7, 1
  %c.i.0.inc.i.7 = add i32 %and.i.7.lobit, %c.i.0.inc.i.6
  %and.i.8 = lshr i32 %u, 8
  %and.i.8.lobit = and i32 %and.i.8, 1
  %c.i.0.inc.i.8 = add i32 %and.i.8.lobit, %c.i.0.inc.i.7
  %and.i.9 = lshr i32 %u, 9
  %and.i.9.lobit = and i32 %and.i.9, 1
  %c.i.0.inc.i.9 = add i32 %and.i.9.lobit, %c.i.0.inc.i.8
  %and.i.10 = lshr i32 %u, 10
  %and.i.10.lobit = and i32 %and.i.10, 1
  %c.i.0.inc.i.10 = add i32 %and.i.10.lobit, %c.i.0.inc.i.9
  %and.i.11 = lshr i32 %u, 11
  %and.i.11.lobit = and i32 %and.i.11, 1
  %c.i.0.inc.i.11 = add i32 %and.i.11.lobit, %c.i.0.inc.i.10
  %and.i.12 = lshr i32 %u, 12
  %and.i.12.lobit = and i32 %and.i.12, 1
  %c.i.0.inc.i.12 = add i32 %and.i.12.lobit, %c.i.0.inc.i.11
  %and.i.13 = lshr i32 %u, 13
  %and.i.13.lobit = and i32 %and.i.13, 1
  %c.i.0.inc.i.13 = add i32 %and.i.13.lobit, %c.i.0.inc.i.12
  %and.i.14 = lshr i32 %u, 14
  %and.i.14.lobit = and i32 %and.i.14, 1
  %c.i.0.inc.i.14 = add i32 %and.i.14.lobit, %c.i.0.inc.i.13
  %and.i.15 = lshr i32 %u, 15
  %and.i.15.lobit = and i32 %and.i.15, 1
  %c.i.0.inc.i.15 = add i32 %and.i.15.lobit, %c.i.0.inc.i.14
  %and.i.16 = lshr i32 %u, 16
  %and.i.16.lobit = and i32 %and.i.16, 1
  %c.i.0.inc.i.16 = add i32 %and.i.16.lobit, %c.i.0.inc.i.15
  %and.i.17 = lshr i32 %u, 17
  %and.i.17.lobit = and i32 %and.i.17, 1
  %c.i.0.inc.i.17 = add i32 %and.i.17.lobit, %c.i.0.inc.i.16
  %and.i.18 = lshr i32 %u, 18
  %and.i.18.lobit = and i32 %and.i.18, 1
  %c.i.0.inc.i.18 = add i32 %and.i.18.lobit, %c.i.0.inc.i.17
  %and.i.19 = lshr i32 %u, 19
  %and.i.19.lobit = and i32 %and.i.19, 1
  %c.i.0.inc.i.19 = add i32 %and.i.19.lobit, %c.i.0.inc.i.18
  %and.i.20 = lshr i32 %u, 20
  %and.i.20.lobit = and i32 %and.i.20, 1
  %c.i.0.inc.i.20 = add i32 %and.i.20.lobit, %c.i.0.inc.i.19
  %and.i.21 = lshr i32 %u, 21
  %and.i.21.lobit = and i32 %and.i.21, 1
  %c.i.0.inc.i.21 = add i32 %and.i.21.lobit, %c.i.0.inc.i.20
  %and.i.22 = lshr i32 %u, 22
  %and.i.22.lobit = and i32 %and.i.22, 1
  %c.i.0.inc.i.22 = add i32 %and.i.22.lobit, %c.i.0.inc.i.21
  %and.i.23 = lshr i32 %u, 23
  %and.i.23.lobit = and i32 %and.i.23, 1
  %c.i.0.inc.i.23 = add i32 %and.i.23.lobit, %c.i.0.inc.i.22
  %and.i.24 = lshr i32 %u, 24
  %and.i.24.lobit = and i32 %and.i.24, 1
  %c.i.0.inc.i.24 = add i32 %and.i.24.lobit, %c.i.0.inc.i.23
  %and.i.25 = lshr i32 %u, 25
  %and.i.25.lobit = and i32 %and.i.25, 1
  %c.i.0.inc.i.25 = add i32 %and.i.25.lobit, %c.i.0.inc.i.24
  %and.i.26 = lshr i32 %u, 26
  %and.i.26.lobit = and i32 %and.i.26, 1
  %c.i.0.inc.i.26 = add i32 %and.i.26.lobit, %c.i.0.inc.i.25
  %and.i.27 = lshr i32 %u, 27
  %and.i.27.lobit = and i32 %and.i.27, 1
  %c.i.0.inc.i.27 = add i32 %and.i.27.lobit, %c.i.0.inc.i.26
  %and.i.28 = lshr i32 %u, 28
  %and.i.28.lobit = and i32 %and.i.28, 1
  %c.i.0.inc.i.28 = add i32 %and.i.28.lobit, %c.i.0.inc.i.27
  %and.i.29 = lshr i32 %u, 29
  %and.i.29.lobit = and i32 %and.i.29, 1
  %c.i.0.inc.i.29 = add i32 %and.i.29.lobit, %c.i.0.inc.i.28
  %and.i.30 = lshr i32 %u, 30
  %and.i.30.lobit = and i32 %and.i.30, 1
  %c.i.0.inc.i.30 = add i32 %and.i.30.lobit, %c.i.0.inc.i.29
  %u.lobit = lshr i32 %u, 31
  %c.i.0.inc.i.31 = add i32 %u.lobit, %c.i.0.inc.i.30
  %shr.i = lshr i32 %u, 1
  %and.i4 = and i32 %shr.i, 1431655765
  %sub.i = sub i32 %u, %and.i4
  %shr1.i = lshr i32 %sub.i, 2
  %and2.i = and i32 %shr1.i, 858993459
  %and3.i = and i32 %sub.i, 858993459
  %add.i = add i32 %and2.i, %and3.i
  %shr4.i = lshr i32 %add.i, 4
  %add5.i = add i32 %shr4.i, %add.i
  %and6.i = and i32 %add5.i, 252645135
  %shr7.i = lshr i32 %and6.i, 8
  %add8.i = add i32 %shr7.i, %and6.i
  %and9.i = and i32 %add8.i, 16711935
  %shr10.i = lshr i32 %and9.i, 16
  %add11.i = add i32 %shr10.i, %and9.i
  %and12.i = and i32 %add11.i, 65535
  %cmp = icmp eq i32 %c.i.0.inc.i.31, %and12.i
  ret i1 %cmp
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define zeroext i1 @_Z8parity_1j(i32 %v) #0 {
entry:
  %and = and i32 %v, 1
  %and.1 = lshr i32 %v, 1
  %and.1.lobit = and i32 %and.1, 1
  %c.0.inc.1 = add i32 %and.1.lobit, %and
  %and.2 = lshr i32 %v, 2
  %and.2.lobit = and i32 %and.2, 1
  %c.0.inc.2 = add i32 %and.2.lobit, %c.0.inc.1
  %and.3 = lshr i32 %v, 3
  %and.3.lobit = and i32 %and.3, 1
  %c.0.inc.3 = add i32 %and.3.lobit, %c.0.inc.2
  %and.4 = lshr i32 %v, 4
  %and.4.lobit = and i32 %and.4, 1
  %c.0.inc.4 = add i32 %and.4.lobit, %c.0.inc.3
  %and.5 = lshr i32 %v, 5
  %and.5.lobit = and i32 %and.5, 1
  %c.0.inc.5 = add i32 %and.5.lobit, %c.0.inc.4
  %and.6 = lshr i32 %v, 6
  %and.6.lobit = and i32 %and.6, 1
  %c.0.inc.6 = add i32 %and.6.lobit, %c.0.inc.5
  %and.7 = lshr i32 %v, 7
  %and.7.lobit = and i32 %and.7, 1
  %c.0.inc.7 = add i32 %and.7.lobit, %c.0.inc.6
  %and.8 = lshr i32 %v, 8
  %and.8.lobit = and i32 %and.8, 1
  %c.0.inc.8 = add i32 %and.8.lobit, %c.0.inc.7
  %and.9 = lshr i32 %v, 9
  %and.9.lobit = and i32 %and.9, 1
  %c.0.inc.9 = add i32 %and.9.lobit, %c.0.inc.8
  %and.10 = lshr i32 %v, 10
  %and.10.lobit = and i32 %and.10, 1
  %c.0.inc.10 = add i32 %and.10.lobit, %c.0.inc.9
  %and.11 = lshr i32 %v, 11
  %and.11.lobit = and i32 %and.11, 1
  %c.0.inc.11 = add i32 %and.11.lobit, %c.0.inc.10
  %and.12 = lshr i32 %v, 12
  %and.12.lobit = and i32 %and.12, 1
  %c.0.inc.12 = add i32 %and.12.lobit, %c.0.inc.11
  %and.13 = lshr i32 %v, 13
  %and.13.lobit = and i32 %and.13, 1
  %c.0.inc.13 = add i32 %and.13.lobit, %c.0.inc.12
  %and.14 = lshr i32 %v, 14
  %and.14.lobit = and i32 %and.14, 1
  %c.0.inc.14 = add i32 %and.14.lobit, %c.0.inc.13
  %and.15 = lshr i32 %v, 15
  %and.15.lobit = and i32 %and.15, 1
  %c.0.inc.15 = add i32 %and.15.lobit, %c.0.inc.14
  %and.16 = lshr i32 %v, 16
  %and.16.lobit = and i32 %and.16, 1
  %c.0.inc.16 = add i32 %and.16.lobit, %c.0.inc.15
  %and.17 = lshr i32 %v, 17
  %and.17.lobit = and i32 %and.17, 1
  %c.0.inc.17 = add i32 %and.17.lobit, %c.0.inc.16
  %and.18 = lshr i32 %v, 18
  %and.18.lobit = and i32 %and.18, 1
  %c.0.inc.18 = add i32 %and.18.lobit, %c.0.inc.17
  %and.19 = lshr i32 %v, 19
  %and.19.lobit = and i32 %and.19, 1
  %c.0.inc.19 = add i32 %and.19.lobit, %c.0.inc.18
  %and.20 = lshr i32 %v, 20
  %and.20.lobit = and i32 %and.20, 1
  %c.0.inc.20 = add i32 %and.20.lobit, %c.0.inc.19
  %and.21 = lshr i32 %v, 21
  %and.21.lobit = and i32 %and.21, 1
  %c.0.inc.21 = add i32 %and.21.lobit, %c.0.inc.20
  %and.22 = lshr i32 %v, 22
  %and.22.lobit = and i32 %and.22, 1
  %c.0.inc.22 = add i32 %and.22.lobit, %c.0.inc.21
  %and.23 = lshr i32 %v, 23
  %and.23.lobit = and i32 %and.23, 1
  %c.0.inc.23 = add i32 %and.23.lobit, %c.0.inc.22
  %and.24 = lshr i32 %v, 24
  %and.24.lobit = and i32 %and.24, 1
  %c.0.inc.24 = add i32 %and.24.lobit, %c.0.inc.23
  %and.25 = lshr i32 %v, 25
  %and.25.lobit = and i32 %and.25, 1
  %c.0.inc.25 = add i32 %and.25.lobit, %c.0.inc.24
  %and.26 = lshr i32 %v, 26
  %and.26.lobit = and i32 %and.26, 1
  %c.0.inc.26 = add i32 %and.26.lobit, %c.0.inc.25
  %and.27 = lshr i32 %v, 27
  %and.27.lobit = and i32 %and.27, 1
  %c.0.inc.27 = add i32 %and.27.lobit, %c.0.inc.26
  %and.28 = lshr i32 %v, 28
  %c.0.inc.28 = add i32 %and.28, %c.0.inc.27
  %and.29 = lshr i32 %v, 29
  %c.0.inc.29 = add i32 %and.29, %c.0.inc.28
  %and.30 = lshr i32 %v, 30
  %c.0.inc.30 = add i32 %and.30, %c.0.inc.29
  %v.lobit = lshr i32 %v, 31
  %c.0.inc.31 = add i32 %v.lobit, %c.0.inc.30
  %and2 = and i32 %c.0.inc.31, 1
  %tobool3 = icmp ne i32 %and2, 0
  ret i1 %tobool3
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define zeroext i1 @_Z8parity_3j(i32 %v) #0 {
entry:
  %shr = lshr i32 %v, 1
  %xor = xor i32 %shr, %v
  %shr1 = lshr i32 %xor, 2
  %xor2 = xor i32 %shr1, %xor
  %and = and i32 %xor2, 286331153
  %0 = shl i32 %and, 28
  %1 = add i32 %0, %and
  %2 = add i32 %1, %and
  %3 = add i32 %2, %and
  %4 = add i32 %3, %and
  %5 = add i32 %4, %and
  %6 = add i32 %5, %and
  %7 = add i32 %6, %and
  %8 = add i32 %7, %and
  %9 = add i32 %8, %and
  %10 = add i32 %9, %and
  %11 = add i32 %10, %and
  %12 = add i32 %11, %and
  %13 = add i32 %12, %and
  %14 = add i32 %13, %and
  %15 = add i32 %14, %and
  %16 = add i32 %15, %and
  %17 = add i32 %16, %and
  %mul = mul i32 %and, 286331153
  %and4 = and i32 %17, 268435456
  %tobool = icmp ne i32 %and4, 0
  ret i1 %tobool
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define zeroext i1 @_Z8parity_4j(i32 %v) #0 {
entry:
  %shr = lshr i32 %v, 16
  %xor = xor i32 %shr, %v
  %shr1 = lshr i32 %xor, 8
  %xor2 = xor i32 %shr1, %xor
  %shr3 = lshr i32 %xor2, 4
  %xor4 = xor i32 %shr3, %xor2
  %and = and i32 %xor4, 15
  %0 = icmp eq i32 %and, 0
  %1 = select i1 %0, i32 27030, i32 0
  %2 = icmp eq i32 %and, 1
  %3 = select i1 %2, i32 13515, i32 %1
  %4 = icmp eq i32 %and, 2
  %5 = select i1 %4, i32 6757, i32 %3
  %6 = icmp eq i32 %and, 3
  %7 = select i1 %6, i32 3378, i32 %5
  %8 = icmp eq i32 %and, 4
  %9 = select i1 %8, i32 1689, i32 %7
  %10 = icmp eq i32 %and, 5
  %11 = select i1 %10, i32 844, i32 %9
  %12 = icmp eq i32 %and, 6
  %13 = select i1 %12, i32 422, i32 %11
  %14 = icmp eq i32 %and, 7
  %15 = select i1 %14, i32 211, i32 %13
  %16 = icmp eq i32 %and, 8
  %17 = select i1 %16, i32 105, i32 %15
  %18 = icmp eq i32 %and, 9
  %19 = select i1 %18, i32 52, i32 %17
  %20 = icmp eq i32 %and, 10
  %21 = select i1 %20, i32 26, i32 %19
  %22 = icmp eq i32 %and, 11
  %23 = select i1 %22, i32 13, i32 %21
  %24 = icmp eq i32 %and, 12
  %25 = select i1 %24, i32 6, i32 %23
  %26 = icmp eq i32 %and, 13
  %27 = select i1 %26, i32 3, i32 %25
  %28 = icmp eq i32 %and, 14
  %29 = select i1 %28, i32 1, i32 %27
  %30 = icmp eq i32 %and, 15
  %31 = select i1 %30, i32 0, i32 %29
  %32 = icmp eq i32 %and, 16
  %33 = select i1 %32, i32 0, i32 %31
  %34 = icmp eq i32 %and, 17
  %35 = select i1 %34, i32 0, i32 %33
  %36 = icmp eq i32 %and, 18
  %37 = select i1 %36, i32 0, i32 %35
  %38 = icmp eq i32 %and, 19
  %39 = select i1 %38, i32 0, i32 %37
  %40 = icmp eq i32 %and, 20
  %41 = select i1 %40, i32 0, i32 %39
  %42 = icmp eq i32 %and, 21
  %43 = select i1 %42, i32 0, i32 %41
  %44 = icmp eq i32 %and, 22
  %45 = select i1 %44, i32 0, i32 %43
  %46 = icmp eq i32 %and, 23
  %47 = select i1 %46, i32 0, i32 %45
  %48 = icmp eq i32 %and, 24
  %49 = select i1 %48, i32 0, i32 %47
  %50 = icmp eq i32 %and, 25
  %51 = select i1 %50, i32 0, i32 %49
  %52 = icmp eq i32 %and, 26
  %53 = select i1 %52, i32 0, i32 %51
  %54 = icmp eq i32 %and, 27
  %55 = select i1 %54, i32 0, i32 %53
  %56 = icmp eq i32 %and, 28
  %57 = select i1 %56, i32 0, i32 %55
  %58 = icmp eq i32 %and, 29
  %59 = select i1 %58, i32 0, i32 %57
  %60 = icmp eq i32 %and, 30
  %61 = select i1 %60, i32 0, i32 %59
  %62 = icmp eq i32 %and, 31
  %63 = select i1 %62, i32 0, i32 %61
  %shr5 = lshr i32 27030, %and
  %and6 = and i32 %63, 1
  %tobool = icmp ne i32 %and6, 0
  ret i1 %tobool
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z16CHECK_parity_1_3j(i32 %v) #1 {
entry:
  %and.i = and i32 %v, 1
  %and.i.1 = lshr i32 %v, 1
  %and.i.1.lobit = and i32 %and.i.1, 1
  %c.i.0.inc.i.1 = add i32 %and.i.1.lobit, %and.i
  %and.i.2 = lshr i32 %v, 2
  %and.i.2.lobit = and i32 %and.i.2, 1
  %c.i.0.inc.i.2 = add i32 %and.i.2.lobit, %c.i.0.inc.i.1
  %and.i.3 = lshr i32 %v, 3
  %and.i.3.lobit = and i32 %and.i.3, 1
  %c.i.0.inc.i.3 = add i32 %and.i.3.lobit, %c.i.0.inc.i.2
  %and.i.4 = lshr i32 %v, 4
  %and.i.4.lobit = and i32 %and.i.4, 1
  %c.i.0.inc.i.4 = add i32 %and.i.4.lobit, %c.i.0.inc.i.3
  %and.i.5 = lshr i32 %v, 5
  %and.i.5.lobit = and i32 %and.i.5, 1
  %c.i.0.inc.i.5 = add i32 %and.i.5.lobit, %c.i.0.inc.i.4
  %and.i.6 = lshr i32 %v, 6
  %and.i.6.lobit = and i32 %and.i.6, 1
  %c.i.0.inc.i.6 = add i32 %and.i.6.lobit, %c.i.0.inc.i.5
  %and.i.7 = lshr i32 %v, 7
  %and.i.7.lobit = and i32 %and.i.7, 1
  %c.i.0.inc.i.7 = add i32 %and.i.7.lobit, %c.i.0.inc.i.6
  %and.i.8 = lshr i32 %v, 8
  %and.i.8.lobit = and i32 %and.i.8, 1
  %c.i.0.inc.i.8 = add i32 %and.i.8.lobit, %c.i.0.inc.i.7
  %and.i.9 = lshr i32 %v, 9
  %and.i.9.lobit = and i32 %and.i.9, 1
  %c.i.0.inc.i.9 = add i32 %and.i.9.lobit, %c.i.0.inc.i.8
  %and.i.10 = lshr i32 %v, 10
  %and.i.10.lobit = and i32 %and.i.10, 1
  %c.i.0.inc.i.10 = add i32 %and.i.10.lobit, %c.i.0.inc.i.9
  %and.i.11 = lshr i32 %v, 11
  %and.i.11.lobit = and i32 %and.i.11, 1
  %c.i.0.inc.i.11 = add i32 %and.i.11.lobit, %c.i.0.inc.i.10
  %and.i.12 = lshr i32 %v, 12
  %and.i.12.lobit = and i32 %and.i.12, 1
  %c.i.0.inc.i.12 = add i32 %and.i.12.lobit, %c.i.0.inc.i.11
  %and.i.13 = lshr i32 %v, 13
  %and.i.13.lobit = and i32 %and.i.13, 1
  %c.i.0.inc.i.13 = add i32 %and.i.13.lobit, %c.i.0.inc.i.12
  %and.i.14 = lshr i32 %v, 14
  %and.i.14.lobit = and i32 %and.i.14, 1
  %c.i.0.inc.i.14 = add i32 %and.i.14.lobit, %c.i.0.inc.i.13
  %and.i.15 = lshr i32 %v, 15
  %and.i.15.lobit = and i32 %and.i.15, 1
  %c.i.0.inc.i.15 = add i32 %and.i.15.lobit, %c.i.0.inc.i.14
  %and.i.16 = lshr i32 %v, 16
  %and.i.16.lobit = and i32 %and.i.16, 1
  %c.i.0.inc.i.16 = add i32 %and.i.16.lobit, %c.i.0.inc.i.15
  %and.i.17 = lshr i32 %v, 17
  %and.i.17.lobit = and i32 %and.i.17, 1
  %c.i.0.inc.i.17 = add i32 %and.i.17.lobit, %c.i.0.inc.i.16
  %and.i.18 = lshr i32 %v, 18
  %and.i.18.lobit = and i32 %and.i.18, 1
  %c.i.0.inc.i.18 = add i32 %and.i.18.lobit, %c.i.0.inc.i.17
  %and.i.19 = lshr i32 %v, 19
  %and.i.19.lobit = and i32 %and.i.19, 1
  %c.i.0.inc.i.19 = add i32 %and.i.19.lobit, %c.i.0.inc.i.18
  %and.i.20 = lshr i32 %v, 20
  %and.i.20.lobit = and i32 %and.i.20, 1
  %c.i.0.inc.i.20 = add i32 %and.i.20.lobit, %c.i.0.inc.i.19
  %and.i.21 = lshr i32 %v, 21
  %and.i.21.lobit = and i32 %and.i.21, 1
  %c.i.0.inc.i.21 = add i32 %and.i.21.lobit, %c.i.0.inc.i.20
  %and.i.22 = lshr i32 %v, 22
  %and.i.22.lobit = and i32 %and.i.22, 1
  %c.i.0.inc.i.22 = add i32 %and.i.22.lobit, %c.i.0.inc.i.21
  %and.i.23 = lshr i32 %v, 23
  %and.i.23.lobit = and i32 %and.i.23, 1
  %c.i.0.inc.i.23 = add i32 %and.i.23.lobit, %c.i.0.inc.i.22
  %and.i.24 = lshr i32 %v, 24
  %and.i.24.lobit = and i32 %and.i.24, 1
  %c.i.0.inc.i.24 = add i32 %and.i.24.lobit, %c.i.0.inc.i.23
  %and.i.25 = lshr i32 %v, 25
  %and.i.25.lobit = and i32 %and.i.25, 1
  %c.i.0.inc.i.25 = add i32 %and.i.25.lobit, %c.i.0.inc.i.24
  %and.i.26 = lshr i32 %v, 26
  %and.i.26.lobit = and i32 %and.i.26, 1
  %c.i.0.inc.i.26 = add i32 %and.i.26.lobit, %c.i.0.inc.i.25
  %and.i.27 = lshr i32 %v, 27
  %and.i.27.lobit = and i32 %and.i.27, 1
  %c.i.0.inc.i.27 = add i32 %and.i.27.lobit, %c.i.0.inc.i.26
  %and.i.28 = lshr i32 %v, 28
  %and.i.28.lobit = and i32 %and.i.28, 1
  %c.i.0.inc.i.28 = add i32 %and.i.28.lobit, %c.i.0.inc.i.27
  %and.i.29 = lshr i32 %v, 29
  %c.i.0.inc.i.29 = add i32 %and.i.29, %c.i.0.inc.i.28
  %and.i.30 = lshr i32 %v, 30
  %c.i.0.inc.i.30 = add i32 %and.i.30, %c.i.0.inc.i.29
  %v.lobit = lshr i32 %v, 31
  %c.i.0.inc.i.31 = add i32 %v.lobit, %c.i.0.inc.i.30
  %shr.i = lshr i32 %v, 1
  %xor.i = xor i32 %shr.i, %v
  %shr1.i = lshr i32 %xor.i, 2
  %xor2.i = xor i32 %shr1.i, %xor.i
  %and.i4 = and i32 %xor2.i, 286331153
  %0 = shl i32 %and.i4, 28
  %1 = add i32 %0, %and.i4
  %2 = add i32 %1, %and.i4
  %3 = add i32 %2, %and.i4
  %4 = add i32 %3, %and.i4
  %5 = add i32 %4, %and.i4
  %6 = add i32 %5, %and.i4
  %7 = add i32 %6, %and.i4
  %8 = add i32 %7, %and.i4
  %9 = add i32 %8, %and.i4
  %10 = add i32 %9, %and.i4
  %11 = add i32 %10, %and.i4
  %12 = add i32 %11, %and.i4
  %13 = add i32 %12, %and.i4
  %14 = add i32 %13, %and.i4
  %15 = add i32 %14, %and.i4
  %16 = add i32 %15, %and.i4
  %17 = add i32 %16, %and.i4
  %mul.i = mul i32 %and.i4, 286331153
  %and4.i = lshr i32 %17, 28
  %18 = xor i32 %c.i.0.inc.i.31, %and4.i
  %19 = and i32 %18, 1
  %cmp = icmp eq i32 %19, 0
  ret i1 %cmp
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z16CHECK_parity_1_4j(i32 %v) #1 {
entry:
  %and.i = and i32 %v, 1
  %and.i.1 = lshr i32 %v, 1
  %and.i.1.lobit = and i32 %and.i.1, 1
  %c.i.0.inc.i.1 = add i32 %and.i.1.lobit, %and.i
  %and.i.2 = lshr i32 %v, 2
  %and.i.2.lobit = and i32 %and.i.2, 1
  %c.i.0.inc.i.2 = add i32 %and.i.2.lobit, %c.i.0.inc.i.1
  %and.i.3 = lshr i32 %v, 3
  %and.i.3.lobit = and i32 %and.i.3, 1
  %c.i.0.inc.i.3 = add i32 %and.i.3.lobit, %c.i.0.inc.i.2
  %and.i.4 = lshr i32 %v, 4
  %and.i.4.lobit = and i32 %and.i.4, 1
  %c.i.0.inc.i.4 = add i32 %and.i.4.lobit, %c.i.0.inc.i.3
  %and.i.5 = lshr i32 %v, 5
  %and.i.5.lobit = and i32 %and.i.5, 1
  %c.i.0.inc.i.5 = add i32 %and.i.5.lobit, %c.i.0.inc.i.4
  %and.i.6 = lshr i32 %v, 6
  %and.i.6.lobit = and i32 %and.i.6, 1
  %c.i.0.inc.i.6 = add i32 %and.i.6.lobit, %c.i.0.inc.i.5
  %and.i.7 = lshr i32 %v, 7
  %and.i.7.lobit = and i32 %and.i.7, 1
  %c.i.0.inc.i.7 = add i32 %and.i.7.lobit, %c.i.0.inc.i.6
  %and.i.8 = lshr i32 %v, 8
  %and.i.8.lobit = and i32 %and.i.8, 1
  %c.i.0.inc.i.8 = add i32 %and.i.8.lobit, %c.i.0.inc.i.7
  %and.i.9 = lshr i32 %v, 9
  %and.i.9.lobit = and i32 %and.i.9, 1
  %c.i.0.inc.i.9 = add i32 %and.i.9.lobit, %c.i.0.inc.i.8
  %and.i.10 = lshr i32 %v, 10
  %and.i.10.lobit = and i32 %and.i.10, 1
  %c.i.0.inc.i.10 = add i32 %and.i.10.lobit, %c.i.0.inc.i.9
  %and.i.11 = lshr i32 %v, 11
  %and.i.11.lobit = and i32 %and.i.11, 1
  %c.i.0.inc.i.11 = add i32 %and.i.11.lobit, %c.i.0.inc.i.10
  %and.i.12 = lshr i32 %v, 12
  %and.i.12.lobit = and i32 %and.i.12, 1
  %c.i.0.inc.i.12 = add i32 %and.i.12.lobit, %c.i.0.inc.i.11
  %and.i.13 = lshr i32 %v, 13
  %and.i.13.lobit = and i32 %and.i.13, 1
  %c.i.0.inc.i.13 = add i32 %and.i.13.lobit, %c.i.0.inc.i.12
  %and.i.14 = lshr i32 %v, 14
  %and.i.14.lobit = and i32 %and.i.14, 1
  %c.i.0.inc.i.14 = add i32 %and.i.14.lobit, %c.i.0.inc.i.13
  %and.i.15 = lshr i32 %v, 15
  %and.i.15.lobit = and i32 %and.i.15, 1
  %c.i.0.inc.i.15 = add i32 %and.i.15.lobit, %c.i.0.inc.i.14
  %and.i.16 = lshr i32 %v, 16
  %and.i.16.lobit = and i32 %and.i.16, 1
  %c.i.0.inc.i.16 = add i32 %and.i.16.lobit, %c.i.0.inc.i.15
  %and.i.17 = lshr i32 %v, 17
  %and.i.17.lobit = and i32 %and.i.17, 1
  %c.i.0.inc.i.17 = add i32 %and.i.17.lobit, %c.i.0.inc.i.16
  %and.i.18 = lshr i32 %v, 18
  %and.i.18.lobit = and i32 %and.i.18, 1
  %c.i.0.inc.i.18 = add i32 %and.i.18.lobit, %c.i.0.inc.i.17
  %and.i.19 = lshr i32 %v, 19
  %and.i.19.lobit = and i32 %and.i.19, 1
  %c.i.0.inc.i.19 = add i32 %and.i.19.lobit, %c.i.0.inc.i.18
  %and.i.20 = lshr i32 %v, 20
  %and.i.20.lobit = and i32 %and.i.20, 1
  %c.i.0.inc.i.20 = add i32 %and.i.20.lobit, %c.i.0.inc.i.19
  %and.i.21 = lshr i32 %v, 21
  %and.i.21.lobit = and i32 %and.i.21, 1
  %c.i.0.inc.i.21 = add i32 %and.i.21.lobit, %c.i.0.inc.i.20
  %and.i.22 = lshr i32 %v, 22
  %and.i.22.lobit = and i32 %and.i.22, 1
  %c.i.0.inc.i.22 = add i32 %and.i.22.lobit, %c.i.0.inc.i.21
  %and.i.23 = lshr i32 %v, 23
  %and.i.23.lobit = and i32 %and.i.23, 1
  %c.i.0.inc.i.23 = add i32 %and.i.23.lobit, %c.i.0.inc.i.22
  %and.i.24 = lshr i32 %v, 24
  %and.i.24.lobit = and i32 %and.i.24, 1
  %c.i.0.inc.i.24 = add i32 %and.i.24.lobit, %c.i.0.inc.i.23
  %and.i.25 = lshr i32 %v, 25
  %and.i.25.lobit = and i32 %and.i.25, 1
  %c.i.0.inc.i.25 = add i32 %and.i.25.lobit, %c.i.0.inc.i.24
  %and.i.26 = lshr i32 %v, 26
  %and.i.26.lobit = and i32 %and.i.26, 1
  %c.i.0.inc.i.26 = add i32 %and.i.26.lobit, %c.i.0.inc.i.25
  %and.i.27 = lshr i32 %v, 27
  %and.i.27.lobit = and i32 %and.i.27, 1
  %c.i.0.inc.i.27 = add i32 %and.i.27.lobit, %c.i.0.inc.i.26
  %and.i.28 = lshr i32 %v, 28
  %and.i.28.lobit = and i32 %and.i.28, 1
  %c.i.0.inc.i.28 = add i32 %and.i.28.lobit, %c.i.0.inc.i.27
  %and.i.29 = lshr i32 %v, 29
  %c.i.0.inc.i.29 = add i32 %and.i.29, %c.i.0.inc.i.28
  %and.i.30 = lshr i32 %v, 30
  %c.i.0.inc.i.30 = add i32 %and.i.30, %c.i.0.inc.i.29
  %v.lobit = lshr i32 %v, 31
  %c.i.0.inc.i.31 = add i32 %v.lobit, %c.i.0.inc.i.30
  %shr.i = lshr i32 %v, 16
  %xor.i = xor i32 %shr.i, %v
  %shr1.i = lshr i32 %xor.i, 8
  %xor2.i = xor i32 %shr1.i, %xor.i
  %shr3.i = lshr i32 %xor2.i, 4
  %xor4.i = xor i32 %shr3.i, %xor2.i
  %and.i4 = and i32 %xor4.i, 15
  %0 = icmp eq i32 %and.i4, 0
  %1 = select i1 %0, i32 27030, i32 0
  %2 = icmp eq i32 %and.i4, 1
  %3 = select i1 %2, i32 13515, i32 %1
  %4 = icmp eq i32 %and.i4, 2
  %5 = select i1 %4, i32 6757, i32 %3
  %6 = icmp eq i32 %and.i4, 3
  %7 = select i1 %6, i32 3378, i32 %5
  %8 = icmp eq i32 %and.i4, 4
  %9 = select i1 %8, i32 1689, i32 %7
  %10 = icmp eq i32 %and.i4, 5
  %11 = select i1 %10, i32 844, i32 %9
  %12 = icmp eq i32 %and.i4, 6
  %13 = select i1 %12, i32 422, i32 %11
  %14 = icmp eq i32 %and.i4, 7
  %15 = select i1 %14, i32 211, i32 %13
  %16 = icmp eq i32 %and.i4, 8
  %17 = select i1 %16, i32 105, i32 %15
  %18 = icmp eq i32 %and.i4, 9
  %19 = select i1 %18, i32 52, i32 %17
  %20 = icmp eq i32 %and.i4, 10
  %21 = select i1 %20, i32 26, i32 %19
  %22 = icmp eq i32 %and.i4, 11
  %23 = select i1 %22, i32 13, i32 %21
  %24 = icmp eq i32 %and.i4, 12
  %25 = select i1 %24, i32 6, i32 %23
  %26 = icmp eq i32 %and.i4, 13
  %27 = select i1 %26, i32 3, i32 %25
  %28 = icmp eq i32 %and.i4, 14
  %29 = select i1 %28, i32 1, i32 %27
  %30 = icmp eq i32 %and.i4, 15
  %31 = select i1 %30, i32 0, i32 %29
  %32 = icmp eq i32 %and.i4, 16
  %33 = select i1 %32, i32 0, i32 %31
  %34 = icmp eq i32 %and.i4, 17
  %35 = select i1 %34, i32 0, i32 %33
  %36 = icmp eq i32 %and.i4, 18
  %37 = select i1 %36, i32 0, i32 %35
  %38 = icmp eq i32 %and.i4, 19
  %39 = select i1 %38, i32 0, i32 %37
  %40 = icmp eq i32 %and.i4, 20
  %41 = select i1 %40, i32 0, i32 %39
  %42 = icmp eq i32 %and.i4, 21
  %43 = select i1 %42, i32 0, i32 %41
  %44 = icmp eq i32 %and.i4, 22
  %45 = select i1 %44, i32 0, i32 %43
  %46 = icmp eq i32 %and.i4, 23
  %47 = select i1 %46, i32 0, i32 %45
  %48 = icmp eq i32 %and.i4, 24
  %49 = select i1 %48, i32 0, i32 %47
  %50 = icmp eq i32 %and.i4, 25
  %51 = select i1 %50, i32 0, i32 %49
  %52 = icmp eq i32 %and.i4, 26
  %53 = select i1 %52, i32 0, i32 %51
  %54 = icmp eq i32 %and.i4, 27
  %55 = select i1 %54, i32 0, i32 %53
  %56 = icmp eq i32 %and.i4, 28
  %57 = select i1 %56, i32 0, i32 %55
  %58 = icmp eq i32 %and.i4, 29
  %59 = select i1 %58, i32 0, i32 %57
  %60 = icmp eq i32 %and.i4, 30
  %61 = select i1 %60, i32 0, i32 %59
  %62 = icmp eq i32 %and.i4, 31
  %63 = select i1 %62, i32 0, i32 %61
  %shr5.i = lshr i32 27030, %and.i4
  %64 = xor i32 %c.i.0.inc.i.31, %63
  %65 = and i32 %64, 1
  %cmp = icmp eq i32 %65, 0
  ret i1 %cmp
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z16CHECK_parity_3_4j(i32 %v) #1 {
entry:
  %shr.i = lshr i32 %v, 1
  %xor.i = xor i32 %shr.i, %v
  %shr1.i = lshr i32 %xor.i, 2
  %xor2.i = xor i32 %shr1.i, %xor.i
  %and.i = and i32 %xor2.i, 286331153
  %0 = shl i32 %and.i, 28
  %1 = add i32 %0, %and.i
  %2 = add i32 %1, %and.i
  %3 = add i32 %2, %and.i
  %4 = add i32 %3, %and.i
  %5 = add i32 %4, %and.i
  %6 = add i32 %5, %and.i
  %7 = add i32 %6, %and.i
  %8 = add i32 %7, %and.i
  %9 = add i32 %8, %and.i
  %10 = add i32 %9, %and.i
  %11 = add i32 %10, %and.i
  %12 = add i32 %11, %and.i
  %13 = add i32 %12, %and.i
  %14 = add i32 %13, %and.i
  %15 = add i32 %14, %and.i
  %16 = add i32 %15, %and.i
  %17 = add i32 %16, %and.i
  %mul.i = mul i32 %and.i, 286331153
  %and4.i = lshr i32 %17, 28
  %shr.i4 = lshr i32 %v, 16
  %xor.i5 = xor i32 %shr.i4, %v
  %shr1.i6 = lshr i32 %xor.i5, 8
  %xor2.i7 = xor i32 %shr1.i6, %xor.i5
  %shr3.i8 = lshr i32 %xor2.i7, 4
  %xor4.i = xor i32 %shr3.i8, %xor2.i7
  %and.i9 = and i32 %xor4.i, 15
  %18 = icmp eq i32 %and.i9, 0
  %19 = select i1 %18, i32 27030, i32 0
  %20 = icmp eq i32 %and.i9, 1
  %21 = select i1 %20, i32 13515, i32 %19
  %22 = icmp eq i32 %and.i9, 2
  %23 = select i1 %22, i32 6757, i32 %21
  %24 = icmp eq i32 %and.i9, 3
  %25 = select i1 %24, i32 3378, i32 %23
  %26 = icmp eq i32 %and.i9, 4
  %27 = select i1 %26, i32 1689, i32 %25
  %28 = icmp eq i32 %and.i9, 5
  %29 = select i1 %28, i32 844, i32 %27
  %30 = icmp eq i32 %and.i9, 6
  %31 = select i1 %30, i32 422, i32 %29
  %32 = icmp eq i32 %and.i9, 7
  %33 = select i1 %32, i32 211, i32 %31
  %34 = icmp eq i32 %and.i9, 8
  %35 = select i1 %34, i32 105, i32 %33
  %36 = icmp eq i32 %and.i9, 9
  %37 = select i1 %36, i32 52, i32 %35
  %38 = icmp eq i32 %and.i9, 10
  %39 = select i1 %38, i32 26, i32 %37
  %40 = icmp eq i32 %and.i9, 11
  %41 = select i1 %40, i32 13, i32 %39
  %42 = icmp eq i32 %and.i9, 12
  %43 = select i1 %42, i32 6, i32 %41
  %44 = icmp eq i32 %and.i9, 13
  %45 = select i1 %44, i32 3, i32 %43
  %46 = icmp eq i32 %and.i9, 14
  %47 = select i1 %46, i32 1, i32 %45
  %48 = icmp eq i32 %and.i9, 15
  %49 = select i1 %48, i32 0, i32 %47
  %50 = icmp eq i32 %and.i9, 16
  %51 = select i1 %50, i32 0, i32 %49
  %52 = icmp eq i32 %and.i9, 17
  %53 = select i1 %52, i32 0, i32 %51
  %54 = icmp eq i32 %and.i9, 18
  %55 = select i1 %54, i32 0, i32 %53
  %56 = icmp eq i32 %and.i9, 19
  %57 = select i1 %56, i32 0, i32 %55
  %58 = icmp eq i32 %and.i9, 20
  %59 = select i1 %58, i32 0, i32 %57
  %60 = icmp eq i32 %and.i9, 21
  %61 = select i1 %60, i32 0, i32 %59
  %62 = icmp eq i32 %and.i9, 22
  %63 = select i1 %62, i32 0, i32 %61
  %64 = icmp eq i32 %and.i9, 23
  %65 = select i1 %64, i32 0, i32 %63
  %66 = icmp eq i32 %and.i9, 24
  %67 = select i1 %66, i32 0, i32 %65
  %68 = icmp eq i32 %and.i9, 25
  %69 = select i1 %68, i32 0, i32 %67
  %70 = icmp eq i32 %and.i9, 26
  %71 = select i1 %70, i32 0, i32 %69
  %72 = icmp eq i32 %and.i9, 27
  %73 = select i1 %72, i32 0, i32 %71
  %74 = icmp eq i32 %and.i9, 28
  %75 = select i1 %74, i32 0, i32 %73
  %76 = icmp eq i32 %and.i9, 29
  %77 = select i1 %76, i32 0, i32 %75
  %78 = icmp eq i32 %and.i9, 30
  %79 = select i1 %78, i32 0, i32 %77
  %80 = icmp eq i32 %and.i9, 31
  %81 = select i1 %80, i32 0, i32 %79
  %shr5.i = lshr i32 27030, %and.i9
  %82 = xor i32 %81, %and4.i
  %83 = and i32 %82, 1
  %cmp = icmp eq i32 %83, 0
  ret i1 %cmp
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define i64 @_Z6swap_11P(i64 %v.coerce) #0 {
entry:
  %v.sroa.4.0.extract.shift = lshr i64 %v.coerce, 32
  %retval.sroa.2.0.insert.shift = shl i64 %v.coerce, 32
  %retval.sroa.0.0.insert.insert = or i64 %retval.sroa.2.0.insert.shift, %v.sroa.4.0.extract.shift
  ret i64 %retval.sroa.0.0.insert.insert
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define i64 @_Z6swap_21P(i64 %v.coerce) #0 {
entry:
  %v.sroa.7.0.extract.shift = lshr i64 %v.coerce, 32
  %retval.sroa.2.0.insert.shift = shl i64 %v.coerce, 32
  %retval.sroa.0.0.insert.insert = or i64 %retval.sroa.2.0.insert.shift, %v.sroa.7.0.extract.shift
  ret i64 %retval.sroa.0.0.insert.insert
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define i64 @_Z6swap_31P(i64 %v.coerce) #0 {
entry:
  %v.sroa.7.0.extract.shift = lshr i64 %v.coerce, 32
  %retval.sroa.2.0.insert.shift = shl i64 %v.coerce, 32
  %retval.sroa.0.0.insert.insert = or i64 %retval.sroa.2.0.insert.shift, %v.sroa.7.0.extract.shift
  ret i64 %retval.sroa.0.0.insert.insert
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z14CHECK_swap_1_21P(i64 %v.coerce) #1 {
_ZNK1PeqERKS_.exit:
  ret i1 true
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z14CHECK_swap_1_31P(i64 %v.coerce) #1 {
_ZNK1PeqERKS_.exit:
  ret i1 true
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z14CHECK_swap_2_31P(i64 %v.coerce) #1 {
_ZNK1PeqERKS_.exit:
  ret i1 true
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define zeroext i8 @_Z9reverse_1h(i8 zeroext %v) #0 {
entry:
  %shl = shl i8 %v, 7
  %0 = shl i8 %v, 5
  %1 = shl i8 %v, 3
  %.masked11 = and i8 %0, -64
  %conv4.2 = or i8 %.masked11, %shl
  %2 = shl i8 %v, 1
  %.masked = and i8 %1, -32
  %conv4.3 = or i8 %.masked, %conv4.2
  %3 = lshr i8 %v, 1
  %.masked7 = and i8 %2, -16
  %conv4.4 = or i8 %.masked7, %conv4.3
  %4 = lshr i8 %v, 3
  %.masked8 = and i8 %3, 120
  %conv4.5 = or i8 %.masked8, %conv4.4
  %shr.6 = lshr i8 %v, 6
  %shl.6 = shl nuw nsw i8 %shr.6, 1
  %shr.7 = lshr i8 %v, 7
  %.masked10 = and i8 %4, 28
  %conv4.6.masked = or i8 %.masked10, %conv4.5
  %conv4.7 = or i8 %shl.6, %conv4.6.masked
  %or.7 = or i8 %shr.7, %conv4.7
  ret i8 %or.7
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define zeroext i8 @_Z9reverse_3h(i8 zeroext %v) #0 {
entry:
  %conv = zext i8 %v to i64
  %0 = shl i64 %conv, 31
  %1 = add i64 %0, %conv
  %2 = add i64 %1, %conv
  %3 = add i64 %2, %conv
  %4 = add i64 %3, %conv
  %5 = add i64 %4, %conv
  %6 = add i64 %5, %conv
  %7 = add i64 %6, %conv
  %8 = add i64 %7, %conv
  %mul = mul i64 %conv, 2149582850
  %and = and i64 %8, 36578664720
  %9 = shl i64 %and, 32
  %10 = add i64 %9, %and
  %mul1 = mul i64 %and, 4311810305
  %shr = lshr i64 %10, 32
  %conv2 = trunc i64 %shr to i8
  ret i8 %conv2
}

; Function Attrs: alwaysinline nounwind readnone uwtable
define zeroext i8 @_Z9reverse_4h(i8 zeroext %v) #0 {
entry:
  %conv = zext i8 %v to i64
  %0 = shl i64 %conv, 11
  %1 = add i64 %0, %conv
  %2 = add i64 %1, %conv
  %3 = add i64 %2, %conv
  %4 = add i64 %3, %conv
  %mul = mul i64 %conv, 2050
  %and = and i64 %4, 139536
  %5 = shl i64 %conv, 15
  %6 = add i64 %5, %conv
  %7 = add i64 %6, %conv
  %8 = add i64 %7, %conv
  %9 = add i64 %8, %conv
  %10 = add i64 %9, %conv
  %11 = add i64 %10, %conv
  %12 = add i64 %11, %conv
  %13 = add i64 %12, %conv
  %14 = add i64 %13, %conv
  %15 = add i64 %14, %conv
  %mul2 = mul i64 %conv, 32800
  %and3 = and i64 %15, 558144
  %or = or i64 %and, %and3
  %16 = shl i64 %or, 16
  %17 = add i64 %16, %or
  %mul4 = mul i64 %or, 65793
  %shr = lshr i64 %17, 16
  %conv5 = trunc i64 %shr to i8
  ret i8 %conv5
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z17CHECK_reverse_1_3h(i8 zeroext %v) #1 {
entry:
  %conv1.i = zext i8 %v to i32
  %shl.i = shl nuw nsw i32 %conv1.i, 7
  %shl.i.masked = and i32 %shl.i, 128
  %0 = shl nuw nsw i32 %conv1.i, 5
  %shl.i.masked.1 = and i32 %0, 192
  %phitmp.1 = or i32 %shl.i.masked.1, %shl.i.masked
  %1 = shl nuw nsw i32 %conv1.i, 3
  %shl.i.masked.2 = and i32 %1, 224
  %phitmp.2 = or i32 %shl.i.masked.2, %phitmp.1
  %2 = shl nuw nsw i32 %conv1.i, 1
  %shl.i.masked.3 = and i32 %2, 240
  %phitmp.3 = or i32 %shl.i.masked.3, %phitmp.2
  %shr.i.4 = lshr i32 %conv1.i, 4
  %shl.i.4 = shl nuw nsw i32 %shr.i.4, 3
  %phitmp.4 = or i32 %shl.i.4, %phitmp.3
  %shr.i.5 = lshr i32 %conv1.i, 5
  %shl.i.5 = shl nuw nsw i32 %shr.i.5, 2
  %phitmp.5 = or i32 %shl.i.5, %phitmp.4
  %shr.i.6 = lshr i32 %conv1.i, 6
  %shl.i.6 = shl nuw nsw i32 %shr.i.6, 1
  %phitmp.6 = or i32 %shl.i.6, %phitmp.5
  %shr.i.7 = lshr i32 %conv1.i, 7
  %phitmp.7 = or i32 %shr.i.7, %phitmp.6
  %conv.i4 = zext i8 %v to i64
  %3 = shl i64 %conv.i4, 31
  %4 = add i64 %3, %conv.i4
  %5 = add i64 %4, %conv.i4
  %6 = add i64 %5, %conv.i4
  %7 = add i64 %6, %conv.i4
  %8 = add i64 %7, %conv.i4
  %9 = add i64 %8, %conv.i4
  %10 = add i64 %9, %conv.i4
  %11 = add i64 %10, %conv.i4
  %mul.i = mul i64 %conv.i4, 2149582850
  %and.i = and i64 %11, 36578664720
  %12 = shl i64 %and.i, 32
  %13 = add i64 %12, %and.i
  %mul1.i = mul i64 %and.i, 4311810305
  %shr.i5 = lshr i64 %13, 32
  %conv2.i6 = trunc i64 %shr.i5 to i32
  %conv2 = and i32 %conv2.i6, 255
  %cmp = icmp eq i32 %phitmp.7, %conv2
  ret i1 %cmp
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z17CHECK_reverse_1_4h(i8 zeroext %v) #1 {
entry:
  %conv1.i = zext i8 %v to i32
  %shl.i = shl nuw nsw i32 %conv1.i, 7
  %shl.i.masked = and i32 %shl.i, 128
  %0 = shl nuw nsw i32 %conv1.i, 5
  %shl.i.masked.1 = and i32 %0, 192
  %phitmp.1 = or i32 %shl.i.masked.1, %shl.i.masked
  %1 = shl nuw nsw i32 %conv1.i, 3
  %shl.i.masked.2 = and i32 %1, 224
  %phitmp.2 = or i32 %shl.i.masked.2, %phitmp.1
  %2 = shl nuw nsw i32 %conv1.i, 1
  %shl.i.masked.3 = and i32 %2, 240
  %phitmp.3 = or i32 %shl.i.masked.3, %phitmp.2
  %shr.i.4 = lshr i32 %conv1.i, 4
  %shl.i.4 = shl nuw nsw i32 %shr.i.4, 3
  %phitmp.4 = or i32 %shl.i.4, %phitmp.3
  %shr.i.5 = lshr i32 %conv1.i, 5
  %shl.i.5 = shl nuw nsw i32 %shr.i.5, 2
  %phitmp.5 = or i32 %shl.i.5, %phitmp.4
  %shr.i.6 = lshr i32 %conv1.i, 6
  %shl.i.6 = shl nuw nsw i32 %shr.i.6, 1
  %phitmp.6 = or i32 %shl.i.6, %phitmp.5
  %shr.i.7 = lshr i32 %conv1.i, 7
  %phitmp.7 = or i32 %shr.i.7, %phitmp.6
  %conv.i4 = zext i8 %v to i64
  %3 = shl i64 %conv.i4, 11
  %4 = add i64 %3, %conv.i4
  %5 = add i64 %4, %conv.i4
  %6 = add i64 %5, %conv.i4
  %7 = add i64 %6, %conv.i4
  %mul.i = mul i64 %conv.i4, 2050
  %and.i = and i64 %7, 139536
  %8 = shl i64 %conv.i4, 15
  %9 = add i64 %8, %conv.i4
  %10 = add i64 %9, %conv.i4
  %11 = add i64 %10, %conv.i4
  %12 = add i64 %11, %conv.i4
  %13 = add i64 %12, %conv.i4
  %14 = add i64 %13, %conv.i4
  %15 = add i64 %14, %conv.i4
  %16 = add i64 %15, %conv.i4
  %17 = add i64 %16, %conv.i4
  %18 = add i64 %17, %conv.i4
  %mul2.i = mul i64 %conv.i4, 32800
  %and3.i = and i64 %18, 558144
  %or.i6 = or i64 %and.i, %and3.i
  %19 = shl i64 %or.i6, 16
  %20 = add i64 %19, %or.i6
  %mul4.i = mul i64 %or.i6, 65793
  %shr.i7 = lshr i64 %20, 16
  %conv5.i8 = trunc i64 %shr.i7 to i32
  %conv2 = and i32 %conv5.i8, 255
  %cmp = icmp eq i32 %phitmp.7, %conv2
  ret i1 %cmp
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @_Z17CHECK_reverse_3_4h(i8 zeroext %v) #1 {
entry:
  %conv.i = zext i8 %v to i64
  %0 = shl i64 %conv.i, 31
  %1 = add i64 %0, %conv.i
  %2 = add i64 %1, %conv.i
  %3 = add i64 %2, %conv.i
  %4 = add i64 %3, %conv.i
  %5 = add i64 %4, %conv.i
  %6 = add i64 %5, %conv.i
  %7 = add i64 %6, %conv.i
  %8 = add i64 %7, %conv.i
  %mul.i = mul i64 %conv.i, 2149582850
  %and.i = and i64 %8, 36578664720
  %9 = shl i64 %and.i, 32
  %10 = add i64 %9, %and.i
  %mul1.i = mul i64 %and.i, 4311810305
  %shr.i = lshr i64 %10, 32
  %11 = shl i64 %conv.i, 11
  %12 = add i64 %11, %conv.i
  %13 = add i64 %12, %conv.i
  %14 = add i64 %13, %conv.i
  %15 = add i64 %14, %conv.i
  %mul.i5 = mul i64 %conv.i, 2050
  %and.i6 = and i64 %15, 139536
  %16 = shl i64 %conv.i, 15
  %17 = add i64 %16, %conv.i
  %18 = add i64 %17, %conv.i
  %19 = add i64 %18, %conv.i
  %20 = add i64 %19, %conv.i
  %21 = add i64 %20, %conv.i
  %22 = add i64 %21, %conv.i
  %23 = add i64 %22, %conv.i
  %24 = add i64 %23, %conv.i
  %25 = add i64 %24, %conv.i
  %26 = add i64 %25, %conv.i
  %mul2.i = mul i64 %conv.i, 32800
  %and3.i = and i64 %26, 558144
  %or.i = or i64 %and.i6, %and3.i
  %27 = shl i64 %or.i, 16
  %28 = add i64 %27, %or.i
  %mul4.i = mul i64 %or.i, 65793
  %shr.i7 = lshr i64 %28, 16
  %29 = xor i64 %shr.i7, %shr.i
  %30 = and i64 %29, 255
  %cmp = icmp eq i64 %30, 0
  ret i1 %cmp
}

attributes #0 = { alwaysinline nounwind readnone uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
