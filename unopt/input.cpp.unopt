; ModuleID = '/s/cs357/ass1/input.cpp'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.P = type { i32, i32 }

; Function Attrs: alwaysinline nounwind uwtable
define i32 @_Z5min_1ii(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32* %x.addr, align 4
  %1 = load i32* %y.addr, align 4
  %cmp = icmp slt i32 %0, %1
  %2 = load i32* %x.addr, align 4
  %3 = load i32* %y.addr, align 4
  %cond = select i1 %cmp, i32 %2, i32 %3
  ret i32 %cond
}

; Function Attrs: alwaysinline nounwind uwtable
define i32 @_Z5min_2ii(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32* %y.addr, align 4
  %1 = load i32* %x.addr, align 4
  %2 = load i32* %y.addr, align 4
  %xor = xor i32 %1, %2
  %3 = load i32* %x.addr, align 4
  %4 = load i32* %y.addr, align 4
  %cmp = icmp slt i32 %3, %4
  %conv = zext i1 %cmp to i32
  %sub = sub nsw i32 0, %conv
  %and = and i32 %xor, %sub
  %xor1 = xor i32 %0, %and
  ret i32 %xor1
}

; Function Attrs: nounwind uwtable
define zeroext i1 @_Z13CHECK_min_1_2ii(i32 %x, i32 %y) #1 {
entry:
  %x.addr.i2 = alloca i32, align 4
  %y.addr.i3 = alloca i32, align 4
  %x.addr.i = alloca i32, align 4
  %y.addr.i = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32* %x.addr, align 4
  %1 = load i32* %y.addr, align 4
  store i32 %0, i32* %x.addr.i, align 4
  store i32 %1, i32* %y.addr.i, align 4
  %2 = load i32* %x.addr.i, align 4
  %3 = load i32* %y.addr.i, align 4
  %cmp.i = icmp slt i32 %2, %3
  %4 = load i32* %x.addr.i, align 4
  %5 = load i32* %y.addr.i, align 4
  %cond.i = select i1 %cmp.i, i32 %4, i32 %5
  %6 = load i32* %x.addr, align 4
  %7 = load i32* %y.addr, align 4
  store i32 %6, i32* %x.addr.i2, align 4
  store i32 %7, i32* %y.addr.i3, align 4
  %8 = load i32* %y.addr.i3, align 4
  %9 = load i32* %x.addr.i2, align 4
  %10 = load i32* %y.addr.i3, align 4
  %xor.i = xor i32 %9, %10
  %11 = load i32* %x.addr.i2, align 4
  %12 = load i32* %y.addr.i3, align 4
  %cmp.i4 = icmp slt i32 %11, %12
  %conv.i = zext i1 %cmp.i4 to i32
  %sub.i = sub nsw i32 0, %conv.i
  %and.i = and i32 %xor.i, %sub.i
  %xor1.i = xor i32 %8, %and.i
  %cmp = icmp eq i32 %cond.i, %xor1.i
  ret i1 %cmp
}

; Function Attrs: alwaysinline nounwind uwtable
define i32 @_Z5max_1ii(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32* %x.addr, align 4
  %1 = load i32* %y.addr, align 4
  %cmp = icmp sgt i32 %0, %1
  %2 = load i32* %x.addr, align 4
  %3 = load i32* %y.addr, align 4
  %cond = select i1 %cmp, i32 %2, i32 %3
  ret i32 %cond
}

; Function Attrs: alwaysinline nounwind uwtable
define i32 @_Z5max_2ii(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32* %x.addr, align 4
  %1 = load i32* %x.addr, align 4
  %2 = load i32* %y.addr, align 4
  %xor = xor i32 %1, %2
  %3 = load i32* %x.addr, align 4
  %4 = load i32* %y.addr, align 4
  %cmp = icmp slt i32 %3, %4
  %conv = zext i1 %cmp to i32
  %sub = sub nsw i32 0, %conv
  %and = and i32 %xor, %sub
  %xor1 = xor i32 %0, %and
  ret i32 %xor1
}

; Function Attrs: nounwind uwtable
define zeroext i1 @_Z13CHECK_max_1_2ii(i32 %x, i32 %y) #1 {
entry:
  %x.addr.i2 = alloca i32, align 4
  %y.addr.i3 = alloca i32, align 4
  %x.addr.i = alloca i32, align 4
  %y.addr.i = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32* %x.addr, align 4
  %1 = load i32* %y.addr, align 4
  store i32 %0, i32* %x.addr.i, align 4
  store i32 %1, i32* %y.addr.i, align 4
  %2 = load i32* %x.addr.i, align 4
  %3 = load i32* %y.addr.i, align 4
  %cmp.i = icmp sgt i32 %2, %3
  %4 = load i32* %x.addr.i, align 4
  %5 = load i32* %y.addr.i, align 4
  %cond.i = select i1 %cmp.i, i32 %4, i32 %5
  %6 = load i32* %x.addr, align 4
  %7 = load i32* %y.addr, align 4
  store i32 %6, i32* %x.addr.i2, align 4
  store i32 %7, i32* %y.addr.i3, align 4
  %8 = load i32* %x.addr.i2, align 4
  %9 = load i32* %x.addr.i2, align 4
  %10 = load i32* %y.addr.i3, align 4
  %xor.i = xor i32 %9, %10
  %11 = load i32* %x.addr.i2, align 4
  %12 = load i32* %y.addr.i3, align 4
  %cmp.i4 = icmp slt i32 %11, %12
  %conv.i = zext i1 %cmp.i4 to i32
  %sub.i = sub nsw i32 0, %conv.i
  %and.i = and i32 %xor.i, %sub.i
  %xor1.i = xor i32 %8, %and.i
  %cmp = icmp eq i32 %cond.i, %xor1.i
  ret i1 %cmp
}

; Function Attrs: alwaysinline nounwind uwtable
define i32 @_Z14set_or_clear_1bjj(i1 zeroext %f, i32 %m, i32 %w) #0 {
entry:
  %f.addr = alloca i8, align 1
  %m.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %frombool = zext i1 %f to i8
  store i8 %frombool, i8* %f.addr, align 1
  store i32 %m, i32* %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i8* %f.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32* %w.addr, align 4
  %2 = load i32* %m.addr, align 4
  %or = or i32 %1, %2
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32* %w.addr, align 4
  %4 = load i32* %m.addr, align 4
  %neg = xor i32 %4, -1
  %and = and i32 %3, %neg
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %or, %cond.true ], [ %and, %cond.false ]
  ret i32 %cond
}

; Function Attrs: alwaysinline nounwind uwtable
define i32 @_Z14set_or_clear_2bjj(i1 zeroext %f, i32 %m, i32 %w) #0 {
entry:
  %f.addr = alloca i8, align 1
  %m.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %frombool = zext i1 %f to i8
  store i8 %frombool, i8* %f.addr, align 1
  store i32 %m, i32* %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32* %w.addr, align 4
  %1 = load i8* %f.addr, align 1
  %tobool = trunc i8 %1 to i1
  %conv = zext i1 %tobool to i32
  %sub = sub nsw i32 0, %conv
  %2 = load i32* %w.addr, align 4
  %xor = xor i32 %sub, %2
  %3 = load i32* %m.addr, align 4
  %and = and i32 %xor, %3
  %xor1 = xor i32 %0, %and
  ret i32 %xor1
}

; Function Attrs: alwaysinline nounwind uwtable
define i32 @_Z14set_or_clear_3bjj(i1 zeroext %f, i32 %m, i32 %w) #0 {
entry:
  %f.addr = alloca i8, align 1
  %m.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %frombool = zext i1 %f to i8
  store i8 %frombool, i8* %f.addr, align 1
  store i32 %m, i32* %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32* %w.addr, align 4
  %1 = load i32* %m.addr, align 4
  %neg = xor i32 %1, -1
  %and = and i32 %0, %neg
  %2 = load i8* %f.addr, align 1
  %tobool = trunc i8 %2 to i1
  %conv = zext i1 %tobool to i32
  %sub = sub nsw i32 0, %conv
  %3 = load i32* %m.addr, align 4
  %and1 = and i32 %sub, %3
  %or = or i32 %and, %and1
  ret i32 %or
}

; Function Attrs: nounwind uwtable
define zeroext i1 @_Z22CHECK_set_or_clear_1_2bjj(i1 zeroext %f, i32 %m, i32 %w) #1 {
entry:
  %f.addr.i3 = alloca i8, align 1
  %m.addr.i4 = alloca i32, align 4
  %w.addr.i5 = alloca i32, align 4
  %f.addr.i = alloca i8, align 1
  %m.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %f.addr = alloca i8, align 1
  %m.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %frombool = zext i1 %f to i8
  store i8 %frombool, i8* %f.addr, align 1
  store i32 %m, i32* %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i8* %f.addr, align 1
  %tobool = trunc i8 %0 to i1
  %1 = load i32* %m.addr, align 4
  %2 = load i32* %w.addr, align 4
  %frombool.i = zext i1 %tobool to i8
  store i8 %frombool.i, i8* %f.addr.i, align 1
  store i32 %1, i32* %m.addr.i, align 4
  store i32 %2, i32* %w.addr.i, align 4
  %3 = load i8* %f.addr.i, align 1
  %tobool.i = trunc i8 %3 to i1
  br i1 %tobool.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %entry
  %4 = load i32* %w.addr.i, align 4
  %5 = load i32* %m.addr.i, align 4
  %or.i = or i32 %4, %5
  br label %_Z14set_or_clear_1bjj.exit

cond.false.i:                                     ; preds = %entry
  %6 = load i32* %w.addr.i, align 4
  %7 = load i32* %m.addr.i, align 4
  %neg.i = xor i32 %7, -1
  %and.i = and i32 %6, %neg.i
  br label %_Z14set_or_clear_1bjj.exit

_Z14set_or_clear_1bjj.exit:                       ; preds = %cond.true.i, %cond.false.i
  %cond.i = phi i32 [ %or.i, %cond.true.i ], [ %and.i, %cond.false.i ]
  %8 = load i8* %f.addr, align 1
  %tobool1 = trunc i8 %8 to i1
  %9 = load i32* %m.addr, align 4
  %10 = load i32* %w.addr, align 4
  %frombool.i6 = zext i1 %tobool1 to i8
  store i8 %frombool.i6, i8* %f.addr.i3, align 1
  store i32 %9, i32* %m.addr.i4, align 4
  store i32 %10, i32* %w.addr.i5, align 4
  %11 = load i32* %w.addr.i5, align 4
  %12 = load i8* %f.addr.i3, align 1
  %tobool.i7 = trunc i8 %12 to i1
  %conv.i = zext i1 %tobool.i7 to i32
  %sub.i = sub nsw i32 0, %conv.i
  %13 = load i32* %w.addr.i5, align 4
  %xor.i = xor i32 %sub.i, %13
  %14 = load i32* %m.addr.i4, align 4
  %and.i8 = and i32 %xor.i, %14
  %xor1.i = xor i32 %11, %and.i8
  %cmp = icmp eq i32 %cond.i, %xor1.i
  ret i1 %cmp
}

; Function Attrs: nounwind uwtable
define zeroext i1 @_Z22CHECK_set_or_clear_1_3bjj(i1 zeroext %f, i32 %m, i32 %w) #1 {
entry:
  %f.addr.i3 = alloca i8, align 1
  %m.addr.i4 = alloca i32, align 4
  %w.addr.i5 = alloca i32, align 4
  %f.addr.i = alloca i8, align 1
  %m.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %f.addr = alloca i8, align 1
  %m.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %frombool = zext i1 %f to i8
  store i8 %frombool, i8* %f.addr, align 1
  store i32 %m, i32* %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i8* %f.addr, align 1
  %tobool = trunc i8 %0 to i1
  %1 = load i32* %m.addr, align 4
  %2 = load i32* %w.addr, align 4
  %frombool.i = zext i1 %tobool to i8
  store i8 %frombool.i, i8* %f.addr.i, align 1
  store i32 %1, i32* %m.addr.i, align 4
  store i32 %2, i32* %w.addr.i, align 4
  %3 = load i8* %f.addr.i, align 1
  %tobool.i = trunc i8 %3 to i1
  br i1 %tobool.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %entry
  %4 = load i32* %w.addr.i, align 4
  %5 = load i32* %m.addr.i, align 4
  %or.i = or i32 %4, %5
  br label %_Z14set_or_clear_1bjj.exit

cond.false.i:                                     ; preds = %entry
  %6 = load i32* %w.addr.i, align 4
  %7 = load i32* %m.addr.i, align 4
  %neg.i = xor i32 %7, -1
  %and.i = and i32 %6, %neg.i
  br label %_Z14set_or_clear_1bjj.exit

_Z14set_or_clear_1bjj.exit:                       ; preds = %cond.true.i, %cond.false.i
  %cond.i = phi i32 [ %or.i, %cond.true.i ], [ %and.i, %cond.false.i ]
  %8 = load i8* %f.addr, align 1
  %tobool1 = trunc i8 %8 to i1
  %9 = load i32* %m.addr, align 4
  %10 = load i32* %w.addr, align 4
  %frombool.i6 = zext i1 %tobool1 to i8
  store i8 %frombool.i6, i8* %f.addr.i3, align 1
  store i32 %9, i32* %m.addr.i4, align 4
  store i32 %10, i32* %w.addr.i5, align 4
  %11 = load i32* %w.addr.i5, align 4
  %12 = load i32* %m.addr.i4, align 4
  %neg.i7 = xor i32 %12, -1
  %and.i8 = and i32 %11, %neg.i7
  %13 = load i8* %f.addr.i3, align 1
  %tobool.i9 = trunc i8 %13 to i1
  %conv.i = zext i1 %tobool.i9 to i32
  %sub.i = sub nsw i32 0, %conv.i
  %14 = load i32* %m.addr.i4, align 4
  %and1.i = and i32 %sub.i, %14
  %or.i10 = or i32 %and.i8, %and1.i
  %cmp = icmp eq i32 %cond.i, %or.i10
  ret i1 %cmp
}

; Function Attrs: nounwind uwtable
define zeroext i1 @_Z22CHECK_set_or_clear_2_3bjj(i1 zeroext %f, i32 %m, i32 %w) #1 {
entry:
  %f.addr.i3 = alloca i8, align 1
  %m.addr.i4 = alloca i32, align 4
  %w.addr.i5 = alloca i32, align 4
  %f.addr.i = alloca i8, align 1
  %m.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %f.addr = alloca i8, align 1
  %m.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %frombool = zext i1 %f to i8
  store i8 %frombool, i8* %f.addr, align 1
  store i32 %m, i32* %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i8* %f.addr, align 1
  %tobool = trunc i8 %0 to i1
  %1 = load i32* %m.addr, align 4
  %2 = load i32* %w.addr, align 4
  %frombool.i = zext i1 %tobool to i8
  store i8 %frombool.i, i8* %f.addr.i, align 1
  store i32 %1, i32* %m.addr.i, align 4
  store i32 %2, i32* %w.addr.i, align 4
  %3 = load i32* %w.addr.i, align 4
  %4 = load i8* %f.addr.i, align 1
  %tobool.i = trunc i8 %4 to i1
  %conv.i = zext i1 %tobool.i to i32
  %sub.i = sub nsw i32 0, %conv.i
  %5 = load i32* %w.addr.i, align 4
  %xor.i = xor i32 %sub.i, %5
  %6 = load i32* %m.addr.i, align 4
  %and.i = and i32 %xor.i, %6
  %xor1.i = xor i32 %3, %and.i
  %7 = load i8* %f.addr, align 1
  %tobool1 = trunc i8 %7 to i1
  %8 = load i32* %m.addr, align 4
  %9 = load i32* %w.addr, align 4
  %frombool.i6 = zext i1 %tobool1 to i8
  store i8 %frombool.i6, i8* %f.addr.i3, align 1
  store i32 %8, i32* %m.addr.i4, align 4
  store i32 %9, i32* %w.addr.i5, align 4
  %10 = load i32* %w.addr.i5, align 4
  %11 = load i32* %m.addr.i4, align 4
  %neg.i = xor i32 %11, -1
  %and.i7 = and i32 %10, %neg.i
  %12 = load i8* %f.addr.i3, align 1
  %tobool.i8 = trunc i8 %12 to i1
  %conv.i9 = zext i1 %tobool.i8 to i32
  %sub.i10 = sub nsw i32 0, %conv.i9
  %13 = load i32* %m.addr.i4, align 4
  %and1.i = and i32 %sub.i10, %13
  %or.i = or i32 %and.i7, %and1.i
  %cmp = icmp eq i32 %xor1.i, %or.i
  ret i1 %cmp
}

; Function Attrs: alwaysinline nounwind uwtable
define i32 @_Z16count_bits_set_1j(i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 0, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %conv = zext i32 %0 to i64
  %cmp = icmp ne i64 %conv, 32
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32* %v.addr, align 4
  %2 = load i32* %i, align 4
  %shl = shl i32 1, %2
  %and = and i32 %1, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32* %c, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %4 = load i32* %i, align 4
  %inc1 = add i32 %4, 1
  store i32 %inc1, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i32* %c, align 4
  ret i32 %5
}

; Function Attrs: alwaysinline nounwind uwtable
define i32 @_Z16count_bits_set_5j(i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32* %v.addr, align 4
  %1 = load i32* %v.addr, align 4
  %shr = lshr i32 %1, 1
  %and = and i32 %shr, 1431655765
  %sub = sub i32 %0, %and
  store i32 %sub, i32* %c, align 4
  %2 = load i32* %c, align 4
  %shr1 = lshr i32 %2, 2
  %and2 = and i32 %shr1, 858993459
  %3 = load i32* %c, align 4
  %and3 = and i32 %3, 858993459
  %add = add i32 %and2, %and3
  store i32 %add, i32* %c, align 4
  %4 = load i32* %c, align 4
  %shr4 = lshr i32 %4, 4
  %5 = load i32* %c, align 4
  %add5 = add i32 %shr4, %5
  %and6 = and i32 %add5, 252645135
  store i32 %and6, i32* %c, align 4
  %6 = load i32* %c, align 4
  %shr7 = lshr i32 %6, 8
  %7 = load i32* %c, align 4
  %add8 = add i32 %shr7, %7
  %and9 = and i32 %add8, 16711935
  store i32 %and9, i32* %c, align 4
  %8 = load i32* %c, align 4
  %shr10 = lshr i32 %8, 16
  %9 = load i32* %c, align 4
  %add11 = add i32 %shr10, %9
  %and12 = and i32 %add11, 65535
  store i32 %and12, i32* %c, align 4
  %10 = load i32* %c, align 4
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define zeroext i1 @_Z24CHECK_count_bits_set_1_5j(i32 %u) #1 {
entry:
  %v.addr.i2 = alloca i32, align 4
  %c.i3 = alloca i32, align 4
  %v.addr.i = alloca i32, align 4
  %c.i = alloca i32, align 4
  %i.i = alloca i32, align 4
  %u.addr = alloca i32, align 4
  store i32 %u, i32* %u.addr, align 4
  %0 = load i32* %u.addr, align 4
  store i32 %0, i32* %v.addr.i, align 4
  store i32 0, i32* %c.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.end.i, %entry
  %1 = load i32* %i.i, align 4
  %conv.i = zext i32 %1 to i64
  %cmp.i = icmp ne i64 %conv.i, 32
  br i1 %cmp.i, label %for.body.i, label %_Z16count_bits_set_1j.exit

for.body.i:                                       ; preds = %for.cond.i
  %2 = load i32* %v.addr.i, align 4
  %3 = load i32* %i.i, align 4
  %shl.i = shl i32 1, %3
  %and.i = and i32 %2, %shl.i
  %tobool.i = icmp ne i32 %and.i, 0
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %for.body.i
  %4 = load i32* %c.i, align 4
  %inc.i = add i32 %4, 1
  store i32 %inc.i, i32* %c.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %for.body.i
  %5 = load i32* %i.i, align 4
  %inc1.i = add i32 %5, 1
  store i32 %inc1.i, i32* %i.i, align 4
  br label %for.cond.i

_Z16count_bits_set_1j.exit:                       ; preds = %for.cond.i
  %6 = load i32* %c.i, align 4
  %7 = load i32* %u.addr, align 4
  store i32 %7, i32* %v.addr.i2, align 4
  %8 = load i32* %v.addr.i2, align 4
  %9 = load i32* %v.addr.i2, align 4
  %shr.i = lshr i32 %9, 1
  %and.i4 = and i32 %shr.i, 1431655765
  %sub.i = sub i32 %8, %and.i4
  store i32 %sub.i, i32* %c.i3, align 4
  %10 = load i32* %c.i3, align 4
  %shr1.i = lshr i32 %10, 2
  %and2.i = and i32 %shr1.i, 858993459
  %11 = load i32* %c.i3, align 4
  %and3.i = and i32 %11, 858993459
  %add.i = add i32 %and2.i, %and3.i
  store i32 %add.i, i32* %c.i3, align 4
  %12 = load i32* %c.i3, align 4
  %shr4.i = lshr i32 %12, 4
  %13 = load i32* %c.i3, align 4
  %add5.i = add i32 %shr4.i, %13
  %and6.i = and i32 %add5.i, 252645135
  store i32 %and6.i, i32* %c.i3, align 4
  %14 = load i32* %c.i3, align 4
  %shr7.i = lshr i32 %14, 8
  %15 = load i32* %c.i3, align 4
  %add8.i = add i32 %shr7.i, %15
  %and9.i = and i32 %add8.i, 16711935
  store i32 %and9.i, i32* %c.i3, align 4
  %16 = load i32* %c.i3, align 4
  %shr10.i = lshr i32 %16, 16
  %17 = load i32* %c.i3, align 4
  %add11.i = add i32 %shr10.i, %17
  %and12.i = and i32 %add11.i, 65535
  store i32 %and12.i, i32* %c.i3, align 4
  %18 = load i32* %c.i3, align 4
  %cmp = icmp eq i32 %6, %18
  ret i1 %cmp
}

; Function Attrs: alwaysinline nounwind uwtable
define zeroext i1 @_Z8parity_1j(i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 0, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %conv = zext i32 %0 to i64
  %cmp = icmp ne i64 %conv, 32
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32* %v.addr, align 4
  %2 = load i32* %i, align 4
  %shl = shl i32 1, %2
  %and = and i32 %1, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32* %c, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %4 = load i32* %i, align 4
  %inc1 = add i32 %4, 1
  store i32 %inc1, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i32* %c, align 4
  %and2 = and i32 %5, 1
  %tobool3 = icmp ne i32 %and2, 0
  ret i1 %tobool3
}

; Function Attrs: alwaysinline nounwind uwtable
define zeroext i1 @_Z8parity_3j(i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32* %v.addr, align 4
  %shr = lshr i32 %0, 1
  %1 = load i32* %v.addr, align 4
  %xor = xor i32 %1, %shr
  store i32 %xor, i32* %v.addr, align 4
  %2 = load i32* %v.addr, align 4
  %shr1 = lshr i32 %2, 2
  %3 = load i32* %v.addr, align 4
  %xor2 = xor i32 %3, %shr1
  store i32 %xor2, i32* %v.addr, align 4
  %4 = load i32* %v.addr, align 4
  %and = and i32 %4, 286331153
  %mul = mul i32 %and, 286331153
  store i32 %mul, i32* %v.addr, align 4
  %5 = load i32* %v.addr, align 4
  %shr3 = lshr i32 %5, 28
  %and4 = and i32 %shr3, 1
  %tobool = icmp ne i32 %and4, 0
  ret i1 %tobool
}

; Function Attrs: alwaysinline nounwind uwtable
define zeroext i1 @_Z8parity_4j(i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32* %v.addr, align 4
  %shr = lshr i32 %0, 16
  %1 = load i32* %v.addr, align 4
  %xor = xor i32 %1, %shr
  store i32 %xor, i32* %v.addr, align 4
  %2 = load i32* %v.addr, align 4
  %shr1 = lshr i32 %2, 8
  %3 = load i32* %v.addr, align 4
  %xor2 = xor i32 %3, %shr1
  store i32 %xor2, i32* %v.addr, align 4
  %4 = load i32* %v.addr, align 4
  %shr3 = lshr i32 %4, 4
  %5 = load i32* %v.addr, align 4
  %xor4 = xor i32 %5, %shr3
  store i32 %xor4, i32* %v.addr, align 4
  %6 = load i32* %v.addr, align 4
  %and = and i32 %6, 15
  store i32 %and, i32* %v.addr, align 4
  %7 = load i32* %v.addr, align 4
  %shr5 = ashr i32 27030, %7
  %and6 = and i32 %shr5, 1
  %tobool = icmp ne i32 %and6, 0
  ret i1 %tobool
}

; Function Attrs: nounwind uwtable
define zeroext i1 @_Z16CHECK_parity_1_3j(i32 %v) #1 {
entry:
  %v.addr.i3 = alloca i32, align 4
  %v.addr.i = alloca i32, align 4
  %c.i = alloca i32, align 4
  %i.i = alloca i32, align 4
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32* %v.addr, align 4
  store i32 %0, i32* %v.addr.i, align 4
  store i32 0, i32* %c.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.end.i, %entry
  %1 = load i32* %i.i, align 4
  %conv.i = zext i32 %1 to i64
  %cmp.i = icmp ne i64 %conv.i, 32
  br i1 %cmp.i, label %for.body.i, label %_Z8parity_1j.exit

for.body.i:                                       ; preds = %for.cond.i
  %2 = load i32* %v.addr.i, align 4
  %3 = load i32* %i.i, align 4
  %shl.i = shl i32 1, %3
  %and.i = and i32 %2, %shl.i
  %tobool.i = icmp ne i32 %and.i, 0
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %for.body.i
  %4 = load i32* %c.i, align 4
  %inc.i = add i32 %4, 1
  store i32 %inc.i, i32* %c.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %for.body.i
  %5 = load i32* %i.i, align 4
  %inc1.i = add i32 %5, 1
  store i32 %inc1.i, i32* %i.i, align 4
  br label %for.cond.i

_Z8parity_1j.exit:                                ; preds = %for.cond.i
  %6 = load i32* %c.i, align 4
  %and2.i = and i32 %6, 1
  %tobool3.i = icmp ne i32 %and2.i, 0
  %conv = zext i1 %tobool3.i to i32
  %7 = load i32* %v.addr, align 4
  store i32 %7, i32* %v.addr.i3, align 4
  %8 = load i32* %v.addr.i3, align 4
  %shr.i = lshr i32 %8, 1
  %9 = load i32* %v.addr.i3, align 4
  %xor.i = xor i32 %9, %shr.i
  store i32 %xor.i, i32* %v.addr.i3, align 4
  %10 = load i32* %v.addr.i3, align 4
  %shr1.i = lshr i32 %10, 2
  %11 = load i32* %v.addr.i3, align 4
  %xor2.i = xor i32 %11, %shr1.i
  store i32 %xor2.i, i32* %v.addr.i3, align 4
  %12 = load i32* %v.addr.i3, align 4
  %and.i4 = and i32 %12, 286331153
  %mul.i = mul i32 %and.i4, 286331153
  store i32 %mul.i, i32* %v.addr.i3, align 4
  %13 = load i32* %v.addr.i3, align 4
  %shr3.i = lshr i32 %13, 28
  %and4.i = and i32 %shr3.i, 1
  %tobool.i5 = icmp ne i32 %and4.i, 0
  %conv2 = zext i1 %tobool.i5 to i32
  %cmp = icmp eq i32 %conv, %conv2
  ret i1 %cmp
}

; Function Attrs: nounwind uwtable
define zeroext i1 @_Z16CHECK_parity_1_4j(i32 %v) #1 {
entry:
  %v.addr.i3 = alloca i32, align 4
  %v.addr.i = alloca i32, align 4
  %c.i = alloca i32, align 4
  %i.i = alloca i32, align 4
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32* %v.addr, align 4
  store i32 %0, i32* %v.addr.i, align 4
  store i32 0, i32* %c.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.end.i, %entry
  %1 = load i32* %i.i, align 4
  %conv.i = zext i32 %1 to i64
  %cmp.i = icmp ne i64 %conv.i, 32
  br i1 %cmp.i, label %for.body.i, label %_Z8parity_1j.exit

for.body.i:                                       ; preds = %for.cond.i
  %2 = load i32* %v.addr.i, align 4
  %3 = load i32* %i.i, align 4
  %shl.i = shl i32 1, %3
  %and.i = and i32 %2, %shl.i
  %tobool.i = icmp ne i32 %and.i, 0
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %for.body.i
  %4 = load i32* %c.i, align 4
  %inc.i = add i32 %4, 1
  store i32 %inc.i, i32* %c.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %for.body.i
  %5 = load i32* %i.i, align 4
  %inc1.i = add i32 %5, 1
  store i32 %inc1.i, i32* %i.i, align 4
  br label %for.cond.i

_Z8parity_1j.exit:                                ; preds = %for.cond.i
  %6 = load i32* %c.i, align 4
  %and2.i = and i32 %6, 1
  %tobool3.i = icmp ne i32 %and2.i, 0
  %conv = zext i1 %tobool3.i to i32
  %7 = load i32* %v.addr, align 4
  store i32 %7, i32* %v.addr.i3, align 4
  %8 = load i32* %v.addr.i3, align 4
  %shr.i = lshr i32 %8, 16
  %9 = load i32* %v.addr.i3, align 4
  %xor.i = xor i32 %9, %shr.i
  store i32 %xor.i, i32* %v.addr.i3, align 4
  %10 = load i32* %v.addr.i3, align 4
  %shr1.i = lshr i32 %10, 8
  %11 = load i32* %v.addr.i3, align 4
  %xor2.i = xor i32 %11, %shr1.i
  store i32 %xor2.i, i32* %v.addr.i3, align 4
  %12 = load i32* %v.addr.i3, align 4
  %shr3.i = lshr i32 %12, 4
  %13 = load i32* %v.addr.i3, align 4
  %xor4.i = xor i32 %13, %shr3.i
  store i32 %xor4.i, i32* %v.addr.i3, align 4
  %14 = load i32* %v.addr.i3, align 4
  %and.i4 = and i32 %14, 15
  store i32 %and.i4, i32* %v.addr.i3, align 4
  %15 = load i32* %v.addr.i3, align 4
  %shr5.i = ashr i32 27030, %15
  %and6.i = and i32 %shr5.i, 1
  %tobool.i5 = icmp ne i32 %and6.i, 0
  %conv2 = zext i1 %tobool.i5 to i32
  %cmp = icmp eq i32 %conv, %conv2
  ret i1 %cmp
}

; Function Attrs: nounwind uwtable
define zeroext i1 @_Z16CHECK_parity_3_4j(i32 %v) #1 {
entry:
  %v.addr.i3 = alloca i32, align 4
  %v.addr.i = alloca i32, align 4
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32* %v.addr, align 4
  store i32 %0, i32* %v.addr.i, align 4
  %1 = load i32* %v.addr.i, align 4
  %shr.i = lshr i32 %1, 1
  %2 = load i32* %v.addr.i, align 4
  %xor.i = xor i32 %2, %shr.i
  store i32 %xor.i, i32* %v.addr.i, align 4
  %3 = load i32* %v.addr.i, align 4
  %shr1.i = lshr i32 %3, 2
  %4 = load i32* %v.addr.i, align 4
  %xor2.i = xor i32 %4, %shr1.i
  store i32 %xor2.i, i32* %v.addr.i, align 4
  %5 = load i32* %v.addr.i, align 4
  %and.i = and i32 %5, 286331153
  %mul.i = mul i32 %and.i, 286331153
  store i32 %mul.i, i32* %v.addr.i, align 4
  %6 = load i32* %v.addr.i, align 4
  %shr3.i = lshr i32 %6, 28
  %and4.i = and i32 %shr3.i, 1
  %tobool.i = icmp ne i32 %and4.i, 0
  %conv = zext i1 %tobool.i to i32
  %7 = load i32* %v.addr, align 4
  store i32 %7, i32* %v.addr.i3, align 4
  %8 = load i32* %v.addr.i3, align 4
  %shr.i4 = lshr i32 %8, 16
  %9 = load i32* %v.addr.i3, align 4
  %xor.i5 = xor i32 %9, %shr.i4
  store i32 %xor.i5, i32* %v.addr.i3, align 4
  %10 = load i32* %v.addr.i3, align 4
  %shr1.i6 = lshr i32 %10, 8
  %11 = load i32* %v.addr.i3, align 4
  %xor2.i7 = xor i32 %11, %shr1.i6
  store i32 %xor2.i7, i32* %v.addr.i3, align 4
  %12 = load i32* %v.addr.i3, align 4
  %shr3.i8 = lshr i32 %12, 4
  %13 = load i32* %v.addr.i3, align 4
  %xor4.i = xor i32 %13, %shr3.i8
  store i32 %xor4.i, i32* %v.addr.i3, align 4
  %14 = load i32* %v.addr.i3, align 4
  %and.i9 = and i32 %14, 15
  store i32 %and.i9, i32* %v.addr.i3, align 4
  %15 = load i32* %v.addr.i3, align 4
  %shr5.i = ashr i32 27030, %15
  %and6.i = and i32 %shr5.i, 1
  %tobool.i10 = icmp ne i32 %and6.i, 0
  %conv2 = zext i1 %tobool.i10 to i32
  %cmp = icmp eq i32 %conv, %conv2
  ret i1 %cmp
}

; Function Attrs: alwaysinline nounwind uwtable
define i64 @_Z6swap_11P(i64 %v.coerce) #0 {
entry:
  %retval = alloca %struct.P, align 4
  %v = alloca %struct.P, align 8
  %temp = alloca i32, align 4
  %0 = bitcast %struct.P* %v to i64*
  store i64 %v.coerce, i64* %0, align 1
  %a = getelementptr inbounds %struct.P* %v, i32 0, i32 0
  %1 = load i32* %a, align 4
  store i32 %1, i32* %temp, align 4
  %b = getelementptr inbounds %struct.P* %v, i32 0, i32 1
  %2 = load i32* %b, align 4
  %a1 = getelementptr inbounds %struct.P* %v, i32 0, i32 0
  store i32 %2, i32* %a1, align 4
  %3 = load i32* %temp, align 4
  %b2 = getelementptr inbounds %struct.P* %v, i32 0, i32 1
  store i32 %3, i32* %b2, align 4
  %4 = bitcast %struct.P* %retval to i8*
  %5 = bitcast %struct.P* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 8, i32 4, i1 false)
  %6 = bitcast %struct.P* %retval to i64*
  %7 = load i64* %6, align 1
  ret i64 %7
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: alwaysinline nounwind uwtable
define i64 @_Z6swap_21P(i64 %v.coerce) #0 {
entry:
  %retval = alloca %struct.P, align 4
  %v = alloca %struct.P, align 8
  %0 = bitcast %struct.P* %v to i64*
  store i64 %v.coerce, i64* %0, align 1
  %b = getelementptr inbounds %struct.P* %v, i32 0, i32 1
  %1 = load i32* %b, align 4
  %a = getelementptr inbounds %struct.P* %v, i32 0, i32 0
  %2 = load i32* %a, align 4
  %sub = sub nsw i32 %2, %1
  store i32 %sub, i32* %a, align 4
  %a1 = getelementptr inbounds %struct.P* %v, i32 0, i32 0
  %3 = load i32* %a1, align 4
  %b2 = getelementptr inbounds %struct.P* %v, i32 0, i32 1
  %4 = load i32* %b2, align 4
  %add = add nsw i32 %4, %3
  store i32 %add, i32* %b2, align 4
  %b3 = getelementptr inbounds %struct.P* %v, i32 0, i32 1
  %5 = load i32* %b3, align 4
  %a4 = getelementptr inbounds %struct.P* %v, i32 0, i32 0
  %6 = load i32* %a4, align 4
  %sub5 = sub nsw i32 %5, %6
  %a6 = getelementptr inbounds %struct.P* %v, i32 0, i32 0
  store i32 %sub5, i32* %a6, align 4
  %7 = bitcast %struct.P* %retval to i8*
  %8 = bitcast %struct.P* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 8, i32 4, i1 false)
  %9 = bitcast %struct.P* %retval to i64*
  %10 = load i64* %9, align 1
  ret i64 %10
}

; Function Attrs: alwaysinline nounwind uwtable
define i64 @_Z6swap_31P(i64 %v.coerce) #0 {
entry:
  %retval = alloca %struct.P, align 4
  %v = alloca %struct.P, align 8
  %0 = bitcast %struct.P* %v to i64*
  store i64 %v.coerce, i64* %0, align 1
  %b = getelementptr inbounds %struct.P* %v, i32 0, i32 1
  %1 = load i32* %b, align 4
  %a = getelementptr inbounds %struct.P* %v, i32 0, i32 0
  %2 = load i32* %a, align 4
  %xor = xor i32 %2, %1
  store i32 %xor, i32* %a, align 4
  %a1 = getelementptr inbounds %struct.P* %v, i32 0, i32 0
  %3 = load i32* %a1, align 4
  %b2 = getelementptr inbounds %struct.P* %v, i32 0, i32 1
  %4 = load i32* %b2, align 4
  %xor3 = xor i32 %4, %3
  store i32 %xor3, i32* %b2, align 4
  %b4 = getelementptr inbounds %struct.P* %v, i32 0, i32 1
  %5 = load i32* %b4, align 4
  %a5 = getelementptr inbounds %struct.P* %v, i32 0, i32 0
  %6 = load i32* %a5, align 4
  %xor6 = xor i32 %6, %5
  store i32 %xor6, i32* %a5, align 4
  %7 = bitcast %struct.P* %retval to i8*
  %8 = bitcast %struct.P* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 8, i32 4, i1 false)
  %9 = bitcast %struct.P* %retval to i64*
  %10 = load i64* %9, align 1
  ret i64 %10
}

; Function Attrs: uwtable
define zeroext i1 @_Z14CHECK_swap_1_21P(i64 %v.coerce) #3 {
entry:
  %retval.i4 = alloca %struct.P, align 4
  %v.i5 = alloca %struct.P, align 8
  %retval.i = alloca %struct.P, align 4
  %v.i = alloca %struct.P, align 8
  %temp.i = alloca i32, align 4
  %v = alloca %struct.P, align 8
  %agg.tmp = alloca %struct.P, align 4
  %coerce = alloca %struct.P, align 4
  %ref.tmp = alloca %struct.P, align 4
  %agg.tmp1 = alloca %struct.P, align 4
  %0 = bitcast %struct.P* %v to i64*
  store i64 %v.coerce, i64* %0, align 1
  %1 = bitcast %struct.P* %agg.tmp to i8*
  %2 = bitcast %struct.P* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %2, i64 8, i32 4, i1 false)
  %3 = bitcast %struct.P* %agg.tmp to i64*
  %4 = load i64* %3, align 1
  %5 = bitcast %struct.P* %v.i to i64*
  store i64 %4, i64* %5, align 1
  %a.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 0
  %6 = load i32* %a.i, align 4
  store i32 %6, i32* %temp.i, align 4
  %b.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 1
  %7 = load i32* %b.i, align 4
  %a1.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 0
  store i32 %7, i32* %a1.i, align 4
  %8 = load i32* %temp.i, align 4
  %b2.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 1
  store i32 %8, i32* %b2.i, align 4
  %9 = bitcast %struct.P* %retval.i to i8*
  %10 = bitcast %struct.P* %v.i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 4, i1 false) #2
  %11 = bitcast %struct.P* %retval.i to i64*
  %12 = load i64* %11, align 1
  %13 = bitcast %struct.P* %coerce to i64*
  store i64 %12, i64* %13, align 1
  %14 = bitcast %struct.P* %agg.tmp1 to i8*
  %15 = bitcast %struct.P* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 4, i1 false)
  %16 = bitcast %struct.P* %agg.tmp1 to i64*
  %17 = load i64* %16, align 1
  %18 = bitcast %struct.P* %v.i5 to i64*
  store i64 %17, i64* %18, align 1
  %b.i6 = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 1
  %19 = load i32* %b.i6, align 4
  %a.i7 = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 0
  %20 = load i32* %a.i7, align 4
  %sub.i = sub nsw i32 %20, %19
  store i32 %sub.i, i32* %a.i7, align 4
  %a1.i8 = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 0
  %21 = load i32* %a1.i8, align 4
  %b2.i9 = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 1
  %22 = load i32* %b2.i9, align 4
  %add.i = add nsw i32 %22, %21
  store i32 %add.i, i32* %b2.i9, align 4
  %b3.i = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 1
  %23 = load i32* %b3.i, align 4
  %a4.i = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 0
  %24 = load i32* %a4.i, align 4
  %sub5.i = sub nsw i32 %23, %24
  %a6.i = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 0
  store i32 %sub5.i, i32* %a6.i, align 4
  %25 = bitcast %struct.P* %retval.i4 to i8*
  %26 = bitcast %struct.P* %v.i5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 8, i32 4, i1 false) #2
  %27 = bitcast %struct.P* %retval.i4 to i64*
  %28 = load i64* %27, align 1
  %29 = bitcast %struct.P* %ref.tmp to i64*
  store i64 %28, i64* %29, align 1
  %call3 = call zeroext i1 @_ZNK1PeqERKS_(%struct.P* %coerce, %struct.P* %ref.tmp)
  ret i1 %call3
}

; Function Attrs: nounwind uwtable
define linkonce_odr zeroext i1 @_ZNK1PeqERKS_(%struct.P* %this, %struct.P* %r) #1 align 2 {
entry:
  %this.addr = alloca %struct.P*, align 8
  %r.addr = alloca %struct.P*, align 8
  store %struct.P* %this, %struct.P** %this.addr, align 8
  store %struct.P* %r, %struct.P** %r.addr, align 8
  %this1 = load %struct.P** %this.addr
  %0 = load %struct.P** %r.addr, align 8
  %a = getelementptr inbounds %struct.P* %0, i32 0, i32 0
  %1 = load i32* %a, align 4
  %a2 = getelementptr inbounds %struct.P* %this1, i32 0, i32 0
  %2 = load i32* %a2, align 4
  %cmp = icmp eq i32 %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load %struct.P** %r.addr, align 8
  %b = getelementptr inbounds %struct.P* %3, i32 0, i32 1
  %4 = load i32* %b, align 4
  %b3 = getelementptr inbounds %struct.P* %this1, i32 0, i32 1
  %5 = load i32* %b3, align 4
  %cmp4 = icmp eq i32 %4, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp4, %land.rhs ]
  ret i1 %6
}

; Function Attrs: uwtable
define zeroext i1 @_Z14CHECK_swap_1_31P(i64 %v.coerce) #3 {
entry:
  %retval.i4 = alloca %struct.P, align 4
  %v.i5 = alloca %struct.P, align 8
  %retval.i = alloca %struct.P, align 4
  %v.i = alloca %struct.P, align 8
  %temp.i = alloca i32, align 4
  %v = alloca %struct.P, align 8
  %agg.tmp = alloca %struct.P, align 4
  %coerce = alloca %struct.P, align 4
  %ref.tmp = alloca %struct.P, align 4
  %agg.tmp1 = alloca %struct.P, align 4
  %0 = bitcast %struct.P* %v to i64*
  store i64 %v.coerce, i64* %0, align 1
  %1 = bitcast %struct.P* %agg.tmp to i8*
  %2 = bitcast %struct.P* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %2, i64 8, i32 4, i1 false)
  %3 = bitcast %struct.P* %agg.tmp to i64*
  %4 = load i64* %3, align 1
  %5 = bitcast %struct.P* %v.i to i64*
  store i64 %4, i64* %5, align 1
  %a.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 0
  %6 = load i32* %a.i, align 4
  store i32 %6, i32* %temp.i, align 4
  %b.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 1
  %7 = load i32* %b.i, align 4
  %a1.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 0
  store i32 %7, i32* %a1.i, align 4
  %8 = load i32* %temp.i, align 4
  %b2.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 1
  store i32 %8, i32* %b2.i, align 4
  %9 = bitcast %struct.P* %retval.i to i8*
  %10 = bitcast %struct.P* %v.i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 4, i1 false) #2
  %11 = bitcast %struct.P* %retval.i to i64*
  %12 = load i64* %11, align 1
  %13 = bitcast %struct.P* %coerce to i64*
  store i64 %12, i64* %13, align 1
  %14 = bitcast %struct.P* %agg.tmp1 to i8*
  %15 = bitcast %struct.P* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 4, i1 false)
  %16 = bitcast %struct.P* %agg.tmp1 to i64*
  %17 = load i64* %16, align 1
  %18 = bitcast %struct.P* %v.i5 to i64*
  store i64 %17, i64* %18, align 1
  %b.i6 = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 1
  %19 = load i32* %b.i6, align 4
  %a.i7 = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 0
  %20 = load i32* %a.i7, align 4
  %xor.i = xor i32 %20, %19
  store i32 %xor.i, i32* %a.i7, align 4
  %a1.i8 = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 0
  %21 = load i32* %a1.i8, align 4
  %b2.i9 = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 1
  %22 = load i32* %b2.i9, align 4
  %xor3.i = xor i32 %22, %21
  store i32 %xor3.i, i32* %b2.i9, align 4
  %b4.i = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 1
  %23 = load i32* %b4.i, align 4
  %a5.i = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 0
  %24 = load i32* %a5.i, align 4
  %xor6.i = xor i32 %24, %23
  store i32 %xor6.i, i32* %a5.i, align 4
  %25 = bitcast %struct.P* %retval.i4 to i8*
  %26 = bitcast %struct.P* %v.i5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 8, i32 4, i1 false) #2
  %27 = bitcast %struct.P* %retval.i4 to i64*
  %28 = load i64* %27, align 1
  %29 = bitcast %struct.P* %ref.tmp to i64*
  store i64 %28, i64* %29, align 1
  %call3 = call zeroext i1 @_ZNK1PeqERKS_(%struct.P* %coerce, %struct.P* %ref.tmp)
  ret i1 %call3
}

; Function Attrs: uwtable
define zeroext i1 @_Z14CHECK_swap_2_31P(i64 %v.coerce) #3 {
entry:
  %retval.i4 = alloca %struct.P, align 4
  %v.i5 = alloca %struct.P, align 8
  %retval.i = alloca %struct.P, align 4
  %v.i = alloca %struct.P, align 8
  %v = alloca %struct.P, align 8
  %agg.tmp = alloca %struct.P, align 4
  %coerce = alloca %struct.P, align 4
  %ref.tmp = alloca %struct.P, align 4
  %agg.tmp1 = alloca %struct.P, align 4
  %0 = bitcast %struct.P* %v to i64*
  store i64 %v.coerce, i64* %0, align 1
  %1 = bitcast %struct.P* %agg.tmp to i8*
  %2 = bitcast %struct.P* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %2, i64 8, i32 4, i1 false)
  %3 = bitcast %struct.P* %agg.tmp to i64*
  %4 = load i64* %3, align 1
  %5 = bitcast %struct.P* %v.i to i64*
  store i64 %4, i64* %5, align 1
  %b.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 1
  %6 = load i32* %b.i, align 4
  %a.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 0
  %7 = load i32* %a.i, align 4
  %sub.i = sub nsw i32 %7, %6
  store i32 %sub.i, i32* %a.i, align 4
  %a1.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 0
  %8 = load i32* %a1.i, align 4
  %b2.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 1
  %9 = load i32* %b2.i, align 4
  %add.i = add nsw i32 %9, %8
  store i32 %add.i, i32* %b2.i, align 4
  %b3.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 1
  %10 = load i32* %b3.i, align 4
  %a4.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 0
  %11 = load i32* %a4.i, align 4
  %sub5.i = sub nsw i32 %10, %11
  %a6.i = getelementptr inbounds %struct.P* %v.i, i32 0, i32 0
  store i32 %sub5.i, i32* %a6.i, align 4
  %12 = bitcast %struct.P* %retval.i to i8*
  %13 = bitcast %struct.P* %v.i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 8, i32 4, i1 false) #2
  %14 = bitcast %struct.P* %retval.i to i64*
  %15 = load i64* %14, align 1
  %16 = bitcast %struct.P* %coerce to i64*
  store i64 %15, i64* %16, align 1
  %17 = bitcast %struct.P* %agg.tmp1 to i8*
  %18 = bitcast %struct.P* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 8, i32 4, i1 false)
  %19 = bitcast %struct.P* %agg.tmp1 to i64*
  %20 = load i64* %19, align 1
  %21 = bitcast %struct.P* %v.i5 to i64*
  store i64 %20, i64* %21, align 1
  %b.i6 = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 1
  %22 = load i32* %b.i6, align 4
  %a.i7 = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 0
  %23 = load i32* %a.i7, align 4
  %xor.i = xor i32 %23, %22
  store i32 %xor.i, i32* %a.i7, align 4
  %a1.i8 = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 0
  %24 = load i32* %a1.i8, align 4
  %b2.i9 = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 1
  %25 = load i32* %b2.i9, align 4
  %xor3.i = xor i32 %25, %24
  store i32 %xor3.i, i32* %b2.i9, align 4
  %b4.i = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 1
  %26 = load i32* %b4.i, align 4
  %a5.i = getelementptr inbounds %struct.P* %v.i5, i32 0, i32 0
  %27 = load i32* %a5.i, align 4
  %xor6.i = xor i32 %27, %26
  store i32 %xor6.i, i32* %a5.i, align 4
  %28 = bitcast %struct.P* %retval.i4 to i8*
  %29 = bitcast %struct.P* %v.i5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 8, i32 4, i1 false) #2
  %30 = bitcast %struct.P* %retval.i4 to i64*
  %31 = load i64* %30, align 1
  %32 = bitcast %struct.P* %ref.tmp to i64*
  store i64 %31, i64* %32, align 1
  %call3 = call zeroext i1 @_ZNK1PeqERKS_(%struct.P* %coerce, %struct.P* %ref.tmp)
  ret i1 %call3
}

; Function Attrs: alwaysinline nounwind uwtable
define zeroext i8 @_Z9reverse_1h(i8 zeroext %v) #0 {
entry:
  %v.addr = alloca i8, align 1
  %r = alloca i8, align 1
  %i = alloca i32, align 4
  store i8 %v, i8* %v.addr, align 1
  store i8 0, i8* %r, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %conv = zext i32 %0 to i64
  %cmp = icmp ne i64 %conv, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8* %v.addr, align 1
  %conv1 = zext i8 %1 to i32
  %2 = load i32* %i, align 4
  %shr = ashr i32 %conv1, %2
  %3 = load i32* %i, align 4
  %conv2 = zext i32 %3 to i64
  %sub = sub i64 8, %conv2
  %sub3 = sub i64 %sub, 1
  %sh_prom = trunc i64 %sub3 to i32
  %shl = shl i32 %shr, %sh_prom
  %4 = load i8* %r, align 1
  %conv4 = zext i8 %4 to i32
  %or = or i32 %conv4, %shl
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %r, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32* %i, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i8* %r, align 1
  ret i8 %6
}

; Function Attrs: alwaysinline nounwind uwtable
define zeroext i8 @_Z9reverse_3h(i8 zeroext %v) #0 {
entry:
  %v.addr = alloca i8, align 1
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8* %v.addr, align 1
  %conv = zext i8 %0 to i64
  %mul = mul i64 %conv, 2149582850
  %and = and i64 %mul, 36578664720
  %mul1 = mul i64 %and, 4311810305
  %shr = lshr i64 %mul1, 32
  %conv2 = trunc i64 %shr to i8
  ret i8 %conv2
}

; Function Attrs: alwaysinline nounwind uwtable
define zeroext i8 @_Z9reverse_4h(i8 zeroext %v) #0 {
entry:
  %v.addr = alloca i8, align 1
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8* %v.addr, align 1
  %conv = zext i8 %0 to i64
  %mul = mul i64 %conv, 2050
  %and = and i64 %mul, 139536
  %1 = load i8* %v.addr, align 1
  %conv1 = zext i8 %1 to i64
  %mul2 = mul i64 %conv1, 32800
  %and3 = and i64 %mul2, 558144
  %or = or i64 %and, %and3
  %mul4 = mul i64 %or, 65793
  %shr = lshr i64 %mul4, 16
  %conv5 = trunc i64 %shr to i8
  ret i8 %conv5
}

; Function Attrs: nounwind uwtable
define zeroext i1 @_Z17CHECK_reverse_1_3h(i8 zeroext %v) #1 {
entry:
  %v.addr.i3 = alloca i8, align 1
  %v.addr.i = alloca i8, align 1
  %r.i = alloca i8, align 1
  %i.i = alloca i32, align 4
  %v.addr = alloca i8, align 1
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8* %v.addr, align 1
  store i8 %0, i8* %v.addr.i, align 1
  store i8 0, i8* %r.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %entry
  %1 = load i32* %i.i, align 4
  %conv.i = zext i32 %1 to i64
  %cmp.i = icmp ne i64 %conv.i, 8
  br i1 %cmp.i, label %for.body.i, label %_Z9reverse_1h.exit

for.body.i:                                       ; preds = %for.cond.i
  %2 = load i8* %v.addr.i, align 1
  %conv1.i = zext i8 %2 to i32
  %3 = load i32* %i.i, align 4
  %shr.i = ashr i32 %conv1.i, %3
  %4 = load i32* %i.i, align 4
  %conv2.i = zext i32 %4 to i64
  %sub.i = sub i64 8, %conv2.i
  %sub3.i = sub i64 %sub.i, 1
  %sh_prom.i = trunc i64 %sub3.i to i32
  %shl.i = shl i32 %shr.i, %sh_prom.i
  %5 = load i8* %r.i, align 1
  %conv4.i = zext i8 %5 to i32
  %or.i = or i32 %conv4.i, %shl.i
  %conv5.i = trunc i32 %or.i to i8
  store i8 %conv5.i, i8* %r.i, align 1
  %6 = load i32* %i.i, align 4
  %inc.i = add i32 %6, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

_Z9reverse_1h.exit:                               ; preds = %for.cond.i
  %7 = load i8* %r.i, align 1
  %conv = zext i8 %7 to i32
  %8 = load i8* %v.addr, align 1
  store i8 %8, i8* %v.addr.i3, align 1
  %9 = load i8* %v.addr.i3, align 1
  %conv.i4 = zext i8 %9 to i64
  %mul.i = mul i64 %conv.i4, 2149582850
  %and.i = and i64 %mul.i, 36578664720
  %mul1.i = mul i64 %and.i, 4311810305
  %shr.i5 = lshr i64 %mul1.i, 32
  %conv2.i6 = trunc i64 %shr.i5 to i8
  %conv2 = zext i8 %conv2.i6 to i32
  %cmp = icmp eq i32 %conv, %conv2
  ret i1 %cmp
}

; Function Attrs: nounwind uwtable
define zeroext i1 @_Z17CHECK_reverse_1_4h(i8 zeroext %v) #1 {
entry:
  %v.addr.i3 = alloca i8, align 1
  %v.addr.i = alloca i8, align 1
  %r.i = alloca i8, align 1
  %i.i = alloca i32, align 4
  %v.addr = alloca i8, align 1
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8* %v.addr, align 1
  store i8 %0, i8* %v.addr.i, align 1
  store i8 0, i8* %r.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %entry
  %1 = load i32* %i.i, align 4
  %conv.i = zext i32 %1 to i64
  %cmp.i = icmp ne i64 %conv.i, 8
  br i1 %cmp.i, label %for.body.i, label %_Z9reverse_1h.exit

for.body.i:                                       ; preds = %for.cond.i
  %2 = load i8* %v.addr.i, align 1
  %conv1.i = zext i8 %2 to i32
  %3 = load i32* %i.i, align 4
  %shr.i = ashr i32 %conv1.i, %3
  %4 = load i32* %i.i, align 4
  %conv2.i = zext i32 %4 to i64
  %sub.i = sub i64 8, %conv2.i
  %sub3.i = sub i64 %sub.i, 1
  %sh_prom.i = trunc i64 %sub3.i to i32
  %shl.i = shl i32 %shr.i, %sh_prom.i
  %5 = load i8* %r.i, align 1
  %conv4.i = zext i8 %5 to i32
  %or.i = or i32 %conv4.i, %shl.i
  %conv5.i = trunc i32 %or.i to i8
  store i8 %conv5.i, i8* %r.i, align 1
  %6 = load i32* %i.i, align 4
  %inc.i = add i32 %6, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

_Z9reverse_1h.exit:                               ; preds = %for.cond.i
  %7 = load i8* %r.i, align 1
  %conv = zext i8 %7 to i32
  %8 = load i8* %v.addr, align 1
  store i8 %8, i8* %v.addr.i3, align 1
  %9 = load i8* %v.addr.i3, align 1
  %conv.i4 = zext i8 %9 to i64
  %mul.i = mul i64 %conv.i4, 2050
  %and.i = and i64 %mul.i, 139536
  %10 = load i8* %v.addr.i3, align 1
  %conv1.i5 = zext i8 %10 to i64
  %mul2.i = mul i64 %conv1.i5, 32800
  %and3.i = and i64 %mul2.i, 558144
  %or.i6 = or i64 %and.i, %and3.i
  %mul4.i = mul i64 %or.i6, 65793
  %shr.i7 = lshr i64 %mul4.i, 16
  %conv5.i8 = trunc i64 %shr.i7 to i8
  %conv2 = zext i8 %conv5.i8 to i32
  %cmp = icmp eq i32 %conv, %conv2
  ret i1 %cmp
}

; Function Attrs: nounwind uwtable
define zeroext i1 @_Z17CHECK_reverse_3_4h(i8 zeroext %v) #1 {
entry:
  %v.addr.i3 = alloca i8, align 1
  %v.addr.i = alloca i8, align 1
  %v.addr = alloca i8, align 1
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8* %v.addr, align 1
  store i8 %0, i8* %v.addr.i, align 1
  %1 = load i8* %v.addr.i, align 1
  %conv.i = zext i8 %1 to i64
  %mul.i = mul i64 %conv.i, 2149582850
  %and.i = and i64 %mul.i, 36578664720
  %mul1.i = mul i64 %and.i, 4311810305
  %shr.i = lshr i64 %mul1.i, 32
  %conv2.i = trunc i64 %shr.i to i8
  %conv = zext i8 %conv2.i to i32
  %2 = load i8* %v.addr, align 1
  store i8 %2, i8* %v.addr.i3, align 1
  %3 = load i8* %v.addr.i3, align 1
  %conv.i4 = zext i8 %3 to i64
  %mul.i5 = mul i64 %conv.i4, 2050
  %and.i6 = and i64 %mul.i5, 139536
  %4 = load i8* %v.addr.i3, align 1
  %conv1.i = zext i8 %4 to i64
  %mul2.i = mul i64 %conv1.i, 32800
  %and3.i = and i64 %mul2.i, 558144
  %or.i = or i64 %and.i6, %and3.i
  %mul4.i = mul i64 %or.i, 65793
  %shr.i7 = lshr i64 %mul4.i, 16
  %conv5.i = trunc i64 %shr.i7 to i8
  %conv2 = zext i8 %conv5.i to i32
  %cmp = icmp eq i32 %conv, %conv2
  ret i1 %cmp
}

attributes #0 = { alwaysinline nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
