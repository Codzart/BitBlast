; ModuleID = 'input.cpp.bitblast'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define <32 x i1> @boolean__Z5min_1ii(<64 x i1>) {
entry:
  %in0 = extractelement <64 x i1> %0, i32 0
  %in1 = extractelement <64 x i1> %0, i32 1
  %in2 = extractelement <64 x i1> %0, i32 2
  %in3 = extractelement <64 x i1> %0, i32 3
  %in4 = extractelement <64 x i1> %0, i32 4
  %in5 = extractelement <64 x i1> %0, i32 5
  %in6 = extractelement <64 x i1> %0, i32 6
  %in7 = extractelement <64 x i1> %0, i32 7
  %in8 = extractelement <64 x i1> %0, i32 8
  %in9 = extractelement <64 x i1> %0, i32 9
  %in10 = extractelement <64 x i1> %0, i32 10
  %in11 = extractelement <64 x i1> %0, i32 11
  %in12 = extractelement <64 x i1> %0, i32 12
  %in13 = extractelement <64 x i1> %0, i32 13
  %in14 = extractelement <64 x i1> %0, i32 14
  %in15 = extractelement <64 x i1> %0, i32 15
  %in16 = extractelement <64 x i1> %0, i32 16
  %in17 = extractelement <64 x i1> %0, i32 17
  %in18 = extractelement <64 x i1> %0, i32 18
  %in19 = extractelement <64 x i1> %0, i32 19
  %in20 = extractelement <64 x i1> %0, i32 20
  %in21 = extractelement <64 x i1> %0, i32 21
  %in22 = extractelement <64 x i1> %0, i32 22
  %in23 = extractelement <64 x i1> %0, i32 23
  %in24 = extractelement <64 x i1> %0, i32 24
  %in25 = extractelement <64 x i1> %0, i32 25
  %in26 = extractelement <64 x i1> %0, i32 26
  %in27 = extractelement <64 x i1> %0, i32 27
  %in28 = extractelement <64 x i1> %0, i32 28
  %in29 = extractelement <64 x i1> %0, i32 29
  %in30 = extractelement <64 x i1> %0, i32 30
  %in31 = extractelement <64 x i1> %0, i32 31
  %in32 = extractelement <64 x i1> %0, i32 32
  %in33 = extractelement <64 x i1> %0, i32 33
  %in34 = extractelement <64 x i1> %0, i32 34
  %in35 = extractelement <64 x i1> %0, i32 35
  %in36 = extractelement <64 x i1> %0, i32 36
  %in37 = extractelement <64 x i1> %0, i32 37
  %in38 = extractelement <64 x i1> %0, i32 38
  %in39 = extractelement <64 x i1> %0, i32 39
  %in40 = extractelement <64 x i1> %0, i32 40
  %in41 = extractelement <64 x i1> %0, i32 41
  %in42 = extractelement <64 x i1> %0, i32 42
  %in43 = extractelement <64 x i1> %0, i32 43
  %in44 = extractelement <64 x i1> %0, i32 44
  %in45 = extractelement <64 x i1> %0, i32 45
  %in46 = extractelement <64 x i1> %0, i32 46
  %in47 = extractelement <64 x i1> %0, i32 47
  %in48 = extractelement <64 x i1> %0, i32 48
  %in49 = extractelement <64 x i1> %0, i32 49
  %in50 = extractelement <64 x i1> %0, i32 50
  %in51 = extractelement <64 x i1> %0, i32 51
  %in52 = extractelement <64 x i1> %0, i32 52
  %in53 = extractelement <64 x i1> %0, i32 53
  %in54 = extractelement <64 x i1> %0, i32 54
  %in55 = extractelement <64 x i1> %0, i32 55
  %in56 = extractelement <64 x i1> %0, i32 56
  %in57 = extractelement <64 x i1> %0, i32 57
  %in58 = extractelement <64 x i1> %0, i32 58
  %in59 = extractelement <64 x i1> %0, i32 59
  %in60 = extractelement <64 x i1> %0, i32 60
  %in61 = extractelement <64 x i1> %0, i32 61
  %in62 = extractelement <64 x i1> %0, i32 62
  %in63 = extractelement <64 x i1> %0, i32 63
  %1 = xor i1 %in0, true
  %2 = and i1 %1, %in32
  %3 = xor i1 %2, true
  %4 = and i1 %3, %in32
  %5 = and i1 %3, %in33
  %6 = and i1 %2, %in1
  %7 = or i1 %6, %5
  %8 = and i1 %3, %in34
  %9 = and i1 %2, %in2
  %10 = or i1 %9, %8
  %11 = and i1 %3, %in35
  %12 = and i1 %2, %in3
  %13 = or i1 %12, %11
  %14 = and i1 %3, %in36
  %15 = and i1 %2, %in4
  %16 = or i1 %15, %14
  %17 = and i1 %3, %in37
  %18 = and i1 %2, %in5
  %19 = or i1 %18, %17
  %20 = and i1 %3, %in38
  %21 = and i1 %2, %in6
  %22 = or i1 %21, %20
  %23 = and i1 %3, %in39
  %24 = and i1 %2, %in7
  %25 = or i1 %24, %23
  %26 = and i1 %3, %in40
  %27 = and i1 %2, %in8
  %28 = or i1 %27, %26
  %29 = and i1 %3, %in41
  %30 = and i1 %2, %in9
  %31 = or i1 %30, %29
  %32 = and i1 %3, %in42
  %33 = and i1 %2, %in10
  %34 = or i1 %33, %32
  %35 = and i1 %3, %in43
  %36 = and i1 %2, %in11
  %37 = or i1 %36, %35
  %38 = and i1 %3, %in44
  %39 = and i1 %2, %in12
  %40 = or i1 %39, %38
  %41 = and i1 %3, %in45
  %42 = and i1 %2, %in13
  %43 = or i1 %42, %41
  %44 = and i1 %3, %in46
  %45 = and i1 %2, %in14
  %46 = or i1 %45, %44
  %47 = and i1 %3, %in47
  %48 = and i1 %2, %in15
  %49 = or i1 %48, %47
  %50 = and i1 %3, %in48
  %51 = and i1 %2, %in16
  %52 = or i1 %51, %50
  %53 = and i1 %3, %in49
  %54 = and i1 %2, %in17
  %55 = or i1 %54, %53
  %56 = and i1 %3, %in50
  %57 = and i1 %2, %in18
  %58 = or i1 %57, %56
  %59 = and i1 %3, %in51
  %60 = and i1 %2, %in19
  %61 = or i1 %60, %59
  %62 = and i1 %3, %in52
  %63 = and i1 %2, %in20
  %64 = or i1 %63, %62
  %65 = and i1 %3, %in53
  %66 = and i1 %2, %in21
  %67 = or i1 %66, %65
  %68 = and i1 %3, %in54
  %69 = and i1 %2, %in22
  %70 = or i1 %69, %68
  %71 = and i1 %3, %in55
  %72 = and i1 %2, %in23
  %73 = or i1 %72, %71
  %74 = and i1 %3, %in56
  %75 = and i1 %2, %in24
  %76 = or i1 %75, %74
  %77 = and i1 %3, %in57
  %78 = and i1 %2, %in25
  %79 = or i1 %78, %77
  %80 = and i1 %3, %in58
  %81 = and i1 %2, %in26
  %82 = or i1 %81, %80
  %83 = and i1 %3, %in59
  %84 = and i1 %2, %in27
  %85 = or i1 %84, %83
  %86 = and i1 %3, %in60
  %87 = and i1 %2, %in28
  %88 = or i1 %87, %86
  %89 = and i1 %3, %in61
  %90 = and i1 %2, %in29
  %91 = or i1 %90, %89
  %92 = and i1 %3, %in62
  %93 = and i1 %2, %in30
  %94 = or i1 %93, %92
  %95 = and i1 %3, %in63
  %96 = and i1 %2, %in31
  %97 = or i1 %96, %95
  %out0 = insertelement <32 x i1> undef, i1 %4, i32 0
  %out1 = insertelement <32 x i1> %out0, i1 %7, i32 1
  %out2 = insertelement <32 x i1> %out1, i1 %10, i32 2
  %out3 = insertelement <32 x i1> %out2, i1 %13, i32 3
  %out4 = insertelement <32 x i1> %out3, i1 %16, i32 4
  %out5 = insertelement <32 x i1> %out4, i1 %19, i32 5
  %out6 = insertelement <32 x i1> %out5, i1 %22, i32 6
  %out7 = insertelement <32 x i1> %out6, i1 %25, i32 7
  %out8 = insertelement <32 x i1> %out7, i1 %28, i32 8
  %out9 = insertelement <32 x i1> %out8, i1 %31, i32 9
  %out10 = insertelement <32 x i1> %out9, i1 %34, i32 10
  %out11 = insertelement <32 x i1> %out10, i1 %37, i32 11
  %out12 = insertelement <32 x i1> %out11, i1 %40, i32 12
  %out13 = insertelement <32 x i1> %out12, i1 %43, i32 13
  %out14 = insertelement <32 x i1> %out13, i1 %46, i32 14
  %out15 = insertelement <32 x i1> %out14, i1 %49, i32 15
  %out16 = insertelement <32 x i1> %out15, i1 %52, i32 16
  %out17 = insertelement <32 x i1> %out16, i1 %55, i32 17
  %out18 = insertelement <32 x i1> %out17, i1 %58, i32 18
  %out19 = insertelement <32 x i1> %out18, i1 %61, i32 19
  %out20 = insertelement <32 x i1> %out19, i1 %64, i32 20
  %out21 = insertelement <32 x i1> %out20, i1 %67, i32 21
  %out22 = insertelement <32 x i1> %out21, i1 %70, i32 22
  %out23 = insertelement <32 x i1> %out22, i1 %73, i32 23
  %out24 = insertelement <32 x i1> %out23, i1 %76, i32 24
  %out25 = insertelement <32 x i1> %out24, i1 %79, i32 25
  %out26 = insertelement <32 x i1> %out25, i1 %82, i32 26
  %out27 = insertelement <32 x i1> %out26, i1 %85, i32 27
  %out28 = insertelement <32 x i1> %out27, i1 %88, i32 28
  %out29 = insertelement <32 x i1> %out28, i1 %91, i32 29
  %out30 = insertelement <32 x i1> %out29, i1 %94, i32 30
  %out31 = insertelement <32 x i1> %out30, i1 %97, i32 31
  ret <32 x i1> %out31
}

define <32 x i1> @boolean__Z5min_2ii(<64 x i1>) {
entry:
  %in0 = extractelement <64 x i1> %0, i32 0
  %in1 = extractelement <64 x i1> %0, i32 1
  %in2 = extractelement <64 x i1> %0, i32 2
  %in3 = extractelement <64 x i1> %0, i32 3
  %in4 = extractelement <64 x i1> %0, i32 4
  %in5 = extractelement <64 x i1> %0, i32 5
  %in6 = extractelement <64 x i1> %0, i32 6
  %in7 = extractelement <64 x i1> %0, i32 7
  %in8 = extractelement <64 x i1> %0, i32 8
  %in9 = extractelement <64 x i1> %0, i32 9
  %in10 = extractelement <64 x i1> %0, i32 10
  %in11 = extractelement <64 x i1> %0, i32 11
  %in12 = extractelement <64 x i1> %0, i32 12
  %in13 = extractelement <64 x i1> %0, i32 13
  %in14 = extractelement <64 x i1> %0, i32 14
  %in15 = extractelement <64 x i1> %0, i32 15
  %in16 = extractelement <64 x i1> %0, i32 16
  %in17 = extractelement <64 x i1> %0, i32 17
  %in18 = extractelement <64 x i1> %0, i32 18
  %in19 = extractelement <64 x i1> %0, i32 19
  %in20 = extractelement <64 x i1> %0, i32 20
  %in21 = extractelement <64 x i1> %0, i32 21
  %in22 = extractelement <64 x i1> %0, i32 22
  %in23 = extractelement <64 x i1> %0, i32 23
  %in24 = extractelement <64 x i1> %0, i32 24
  %in25 = extractelement <64 x i1> %0, i32 25
  %in26 = extractelement <64 x i1> %0, i32 26
  %in27 = extractelement <64 x i1> %0, i32 27
  %in28 = extractelement <64 x i1> %0, i32 28
  %in29 = extractelement <64 x i1> %0, i32 29
  %in30 = extractelement <64 x i1> %0, i32 30
  %in31 = extractelement <64 x i1> %0, i32 31
  %in32 = extractelement <64 x i1> %0, i32 32
  %in33 = extractelement <64 x i1> %0, i32 33
  %in34 = extractelement <64 x i1> %0, i32 34
  %in35 = extractelement <64 x i1> %0, i32 35
  %in36 = extractelement <64 x i1> %0, i32 36
  %in37 = extractelement <64 x i1> %0, i32 37
  %in38 = extractelement <64 x i1> %0, i32 38
  %in39 = extractelement <64 x i1> %0, i32 39
  %in40 = extractelement <64 x i1> %0, i32 40
  %in41 = extractelement <64 x i1> %0, i32 41
  %in42 = extractelement <64 x i1> %0, i32 42
  %in43 = extractelement <64 x i1> %0, i32 43
  %in44 = extractelement <64 x i1> %0, i32 44
  %in45 = extractelement <64 x i1> %0, i32 45
  %in46 = extractelement <64 x i1> %0, i32 46
  %in47 = extractelement <64 x i1> %0, i32 47
  %in48 = extractelement <64 x i1> %0, i32 48
  %in49 = extractelement <64 x i1> %0, i32 49
  %in50 = extractelement <64 x i1> %0, i32 50
  %in51 = extractelement <64 x i1> %0, i32 51
  %in52 = extractelement <64 x i1> %0, i32 52
  %in53 = extractelement <64 x i1> %0, i32 53
  %in54 = extractelement <64 x i1> %0, i32 54
  %in55 = extractelement <64 x i1> %0, i32 55
  %in56 = extractelement <64 x i1> %0, i32 56
  %in57 = extractelement <64 x i1> %0, i32 57
  %in58 = extractelement <64 x i1> %0, i32 58
  %in59 = extractelement <64 x i1> %0, i32 59
  %in60 = extractelement <64 x i1> %0, i32 60
  %in61 = extractelement <64 x i1> %0, i32 61
  %in62 = extractelement <64 x i1> %0, i32 62
  %in63 = extractelement <64 x i1> %0, i32 63
  %1 = and i1 %in32, %in0
  %2 = xor i1 %1, true
  %3 = or i1 %in32, %in0
  %4 = and i1 %3, %2
  %5 = and i1 %in33, %in1
  %6 = xor i1 %5, true
  %7 = or i1 %in33, %in1
  %8 = and i1 %7, %6
  %9 = and i1 %in34, %in2
  %10 = xor i1 %9, true
  %11 = or i1 %in34, %in2
  %12 = and i1 %11, %10
  %13 = and i1 %in35, %in3
  %14 = xor i1 %13, true
  %15 = or i1 %in35, %in3
  %16 = and i1 %15, %14
  %17 = and i1 %in36, %in4
  %18 = xor i1 %17, true
  %19 = or i1 %in36, %in4
  %20 = and i1 %19, %18
  %21 = and i1 %in37, %in5
  %22 = xor i1 %21, true
  %23 = or i1 %in37, %in5
  %24 = and i1 %23, %22
  %25 = and i1 %in38, %in6
  %26 = xor i1 %25, true
  %27 = or i1 %in38, %in6
  %28 = and i1 %27, %26
  %29 = and i1 %in39, %in7
  %30 = xor i1 %29, true
  %31 = or i1 %in39, %in7
  %32 = and i1 %31, %30
  %33 = and i1 %in40, %in8
  %34 = xor i1 %33, true
  %35 = or i1 %in40, %in8
  %36 = and i1 %35, %34
  %37 = and i1 %in41, %in9
  %38 = xor i1 %37, true
  %39 = or i1 %in41, %in9
  %40 = and i1 %39, %38
  %41 = and i1 %in42, %in10
  %42 = xor i1 %41, true
  %43 = or i1 %in42, %in10
  %44 = and i1 %43, %42
  %45 = and i1 %in43, %in11
  %46 = xor i1 %45, true
  %47 = or i1 %in43, %in11
  %48 = and i1 %47, %46
  %49 = and i1 %in44, %in12
  %50 = xor i1 %49, true
  %51 = or i1 %in44, %in12
  %52 = and i1 %51, %50
  %53 = and i1 %in45, %in13
  %54 = xor i1 %53, true
  %55 = or i1 %in45, %in13
  %56 = and i1 %55, %54
  %57 = and i1 %in46, %in14
  %58 = xor i1 %57, true
  %59 = or i1 %in46, %in14
  %60 = and i1 %59, %58
  %61 = and i1 %in47, %in15
  %62 = xor i1 %61, true
  %63 = or i1 %in47, %in15
  %64 = and i1 %63, %62
  %65 = and i1 %in48, %in16
  %66 = xor i1 %65, true
  %67 = or i1 %in48, %in16
  %68 = and i1 %67, %66
  %69 = and i1 %in49, %in17
  %70 = xor i1 %69, true
  %71 = or i1 %in49, %in17
  %72 = and i1 %71, %70
  %73 = and i1 %in50, %in18
  %74 = xor i1 %73, true
  %75 = or i1 %in50, %in18
  %76 = and i1 %75, %74
  %77 = and i1 %in51, %in19
  %78 = xor i1 %77, true
  %79 = or i1 %in51, %in19
  %80 = and i1 %79, %78
  %81 = and i1 %in52, %in20
  %82 = xor i1 %81, true
  %83 = or i1 %in52, %in20
  %84 = and i1 %83, %82
  %85 = and i1 %in53, %in21
  %86 = xor i1 %85, true
  %87 = or i1 %in53, %in21
  %88 = and i1 %87, %86
  %89 = and i1 %in54, %in22
  %90 = xor i1 %89, true
  %91 = or i1 %in54, %in22
  %92 = and i1 %91, %90
  %93 = and i1 %in55, %in23
  %94 = xor i1 %93, true
  %95 = or i1 %in55, %in23
  %96 = and i1 %95, %94
  %97 = and i1 %in56, %in24
  %98 = xor i1 %97, true
  %99 = or i1 %in56, %in24
  %100 = and i1 %99, %98
  %101 = and i1 %in57, %in25
  %102 = xor i1 %101, true
  %103 = or i1 %in57, %in25
  %104 = and i1 %103, %102
  %105 = and i1 %in58, %in26
  %106 = xor i1 %105, true
  %107 = or i1 %in58, %in26
  %108 = and i1 %107, %106
  %109 = and i1 %in59, %in27
  %110 = xor i1 %109, true
  %111 = or i1 %in59, %in27
  %112 = and i1 %111, %110
  %113 = and i1 %in60, %in28
  %114 = xor i1 %113, true
  %115 = or i1 %in60, %in28
  %116 = and i1 %115, %114
  %117 = and i1 %in61, %in29
  %118 = xor i1 %117, true
  %119 = or i1 %in61, %in29
  %120 = and i1 %119, %118
  %121 = and i1 %in62, %in30
  %122 = xor i1 %121, true
  %123 = or i1 %in62, %in30
  %124 = and i1 %123, %122
  %125 = and i1 %in63, %in31
  %126 = xor i1 %125, true
  %127 = or i1 %in63, %in31
  %128 = and i1 %127, %126
  %129 = xor i1 %in0, true
  %130 = and i1 %129, %in32
  %131 = and i1 %130, %4
  %132 = and i1 %130, %8
  %133 = and i1 %130, %12
  %134 = and i1 %130, %16
  %135 = and i1 %130, %20
  %136 = and i1 %130, %24
  %137 = and i1 %130, %28
  %138 = and i1 %130, %32
  %139 = and i1 %130, %36
  %140 = and i1 %130, %40
  %141 = and i1 %130, %44
  %142 = and i1 %130, %48
  %143 = and i1 %130, %52
  %144 = and i1 %130, %56
  %145 = and i1 %130, %60
  %146 = and i1 %130, %64
  %147 = and i1 %130, %68
  %148 = and i1 %130, %72
  %149 = and i1 %130, %76
  %150 = and i1 %130, %80
  %151 = and i1 %130, %84
  %152 = and i1 %130, %88
  %153 = and i1 %130, %92
  %154 = and i1 %130, %96
  %155 = and i1 %130, %100
  %156 = and i1 %130, %104
  %157 = and i1 %130, %108
  %158 = and i1 %130, %112
  %159 = and i1 %130, %116
  %160 = and i1 %130, %120
  %161 = and i1 %130, %124
  %162 = and i1 %130, %128
  %163 = xor i1 %131, true
  %164 = and i1 %in32, %163
  %165 = and i1 %132, %in33
  %166 = xor i1 %165, true
  %167 = or i1 %132, %in33
  %168 = and i1 %167, %166
  %169 = and i1 %133, %in34
  %170 = xor i1 %169, true
  %171 = or i1 %133, %in34
  %172 = and i1 %171, %170
  %173 = and i1 %134, %in35
  %174 = xor i1 %173, true
  %175 = or i1 %134, %in35
  %176 = and i1 %175, %174
  %177 = and i1 %135, %in36
  %178 = xor i1 %177, true
  %179 = or i1 %135, %in36
  %180 = and i1 %179, %178
  %181 = and i1 %136, %in37
  %182 = xor i1 %181, true
  %183 = or i1 %136, %in37
  %184 = and i1 %183, %182
  %185 = and i1 %137, %in38
  %186 = xor i1 %185, true
  %187 = or i1 %137, %in38
  %188 = and i1 %187, %186
  %189 = and i1 %138, %in39
  %190 = xor i1 %189, true
  %191 = or i1 %138, %in39
  %192 = and i1 %191, %190
  %193 = and i1 %139, %in40
  %194 = xor i1 %193, true
  %195 = or i1 %139, %in40
  %196 = and i1 %195, %194
  %197 = and i1 %140, %in41
  %198 = xor i1 %197, true
  %199 = or i1 %140, %in41
  %200 = and i1 %199, %198
  %201 = and i1 %141, %in42
  %202 = xor i1 %201, true
  %203 = or i1 %141, %in42
  %204 = and i1 %203, %202
  %205 = and i1 %142, %in43
  %206 = xor i1 %205, true
  %207 = or i1 %142, %in43
  %208 = and i1 %207, %206
  %209 = and i1 %143, %in44
  %210 = xor i1 %209, true
  %211 = or i1 %143, %in44
  %212 = and i1 %211, %210
  %213 = and i1 %144, %in45
  %214 = xor i1 %213, true
  %215 = or i1 %144, %in45
  %216 = and i1 %215, %214
  %217 = and i1 %145, %in46
  %218 = xor i1 %217, true
  %219 = or i1 %145, %in46
  %220 = and i1 %219, %218
  %221 = and i1 %146, %in47
  %222 = xor i1 %221, true
  %223 = or i1 %146, %in47
  %224 = and i1 %223, %222
  %225 = and i1 %147, %in48
  %226 = xor i1 %225, true
  %227 = or i1 %147, %in48
  %228 = and i1 %227, %226
  %229 = and i1 %148, %in49
  %230 = xor i1 %229, true
  %231 = or i1 %148, %in49
  %232 = and i1 %231, %230
  %233 = and i1 %149, %in50
  %234 = xor i1 %233, true
  %235 = or i1 %149, %in50
  %236 = and i1 %235, %234
  %237 = and i1 %150, %in51
  %238 = xor i1 %237, true
  %239 = or i1 %150, %in51
  %240 = and i1 %239, %238
  %241 = and i1 %151, %in52
  %242 = xor i1 %241, true
  %243 = or i1 %151, %in52
  %244 = and i1 %243, %242
  %245 = and i1 %152, %in53
  %246 = xor i1 %245, true
  %247 = or i1 %152, %in53
  %248 = and i1 %247, %246
  %249 = and i1 %153, %in54
  %250 = xor i1 %249, true
  %251 = or i1 %153, %in54
  %252 = and i1 %251, %250
  %253 = and i1 %154, %in55
  %254 = xor i1 %253, true
  %255 = or i1 %154, %in55
  %256 = and i1 %255, %254
  %257 = and i1 %155, %in56
  %258 = xor i1 %257, true
  %259 = or i1 %155, %in56
  %260 = and i1 %259, %258
  %261 = and i1 %156, %in57
  %262 = xor i1 %261, true
  %263 = or i1 %156, %in57
  %264 = and i1 %263, %262
  %265 = and i1 %157, %in58
  %266 = xor i1 %265, true
  %267 = or i1 %157, %in58
  %268 = and i1 %267, %266
  %269 = and i1 %158, %in59
  %270 = xor i1 %269, true
  %271 = or i1 %158, %in59
  %272 = and i1 %271, %270
  %273 = and i1 %159, %in60
  %274 = xor i1 %273, true
  %275 = or i1 %159, %in60
  %276 = and i1 %275, %274
  %277 = and i1 %160, %in61
  %278 = xor i1 %277, true
  %279 = or i1 %160, %in61
  %280 = and i1 %279, %278
  %281 = and i1 %161, %in62
  %282 = xor i1 %281, true
  %283 = or i1 %161, %in62
  %284 = and i1 %283, %282
  %285 = and i1 %162, %in63
  %286 = xor i1 %285, true
  %287 = or i1 %162, %in63
  %288 = and i1 %287, %286
  %out0 = insertelement <32 x i1> undef, i1 %164, i32 0
  %out1 = insertelement <32 x i1> %out0, i1 %168, i32 1
  %out2 = insertelement <32 x i1> %out1, i1 %172, i32 2
  %out3 = insertelement <32 x i1> %out2, i1 %176, i32 3
  %out4 = insertelement <32 x i1> %out3, i1 %180, i32 4
  %out5 = insertelement <32 x i1> %out4, i1 %184, i32 5
  %out6 = insertelement <32 x i1> %out5, i1 %188, i32 6
  %out7 = insertelement <32 x i1> %out6, i1 %192, i32 7
  %out8 = insertelement <32 x i1> %out7, i1 %196, i32 8
  %out9 = insertelement <32 x i1> %out8, i1 %200, i32 9
  %out10 = insertelement <32 x i1> %out9, i1 %204, i32 10
  %out11 = insertelement <32 x i1> %out10, i1 %208, i32 11
  %out12 = insertelement <32 x i1> %out11, i1 %212, i32 12
  %out13 = insertelement <32 x i1> %out12, i1 %216, i32 13
  %out14 = insertelement <32 x i1> %out13, i1 %220, i32 14
  %out15 = insertelement <32 x i1> %out14, i1 %224, i32 15
  %out16 = insertelement <32 x i1> %out15, i1 %228, i32 16
  %out17 = insertelement <32 x i1> %out16, i1 %232, i32 17
  %out18 = insertelement <32 x i1> %out17, i1 %236, i32 18
  %out19 = insertelement <32 x i1> %out18, i1 %240, i32 19
  %out20 = insertelement <32 x i1> %out19, i1 %244, i32 20
  %out21 = insertelement <32 x i1> %out20, i1 %248, i32 21
  %out22 = insertelement <32 x i1> %out21, i1 %252, i32 22
  %out23 = insertelement <32 x i1> %out22, i1 %256, i32 23
  %out24 = insertelement <32 x i1> %out23, i1 %260, i32 24
  %out25 = insertelement <32 x i1> %out24, i1 %264, i32 25
  %out26 = insertelement <32 x i1> %out25, i1 %268, i32 26
  %out27 = insertelement <32 x i1> %out26, i1 %272, i32 27
  %out28 = insertelement <32 x i1> %out27, i1 %276, i32 28
  %out29 = insertelement <32 x i1> %out28, i1 %280, i32 29
  %out30 = insertelement <32 x i1> %out29, i1 %284, i32 30
  %out31 = insertelement <32 x i1> %out30, i1 %288, i32 31
  ret <32 x i1> %out31
}

define <1 x i1> @boolean__Z13CHECK_min_1_2ii(<64 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <32 x i1> @boolean__Z5max_1ii(<64 x i1>) {
entry:
  %in0 = extractelement <64 x i1> %0, i32 0
  %in1 = extractelement <64 x i1> %0, i32 1
  %in2 = extractelement <64 x i1> %0, i32 2
  %in3 = extractelement <64 x i1> %0, i32 3
  %in4 = extractelement <64 x i1> %0, i32 4
  %in5 = extractelement <64 x i1> %0, i32 5
  %in6 = extractelement <64 x i1> %0, i32 6
  %in7 = extractelement <64 x i1> %0, i32 7
  %in8 = extractelement <64 x i1> %0, i32 8
  %in9 = extractelement <64 x i1> %0, i32 9
  %in10 = extractelement <64 x i1> %0, i32 10
  %in11 = extractelement <64 x i1> %0, i32 11
  %in12 = extractelement <64 x i1> %0, i32 12
  %in13 = extractelement <64 x i1> %0, i32 13
  %in14 = extractelement <64 x i1> %0, i32 14
  %in15 = extractelement <64 x i1> %0, i32 15
  %in16 = extractelement <64 x i1> %0, i32 16
  %in17 = extractelement <64 x i1> %0, i32 17
  %in18 = extractelement <64 x i1> %0, i32 18
  %in19 = extractelement <64 x i1> %0, i32 19
  %in20 = extractelement <64 x i1> %0, i32 20
  %in21 = extractelement <64 x i1> %0, i32 21
  %in22 = extractelement <64 x i1> %0, i32 22
  %in23 = extractelement <64 x i1> %0, i32 23
  %in24 = extractelement <64 x i1> %0, i32 24
  %in25 = extractelement <64 x i1> %0, i32 25
  %in26 = extractelement <64 x i1> %0, i32 26
  %in27 = extractelement <64 x i1> %0, i32 27
  %in28 = extractelement <64 x i1> %0, i32 28
  %in29 = extractelement <64 x i1> %0, i32 29
  %in30 = extractelement <64 x i1> %0, i32 30
  %in31 = extractelement <64 x i1> %0, i32 31
  %in32 = extractelement <64 x i1> %0, i32 32
  %in33 = extractelement <64 x i1> %0, i32 33
  %in34 = extractelement <64 x i1> %0, i32 34
  %in35 = extractelement <64 x i1> %0, i32 35
  %in36 = extractelement <64 x i1> %0, i32 36
  %in37 = extractelement <64 x i1> %0, i32 37
  %in38 = extractelement <64 x i1> %0, i32 38
  %in39 = extractelement <64 x i1> %0, i32 39
  %in40 = extractelement <64 x i1> %0, i32 40
  %in41 = extractelement <64 x i1> %0, i32 41
  %in42 = extractelement <64 x i1> %0, i32 42
  %in43 = extractelement <64 x i1> %0, i32 43
  %in44 = extractelement <64 x i1> %0, i32 44
  %in45 = extractelement <64 x i1> %0, i32 45
  %in46 = extractelement <64 x i1> %0, i32 46
  %in47 = extractelement <64 x i1> %0, i32 47
  %in48 = extractelement <64 x i1> %0, i32 48
  %in49 = extractelement <64 x i1> %0, i32 49
  %in50 = extractelement <64 x i1> %0, i32 50
  %in51 = extractelement <64 x i1> %0, i32 51
  %in52 = extractelement <64 x i1> %0, i32 52
  %in53 = extractelement <64 x i1> %0, i32 53
  %in54 = extractelement <64 x i1> %0, i32 54
  %in55 = extractelement <64 x i1> %0, i32 55
  %in56 = extractelement <64 x i1> %0, i32 56
  %in57 = extractelement <64 x i1> %0, i32 57
  %in58 = extractelement <64 x i1> %0, i32 58
  %in59 = extractelement <64 x i1> %0, i32 59
  %in60 = extractelement <64 x i1> %0, i32 60
  %in61 = extractelement <64 x i1> %0, i32 61
  %in62 = extractelement <64 x i1> %0, i32 62
  %in63 = extractelement <64 x i1> %0, i32 63
  %1 = and i1 %in32, %in0
  %2 = xor i1 %1, true
  %3 = or i1 %in32, %in0
  %4 = and i1 %3, %2
  %5 = xor i1 %in32, true
  %6 = and i1 %5, %in0
  %7 = xor i1 %4, true
  %8 = or i1 %6, %7
  %9 = xor i1 %8, true
  %10 = and i1 %9, %in32
  %11 = and i1 %8, %in0
  %12 = or i1 %11, %10
  %13 = and i1 %9, %in33
  %14 = and i1 %8, %in1
  %15 = or i1 %14, %13
  %16 = and i1 %9, %in34
  %17 = and i1 %8, %in2
  %18 = or i1 %17, %16
  %19 = and i1 %9, %in35
  %20 = and i1 %8, %in3
  %21 = or i1 %20, %19
  %22 = and i1 %9, %in36
  %23 = and i1 %8, %in4
  %24 = or i1 %23, %22
  %25 = and i1 %9, %in37
  %26 = and i1 %8, %in5
  %27 = or i1 %26, %25
  %28 = and i1 %9, %in38
  %29 = and i1 %8, %in6
  %30 = or i1 %29, %28
  %31 = and i1 %9, %in39
  %32 = and i1 %8, %in7
  %33 = or i1 %32, %31
  %34 = and i1 %9, %in40
  %35 = and i1 %8, %in8
  %36 = or i1 %35, %34
  %37 = and i1 %9, %in41
  %38 = and i1 %8, %in9
  %39 = or i1 %38, %37
  %40 = and i1 %9, %in42
  %41 = and i1 %8, %in10
  %42 = or i1 %41, %40
  %43 = and i1 %9, %in43
  %44 = and i1 %8, %in11
  %45 = or i1 %44, %43
  %46 = and i1 %9, %in44
  %47 = and i1 %8, %in12
  %48 = or i1 %47, %46
  %49 = and i1 %9, %in45
  %50 = and i1 %8, %in13
  %51 = or i1 %50, %49
  %52 = and i1 %9, %in46
  %53 = and i1 %8, %in14
  %54 = or i1 %53, %52
  %55 = and i1 %9, %in47
  %56 = and i1 %8, %in15
  %57 = or i1 %56, %55
  %58 = and i1 %9, %in48
  %59 = and i1 %8, %in16
  %60 = or i1 %59, %58
  %61 = and i1 %9, %in49
  %62 = and i1 %8, %in17
  %63 = or i1 %62, %61
  %64 = and i1 %9, %in50
  %65 = and i1 %8, %in18
  %66 = or i1 %65, %64
  %67 = and i1 %9, %in51
  %68 = and i1 %8, %in19
  %69 = or i1 %68, %67
  %70 = and i1 %9, %in52
  %71 = and i1 %8, %in20
  %72 = or i1 %71, %70
  %73 = and i1 %9, %in53
  %74 = and i1 %8, %in21
  %75 = or i1 %74, %73
  %76 = and i1 %9, %in54
  %77 = and i1 %8, %in22
  %78 = or i1 %77, %76
  %79 = and i1 %9, %in55
  %80 = and i1 %8, %in23
  %81 = or i1 %80, %79
  %82 = and i1 %9, %in56
  %83 = and i1 %8, %in24
  %84 = or i1 %83, %82
  %85 = and i1 %9, %in57
  %86 = and i1 %8, %in25
  %87 = or i1 %86, %85
  %88 = and i1 %9, %in58
  %89 = and i1 %8, %in26
  %90 = or i1 %89, %88
  %91 = and i1 %9, %in59
  %92 = and i1 %8, %in27
  %93 = or i1 %92, %91
  %94 = and i1 %9, %in60
  %95 = and i1 %8, %in28
  %96 = or i1 %95, %94
  %97 = and i1 %9, %in61
  %98 = and i1 %8, %in29
  %99 = or i1 %98, %97
  %100 = and i1 %9, %in62
  %101 = and i1 %8, %in30
  %102 = or i1 %101, %100
  %103 = and i1 %9, %in63
  %104 = and i1 %8, %in31
  %105 = or i1 %104, %103
  %out0 = insertelement <32 x i1> undef, i1 %12, i32 0
  %out1 = insertelement <32 x i1> %out0, i1 %15, i32 1
  %out2 = insertelement <32 x i1> %out1, i1 %18, i32 2
  %out3 = insertelement <32 x i1> %out2, i1 %21, i32 3
  %out4 = insertelement <32 x i1> %out3, i1 %24, i32 4
  %out5 = insertelement <32 x i1> %out4, i1 %27, i32 5
  %out6 = insertelement <32 x i1> %out5, i1 %30, i32 6
  %out7 = insertelement <32 x i1> %out6, i1 %33, i32 7
  %out8 = insertelement <32 x i1> %out7, i1 %36, i32 8
  %out9 = insertelement <32 x i1> %out8, i1 %39, i32 9
  %out10 = insertelement <32 x i1> %out9, i1 %42, i32 10
  %out11 = insertelement <32 x i1> %out10, i1 %45, i32 11
  %out12 = insertelement <32 x i1> %out11, i1 %48, i32 12
  %out13 = insertelement <32 x i1> %out12, i1 %51, i32 13
  %out14 = insertelement <32 x i1> %out13, i1 %54, i32 14
  %out15 = insertelement <32 x i1> %out14, i1 %57, i32 15
  %out16 = insertelement <32 x i1> %out15, i1 %60, i32 16
  %out17 = insertelement <32 x i1> %out16, i1 %63, i32 17
  %out18 = insertelement <32 x i1> %out17, i1 %66, i32 18
  %out19 = insertelement <32 x i1> %out18, i1 %69, i32 19
  %out20 = insertelement <32 x i1> %out19, i1 %72, i32 20
  %out21 = insertelement <32 x i1> %out20, i1 %75, i32 21
  %out22 = insertelement <32 x i1> %out21, i1 %78, i32 22
  %out23 = insertelement <32 x i1> %out22, i1 %81, i32 23
  %out24 = insertelement <32 x i1> %out23, i1 %84, i32 24
  %out25 = insertelement <32 x i1> %out24, i1 %87, i32 25
  %out26 = insertelement <32 x i1> %out25, i1 %90, i32 26
  %out27 = insertelement <32 x i1> %out26, i1 %93, i32 27
  %out28 = insertelement <32 x i1> %out27, i1 %96, i32 28
  %out29 = insertelement <32 x i1> %out28, i1 %99, i32 29
  %out30 = insertelement <32 x i1> %out29, i1 %102, i32 30
  %out31 = insertelement <32 x i1> %out30, i1 %105, i32 31
  ret <32 x i1> %out31
}

define <32 x i1> @boolean__Z5max_2ii(<64 x i1>) {
entry:
  %in0 = extractelement <64 x i1> %0, i32 0
  %in1 = extractelement <64 x i1> %0, i32 1
  %in2 = extractelement <64 x i1> %0, i32 2
  %in3 = extractelement <64 x i1> %0, i32 3
  %in4 = extractelement <64 x i1> %0, i32 4
  %in5 = extractelement <64 x i1> %0, i32 5
  %in6 = extractelement <64 x i1> %0, i32 6
  %in7 = extractelement <64 x i1> %0, i32 7
  %in8 = extractelement <64 x i1> %0, i32 8
  %in9 = extractelement <64 x i1> %0, i32 9
  %in10 = extractelement <64 x i1> %0, i32 10
  %in11 = extractelement <64 x i1> %0, i32 11
  %in12 = extractelement <64 x i1> %0, i32 12
  %in13 = extractelement <64 x i1> %0, i32 13
  %in14 = extractelement <64 x i1> %0, i32 14
  %in15 = extractelement <64 x i1> %0, i32 15
  %in16 = extractelement <64 x i1> %0, i32 16
  %in17 = extractelement <64 x i1> %0, i32 17
  %in18 = extractelement <64 x i1> %0, i32 18
  %in19 = extractelement <64 x i1> %0, i32 19
  %in20 = extractelement <64 x i1> %0, i32 20
  %in21 = extractelement <64 x i1> %0, i32 21
  %in22 = extractelement <64 x i1> %0, i32 22
  %in23 = extractelement <64 x i1> %0, i32 23
  %in24 = extractelement <64 x i1> %0, i32 24
  %in25 = extractelement <64 x i1> %0, i32 25
  %in26 = extractelement <64 x i1> %0, i32 26
  %in27 = extractelement <64 x i1> %0, i32 27
  %in28 = extractelement <64 x i1> %0, i32 28
  %in29 = extractelement <64 x i1> %0, i32 29
  %in30 = extractelement <64 x i1> %0, i32 30
  %in31 = extractelement <64 x i1> %0, i32 31
  %in32 = extractelement <64 x i1> %0, i32 32
  %in33 = extractelement <64 x i1> %0, i32 33
  %in34 = extractelement <64 x i1> %0, i32 34
  %in35 = extractelement <64 x i1> %0, i32 35
  %in36 = extractelement <64 x i1> %0, i32 36
  %in37 = extractelement <64 x i1> %0, i32 37
  %in38 = extractelement <64 x i1> %0, i32 38
  %in39 = extractelement <64 x i1> %0, i32 39
  %in40 = extractelement <64 x i1> %0, i32 40
  %in41 = extractelement <64 x i1> %0, i32 41
  %in42 = extractelement <64 x i1> %0, i32 42
  %in43 = extractelement <64 x i1> %0, i32 43
  %in44 = extractelement <64 x i1> %0, i32 44
  %in45 = extractelement <64 x i1> %0, i32 45
  %in46 = extractelement <64 x i1> %0, i32 46
  %in47 = extractelement <64 x i1> %0, i32 47
  %in48 = extractelement <64 x i1> %0, i32 48
  %in49 = extractelement <64 x i1> %0, i32 49
  %in50 = extractelement <64 x i1> %0, i32 50
  %in51 = extractelement <64 x i1> %0, i32 51
  %in52 = extractelement <64 x i1> %0, i32 52
  %in53 = extractelement <64 x i1> %0, i32 53
  %in54 = extractelement <64 x i1> %0, i32 54
  %in55 = extractelement <64 x i1> %0, i32 55
  %in56 = extractelement <64 x i1> %0, i32 56
  %in57 = extractelement <64 x i1> %0, i32 57
  %in58 = extractelement <64 x i1> %0, i32 58
  %in59 = extractelement <64 x i1> %0, i32 59
  %in60 = extractelement <64 x i1> %0, i32 60
  %in61 = extractelement <64 x i1> %0, i32 61
  %in62 = extractelement <64 x i1> %0, i32 62
  %in63 = extractelement <64 x i1> %0, i32 63
  %1 = and i1 %in32, %in0
  %2 = xor i1 %1, true
  %3 = or i1 %in32, %in0
  %4 = and i1 %3, %2
  %5 = and i1 %in33, %in1
  %6 = xor i1 %5, true
  %7 = or i1 %in33, %in1
  %8 = and i1 %7, %6
  %9 = and i1 %in34, %in2
  %10 = xor i1 %9, true
  %11 = or i1 %in34, %in2
  %12 = and i1 %11, %10
  %13 = and i1 %in35, %in3
  %14 = xor i1 %13, true
  %15 = or i1 %in35, %in3
  %16 = and i1 %15, %14
  %17 = and i1 %in36, %in4
  %18 = xor i1 %17, true
  %19 = or i1 %in36, %in4
  %20 = and i1 %19, %18
  %21 = and i1 %in37, %in5
  %22 = xor i1 %21, true
  %23 = or i1 %in37, %in5
  %24 = and i1 %23, %22
  %25 = and i1 %in38, %in6
  %26 = xor i1 %25, true
  %27 = or i1 %in38, %in6
  %28 = and i1 %27, %26
  %29 = and i1 %in39, %in7
  %30 = xor i1 %29, true
  %31 = or i1 %in39, %in7
  %32 = and i1 %31, %30
  %33 = and i1 %in40, %in8
  %34 = xor i1 %33, true
  %35 = or i1 %in40, %in8
  %36 = and i1 %35, %34
  %37 = and i1 %in41, %in9
  %38 = xor i1 %37, true
  %39 = or i1 %in41, %in9
  %40 = and i1 %39, %38
  %41 = and i1 %in42, %in10
  %42 = xor i1 %41, true
  %43 = or i1 %in42, %in10
  %44 = and i1 %43, %42
  %45 = and i1 %in43, %in11
  %46 = xor i1 %45, true
  %47 = or i1 %in43, %in11
  %48 = and i1 %47, %46
  %49 = and i1 %in44, %in12
  %50 = xor i1 %49, true
  %51 = or i1 %in44, %in12
  %52 = and i1 %51, %50
  %53 = and i1 %in45, %in13
  %54 = xor i1 %53, true
  %55 = or i1 %in45, %in13
  %56 = and i1 %55, %54
  %57 = and i1 %in46, %in14
  %58 = xor i1 %57, true
  %59 = or i1 %in46, %in14
  %60 = and i1 %59, %58
  %61 = and i1 %in47, %in15
  %62 = xor i1 %61, true
  %63 = or i1 %in47, %in15
  %64 = and i1 %63, %62
  %65 = and i1 %in48, %in16
  %66 = xor i1 %65, true
  %67 = or i1 %in48, %in16
  %68 = and i1 %67, %66
  %69 = and i1 %in49, %in17
  %70 = xor i1 %69, true
  %71 = or i1 %in49, %in17
  %72 = and i1 %71, %70
  %73 = and i1 %in50, %in18
  %74 = xor i1 %73, true
  %75 = or i1 %in50, %in18
  %76 = and i1 %75, %74
  %77 = and i1 %in51, %in19
  %78 = xor i1 %77, true
  %79 = or i1 %in51, %in19
  %80 = and i1 %79, %78
  %81 = and i1 %in52, %in20
  %82 = xor i1 %81, true
  %83 = or i1 %in52, %in20
  %84 = and i1 %83, %82
  %85 = and i1 %in53, %in21
  %86 = xor i1 %85, true
  %87 = or i1 %in53, %in21
  %88 = and i1 %87, %86
  %89 = and i1 %in54, %in22
  %90 = xor i1 %89, true
  %91 = or i1 %in54, %in22
  %92 = and i1 %91, %90
  %93 = and i1 %in55, %in23
  %94 = xor i1 %93, true
  %95 = or i1 %in55, %in23
  %96 = and i1 %95, %94
  %97 = and i1 %in56, %in24
  %98 = xor i1 %97, true
  %99 = or i1 %in56, %in24
  %100 = and i1 %99, %98
  %101 = and i1 %in57, %in25
  %102 = xor i1 %101, true
  %103 = or i1 %in57, %in25
  %104 = and i1 %103, %102
  %105 = and i1 %in58, %in26
  %106 = xor i1 %105, true
  %107 = or i1 %in58, %in26
  %108 = and i1 %107, %106
  %109 = and i1 %in59, %in27
  %110 = xor i1 %109, true
  %111 = or i1 %in59, %in27
  %112 = and i1 %111, %110
  %113 = and i1 %in60, %in28
  %114 = xor i1 %113, true
  %115 = or i1 %in60, %in28
  %116 = and i1 %115, %114
  %117 = and i1 %in61, %in29
  %118 = xor i1 %117, true
  %119 = or i1 %in61, %in29
  %120 = and i1 %119, %118
  %121 = and i1 %in62, %in30
  %122 = xor i1 %121, true
  %123 = or i1 %in62, %in30
  %124 = and i1 %123, %122
  %125 = and i1 %in63, %in31
  %126 = xor i1 %125, true
  %127 = or i1 %in63, %in31
  %128 = and i1 %127, %126
  %129 = xor i1 %in0, true
  %130 = and i1 %129, %in32
  %131 = and i1 %130, %4
  %132 = and i1 %130, %8
  %133 = and i1 %130, %12
  %134 = and i1 %130, %16
  %135 = and i1 %130, %20
  %136 = and i1 %130, %24
  %137 = and i1 %130, %28
  %138 = and i1 %130, %32
  %139 = and i1 %130, %36
  %140 = and i1 %130, %40
  %141 = and i1 %130, %44
  %142 = and i1 %130, %48
  %143 = and i1 %130, %52
  %144 = and i1 %130, %56
  %145 = and i1 %130, %60
  %146 = and i1 %130, %64
  %147 = and i1 %130, %68
  %148 = and i1 %130, %72
  %149 = and i1 %130, %76
  %150 = and i1 %130, %80
  %151 = and i1 %130, %84
  %152 = and i1 %130, %88
  %153 = and i1 %130, %92
  %154 = and i1 %130, %96
  %155 = and i1 %130, %100
  %156 = and i1 %130, %104
  %157 = and i1 %130, %108
  %158 = and i1 %130, %112
  %159 = and i1 %130, %116
  %160 = and i1 %130, %120
  %161 = and i1 %130, %124
  %162 = and i1 %130, %128
  %163 = or i1 %131, %in0
  %164 = and i1 %132, %in1
  %165 = xor i1 %164, true
  %166 = or i1 %132, %in1
  %167 = and i1 %166, %165
  %168 = and i1 %133, %in2
  %169 = xor i1 %168, true
  %170 = or i1 %133, %in2
  %171 = and i1 %170, %169
  %172 = and i1 %134, %in3
  %173 = xor i1 %172, true
  %174 = or i1 %134, %in3
  %175 = and i1 %174, %173
  %176 = and i1 %135, %in4
  %177 = xor i1 %176, true
  %178 = or i1 %135, %in4
  %179 = and i1 %178, %177
  %180 = and i1 %136, %in5
  %181 = xor i1 %180, true
  %182 = or i1 %136, %in5
  %183 = and i1 %182, %181
  %184 = and i1 %137, %in6
  %185 = xor i1 %184, true
  %186 = or i1 %137, %in6
  %187 = and i1 %186, %185
  %188 = and i1 %138, %in7
  %189 = xor i1 %188, true
  %190 = or i1 %138, %in7
  %191 = and i1 %190, %189
  %192 = and i1 %139, %in8
  %193 = xor i1 %192, true
  %194 = or i1 %139, %in8
  %195 = and i1 %194, %193
  %196 = and i1 %140, %in9
  %197 = xor i1 %196, true
  %198 = or i1 %140, %in9
  %199 = and i1 %198, %197
  %200 = and i1 %141, %in10
  %201 = xor i1 %200, true
  %202 = or i1 %141, %in10
  %203 = and i1 %202, %201
  %204 = and i1 %142, %in11
  %205 = xor i1 %204, true
  %206 = or i1 %142, %in11
  %207 = and i1 %206, %205
  %208 = and i1 %143, %in12
  %209 = xor i1 %208, true
  %210 = or i1 %143, %in12
  %211 = and i1 %210, %209
  %212 = and i1 %144, %in13
  %213 = xor i1 %212, true
  %214 = or i1 %144, %in13
  %215 = and i1 %214, %213
  %216 = and i1 %145, %in14
  %217 = xor i1 %216, true
  %218 = or i1 %145, %in14
  %219 = and i1 %218, %217
  %220 = and i1 %146, %in15
  %221 = xor i1 %220, true
  %222 = or i1 %146, %in15
  %223 = and i1 %222, %221
  %224 = and i1 %147, %in16
  %225 = xor i1 %224, true
  %226 = or i1 %147, %in16
  %227 = and i1 %226, %225
  %228 = and i1 %148, %in17
  %229 = xor i1 %228, true
  %230 = or i1 %148, %in17
  %231 = and i1 %230, %229
  %232 = and i1 %149, %in18
  %233 = xor i1 %232, true
  %234 = or i1 %149, %in18
  %235 = and i1 %234, %233
  %236 = and i1 %150, %in19
  %237 = xor i1 %236, true
  %238 = or i1 %150, %in19
  %239 = and i1 %238, %237
  %240 = and i1 %151, %in20
  %241 = xor i1 %240, true
  %242 = or i1 %151, %in20
  %243 = and i1 %242, %241
  %244 = and i1 %152, %in21
  %245 = xor i1 %244, true
  %246 = or i1 %152, %in21
  %247 = and i1 %246, %245
  %248 = and i1 %153, %in22
  %249 = xor i1 %248, true
  %250 = or i1 %153, %in22
  %251 = and i1 %250, %249
  %252 = and i1 %154, %in23
  %253 = xor i1 %252, true
  %254 = or i1 %154, %in23
  %255 = and i1 %254, %253
  %256 = and i1 %155, %in24
  %257 = xor i1 %256, true
  %258 = or i1 %155, %in24
  %259 = and i1 %258, %257
  %260 = and i1 %156, %in25
  %261 = xor i1 %260, true
  %262 = or i1 %156, %in25
  %263 = and i1 %262, %261
  %264 = and i1 %157, %in26
  %265 = xor i1 %264, true
  %266 = or i1 %157, %in26
  %267 = and i1 %266, %265
  %268 = and i1 %158, %in27
  %269 = xor i1 %268, true
  %270 = or i1 %158, %in27
  %271 = and i1 %270, %269
  %272 = and i1 %159, %in28
  %273 = xor i1 %272, true
  %274 = or i1 %159, %in28
  %275 = and i1 %274, %273
  %276 = and i1 %160, %in29
  %277 = xor i1 %276, true
  %278 = or i1 %160, %in29
  %279 = and i1 %278, %277
  %280 = and i1 %161, %in30
  %281 = xor i1 %280, true
  %282 = or i1 %161, %in30
  %283 = and i1 %282, %281
  %284 = and i1 %162, %in31
  %285 = xor i1 %284, true
  %286 = or i1 %162, %in31
  %287 = and i1 %286, %285
  %out0 = insertelement <32 x i1> undef, i1 %163, i32 0
  %out1 = insertelement <32 x i1> %out0, i1 %167, i32 1
  %out2 = insertelement <32 x i1> %out1, i1 %171, i32 2
  %out3 = insertelement <32 x i1> %out2, i1 %175, i32 3
  %out4 = insertelement <32 x i1> %out3, i1 %179, i32 4
  %out5 = insertelement <32 x i1> %out4, i1 %183, i32 5
  %out6 = insertelement <32 x i1> %out5, i1 %187, i32 6
  %out7 = insertelement <32 x i1> %out6, i1 %191, i32 7
  %out8 = insertelement <32 x i1> %out7, i1 %195, i32 8
  %out9 = insertelement <32 x i1> %out8, i1 %199, i32 9
  %out10 = insertelement <32 x i1> %out9, i1 %203, i32 10
  %out11 = insertelement <32 x i1> %out10, i1 %207, i32 11
  %out12 = insertelement <32 x i1> %out11, i1 %211, i32 12
  %out13 = insertelement <32 x i1> %out12, i1 %215, i32 13
  %out14 = insertelement <32 x i1> %out13, i1 %219, i32 14
  %out15 = insertelement <32 x i1> %out14, i1 %223, i32 15
  %out16 = insertelement <32 x i1> %out15, i1 %227, i32 16
  %out17 = insertelement <32 x i1> %out16, i1 %231, i32 17
  %out18 = insertelement <32 x i1> %out17, i1 %235, i32 18
  %out19 = insertelement <32 x i1> %out18, i1 %239, i32 19
  %out20 = insertelement <32 x i1> %out19, i1 %243, i32 20
  %out21 = insertelement <32 x i1> %out20, i1 %247, i32 21
  %out22 = insertelement <32 x i1> %out21, i1 %251, i32 22
  %out23 = insertelement <32 x i1> %out22, i1 %255, i32 23
  %out24 = insertelement <32 x i1> %out23, i1 %259, i32 24
  %out25 = insertelement <32 x i1> %out24, i1 %263, i32 25
  %out26 = insertelement <32 x i1> %out25, i1 %267, i32 26
  %out27 = insertelement <32 x i1> %out26, i1 %271, i32 27
  %out28 = insertelement <32 x i1> %out27, i1 %275, i32 28
  %out29 = insertelement <32 x i1> %out28, i1 %279, i32 29
  %out30 = insertelement <32 x i1> %out29, i1 %283, i32 30
  %out31 = insertelement <32 x i1> %out30, i1 %287, i32 31
  ret <32 x i1> %out31
}

define <1 x i1> @boolean__Z13CHECK_max_1_2ii(<64 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <32 x i1> @boolean__Z14set_or_clear_1bjj(<65 x i1>) {
entry:
  %in0 = extractelement <65 x i1> %0, i32 0
  %in1 = extractelement <65 x i1> %0, i32 1
  %in2 = extractelement <65 x i1> %0, i32 2
  %in3 = extractelement <65 x i1> %0, i32 3
  %in4 = extractelement <65 x i1> %0, i32 4
  %in5 = extractelement <65 x i1> %0, i32 5
  %in6 = extractelement <65 x i1> %0, i32 6
  %in7 = extractelement <65 x i1> %0, i32 7
  %in8 = extractelement <65 x i1> %0, i32 8
  %in9 = extractelement <65 x i1> %0, i32 9
  %in10 = extractelement <65 x i1> %0, i32 10
  %in11 = extractelement <65 x i1> %0, i32 11
  %in12 = extractelement <65 x i1> %0, i32 12
  %in13 = extractelement <65 x i1> %0, i32 13
  %in14 = extractelement <65 x i1> %0, i32 14
  %in15 = extractelement <65 x i1> %0, i32 15
  %in16 = extractelement <65 x i1> %0, i32 16
  %in17 = extractelement <65 x i1> %0, i32 17
  %in18 = extractelement <65 x i1> %0, i32 18
  %in19 = extractelement <65 x i1> %0, i32 19
  %in20 = extractelement <65 x i1> %0, i32 20
  %in21 = extractelement <65 x i1> %0, i32 21
  %in22 = extractelement <65 x i1> %0, i32 22
  %in23 = extractelement <65 x i1> %0, i32 23
  %in24 = extractelement <65 x i1> %0, i32 24
  %in25 = extractelement <65 x i1> %0, i32 25
  %in26 = extractelement <65 x i1> %0, i32 26
  %in27 = extractelement <65 x i1> %0, i32 27
  %in28 = extractelement <65 x i1> %0, i32 28
  %in29 = extractelement <65 x i1> %0, i32 29
  %in30 = extractelement <65 x i1> %0, i32 30
  %in31 = extractelement <65 x i1> %0, i32 31
  %in32 = extractelement <65 x i1> %0, i32 32
  %in33 = extractelement <65 x i1> %0, i32 33
  %in34 = extractelement <65 x i1> %0, i32 34
  %in35 = extractelement <65 x i1> %0, i32 35
  %in36 = extractelement <65 x i1> %0, i32 36
  %in37 = extractelement <65 x i1> %0, i32 37
  %in38 = extractelement <65 x i1> %0, i32 38
  %in39 = extractelement <65 x i1> %0, i32 39
  %in40 = extractelement <65 x i1> %0, i32 40
  %in41 = extractelement <65 x i1> %0, i32 41
  %in42 = extractelement <65 x i1> %0, i32 42
  %in43 = extractelement <65 x i1> %0, i32 43
  %in44 = extractelement <65 x i1> %0, i32 44
  %in45 = extractelement <65 x i1> %0, i32 45
  %in46 = extractelement <65 x i1> %0, i32 46
  %in47 = extractelement <65 x i1> %0, i32 47
  %in48 = extractelement <65 x i1> %0, i32 48
  %in49 = extractelement <65 x i1> %0, i32 49
  %in50 = extractelement <65 x i1> %0, i32 50
  %in51 = extractelement <65 x i1> %0, i32 51
  %in52 = extractelement <65 x i1> %0, i32 52
  %in53 = extractelement <65 x i1> %0, i32 53
  %in54 = extractelement <65 x i1> %0, i32 54
  %in55 = extractelement <65 x i1> %0, i32 55
  %in56 = extractelement <65 x i1> %0, i32 56
  %in57 = extractelement <65 x i1> %0, i32 57
  %in58 = extractelement <65 x i1> %0, i32 58
  %in59 = extractelement <65 x i1> %0, i32 59
  %in60 = extractelement <65 x i1> %0, i32 60
  %in61 = extractelement <65 x i1> %0, i32 61
  %in62 = extractelement <65 x i1> %0, i32 62
  %in63 = extractelement <65 x i1> %0, i32 63
  %in64 = extractelement <65 x i1> %0, i32 64
  %1 = or i1 %in33, %in1
  %2 = or i1 %in34, %in2
  %3 = or i1 %in35, %in3
  %4 = or i1 %in36, %in4
  %5 = or i1 %in37, %in5
  %6 = or i1 %in38, %in6
  %7 = or i1 %in39, %in7
  %8 = or i1 %in40, %in8
  %9 = or i1 %in41, %in9
  %10 = or i1 %in42, %in10
  %11 = or i1 %in43, %in11
  %12 = or i1 %in44, %in12
  %13 = or i1 %in45, %in13
  %14 = or i1 %in46, %in14
  %15 = or i1 %in47, %in15
  %16 = or i1 %in48, %in16
  %17 = or i1 %in49, %in17
  %18 = or i1 %in50, %in18
  %19 = or i1 %in51, %in19
  %20 = or i1 %in52, %in20
  %21 = or i1 %in53, %in21
  %22 = or i1 %in54, %in22
  %23 = or i1 %in55, %in23
  %24 = or i1 %in56, %in24
  %25 = or i1 %in57, %in25
  %26 = or i1 %in58, %in26
  %27 = or i1 %in59, %in27
  %28 = or i1 %in60, %in28
  %29 = or i1 %in61, %in29
  %30 = or i1 %in62, %in30
  %31 = or i1 %in63, %in31
  %32 = or i1 %in64, %in32
  %33 = xor i1 %in1, true
  %34 = xor i1 %in2, true
  %35 = xor i1 %in3, true
  %36 = xor i1 %in4, true
  %37 = xor i1 %in5, true
  %38 = xor i1 %in6, true
  %39 = xor i1 %in7, true
  %40 = xor i1 %in8, true
  %41 = xor i1 %in9, true
  %42 = xor i1 %in10, true
  %43 = xor i1 %in11, true
  %44 = xor i1 %in12, true
  %45 = xor i1 %in13, true
  %46 = xor i1 %in14, true
  %47 = xor i1 %in15, true
  %48 = xor i1 %in16, true
  %49 = xor i1 %in17, true
  %50 = xor i1 %in18, true
  %51 = xor i1 %in19, true
  %52 = xor i1 %in20, true
  %53 = xor i1 %in21, true
  %54 = xor i1 %in22, true
  %55 = xor i1 %in23, true
  %56 = xor i1 %in24, true
  %57 = xor i1 %in25, true
  %58 = xor i1 %in26, true
  %59 = xor i1 %in27, true
  %60 = xor i1 %in28, true
  %61 = xor i1 %in29, true
  %62 = xor i1 %in30, true
  %63 = xor i1 %in31, true
  %64 = xor i1 %in32, true
  %65 = and i1 %in33, %33
  %66 = and i1 %in34, %34
  %67 = and i1 %in35, %35
  %68 = and i1 %in36, %36
  %69 = and i1 %in37, %37
  %70 = and i1 %in38, %38
  %71 = and i1 %in39, %39
  %72 = and i1 %in40, %40
  %73 = and i1 %in41, %41
  %74 = and i1 %in42, %42
  %75 = and i1 %in43, %43
  %76 = and i1 %in44, %44
  %77 = and i1 %in45, %45
  %78 = and i1 %in46, %46
  %79 = and i1 %in47, %47
  %80 = and i1 %in48, %48
  %81 = and i1 %in49, %49
  %82 = and i1 %in50, %50
  %83 = and i1 %in51, %51
  %84 = and i1 %in52, %52
  %85 = and i1 %in53, %53
  %86 = and i1 %in54, %54
  %87 = and i1 %in55, %55
  %88 = and i1 %in56, %56
  %89 = and i1 %in57, %57
  %90 = and i1 %in58, %58
  %91 = and i1 %in59, %59
  %92 = and i1 %in60, %60
  %93 = and i1 %in61, %61
  %94 = and i1 %in62, %62
  %95 = and i1 %in63, %63
  %96 = and i1 %in64, %64
  %97 = xor i1 %in0, true
  %98 = and i1 %97, %1
  %99 = and i1 %in0, %65
  %100 = or i1 %99, %98
  %101 = and i1 %97, %2
  %102 = and i1 %in0, %66
  %103 = or i1 %102, %101
  %104 = and i1 %97, %3
  %105 = and i1 %in0, %67
  %106 = or i1 %105, %104
  %107 = and i1 %97, %4
  %108 = and i1 %in0, %68
  %109 = or i1 %108, %107
  %110 = and i1 %97, %5
  %111 = and i1 %in0, %69
  %112 = or i1 %111, %110
  %113 = and i1 %97, %6
  %114 = and i1 %in0, %70
  %115 = or i1 %114, %113
  %116 = and i1 %97, %7
  %117 = and i1 %in0, %71
  %118 = or i1 %117, %116
  %119 = and i1 %97, %8
  %120 = and i1 %in0, %72
  %121 = or i1 %120, %119
  %122 = and i1 %97, %9
  %123 = and i1 %in0, %73
  %124 = or i1 %123, %122
  %125 = and i1 %97, %10
  %126 = and i1 %in0, %74
  %127 = or i1 %126, %125
  %128 = and i1 %97, %11
  %129 = and i1 %in0, %75
  %130 = or i1 %129, %128
  %131 = and i1 %97, %12
  %132 = and i1 %in0, %76
  %133 = or i1 %132, %131
  %134 = and i1 %97, %13
  %135 = and i1 %in0, %77
  %136 = or i1 %135, %134
  %137 = and i1 %97, %14
  %138 = and i1 %in0, %78
  %139 = or i1 %138, %137
  %140 = and i1 %97, %15
  %141 = and i1 %in0, %79
  %142 = or i1 %141, %140
  %143 = and i1 %97, %16
  %144 = and i1 %in0, %80
  %145 = or i1 %144, %143
  %146 = and i1 %97, %17
  %147 = and i1 %in0, %81
  %148 = or i1 %147, %146
  %149 = and i1 %97, %18
  %150 = and i1 %in0, %82
  %151 = or i1 %150, %149
  %152 = and i1 %97, %19
  %153 = and i1 %in0, %83
  %154 = or i1 %153, %152
  %155 = and i1 %97, %20
  %156 = and i1 %in0, %84
  %157 = or i1 %156, %155
  %158 = and i1 %97, %21
  %159 = and i1 %in0, %85
  %160 = or i1 %159, %158
  %161 = and i1 %97, %22
  %162 = and i1 %in0, %86
  %163 = or i1 %162, %161
  %164 = and i1 %97, %23
  %165 = and i1 %in0, %87
  %166 = or i1 %165, %164
  %167 = and i1 %97, %24
  %168 = and i1 %in0, %88
  %169 = or i1 %168, %167
  %170 = and i1 %97, %25
  %171 = and i1 %in0, %89
  %172 = or i1 %171, %170
  %173 = and i1 %97, %26
  %174 = and i1 %in0, %90
  %175 = or i1 %174, %173
  %176 = and i1 %97, %27
  %177 = and i1 %in0, %91
  %178 = or i1 %177, %176
  %179 = and i1 %97, %28
  %180 = and i1 %in0, %92
  %181 = or i1 %180, %179
  %182 = and i1 %97, %29
  %183 = and i1 %in0, %93
  %184 = or i1 %183, %182
  %185 = and i1 %97, %30
  %186 = and i1 %in0, %94
  %187 = or i1 %186, %185
  %188 = and i1 %97, %31
  %189 = and i1 %in0, %95
  %190 = or i1 %189, %188
  %191 = and i1 %97, %32
  %192 = and i1 %in0, %96
  %193 = or i1 %192, %191
  %out0 = insertelement <32 x i1> undef, i1 %100, i32 0
  %out1 = insertelement <32 x i1> %out0, i1 %103, i32 1
  %out2 = insertelement <32 x i1> %out1, i1 %106, i32 2
  %out3 = insertelement <32 x i1> %out2, i1 %109, i32 3
  %out4 = insertelement <32 x i1> %out3, i1 %112, i32 4
  %out5 = insertelement <32 x i1> %out4, i1 %115, i32 5
  %out6 = insertelement <32 x i1> %out5, i1 %118, i32 6
  %out7 = insertelement <32 x i1> %out6, i1 %121, i32 7
  %out8 = insertelement <32 x i1> %out7, i1 %124, i32 8
  %out9 = insertelement <32 x i1> %out8, i1 %127, i32 9
  %out10 = insertelement <32 x i1> %out9, i1 %130, i32 10
  %out11 = insertelement <32 x i1> %out10, i1 %133, i32 11
  %out12 = insertelement <32 x i1> %out11, i1 %136, i32 12
  %out13 = insertelement <32 x i1> %out12, i1 %139, i32 13
  %out14 = insertelement <32 x i1> %out13, i1 %142, i32 14
  %out15 = insertelement <32 x i1> %out14, i1 %145, i32 15
  %out16 = insertelement <32 x i1> %out15, i1 %148, i32 16
  %out17 = insertelement <32 x i1> %out16, i1 %151, i32 17
  %out18 = insertelement <32 x i1> %out17, i1 %154, i32 18
  %out19 = insertelement <32 x i1> %out18, i1 %157, i32 19
  %out20 = insertelement <32 x i1> %out19, i1 %160, i32 20
  %out21 = insertelement <32 x i1> %out20, i1 %163, i32 21
  %out22 = insertelement <32 x i1> %out21, i1 %166, i32 22
  %out23 = insertelement <32 x i1> %out22, i1 %169, i32 23
  %out24 = insertelement <32 x i1> %out23, i1 %172, i32 24
  %out25 = insertelement <32 x i1> %out24, i1 %175, i32 25
  %out26 = insertelement <32 x i1> %out25, i1 %178, i32 26
  %out27 = insertelement <32 x i1> %out26, i1 %181, i32 27
  %out28 = insertelement <32 x i1> %out27, i1 %184, i32 28
  %out29 = insertelement <32 x i1> %out28, i1 %187, i32 29
  %out30 = insertelement <32 x i1> %out29, i1 %190, i32 30
  %out31 = insertelement <32 x i1> %out30, i1 %193, i32 31
  ret <32 x i1> %out31
}

define <32 x i1> @boolean__Z14set_or_clear_2bjj(<65 x i1>) {
entry:
  %in0 = extractelement <65 x i1> %0, i32 0
  %in1 = extractelement <65 x i1> %0, i32 1
  %in2 = extractelement <65 x i1> %0, i32 2
  %in3 = extractelement <65 x i1> %0, i32 3
  %in4 = extractelement <65 x i1> %0, i32 4
  %in5 = extractelement <65 x i1> %0, i32 5
  %in6 = extractelement <65 x i1> %0, i32 6
  %in7 = extractelement <65 x i1> %0, i32 7
  %in8 = extractelement <65 x i1> %0, i32 8
  %in9 = extractelement <65 x i1> %0, i32 9
  %in10 = extractelement <65 x i1> %0, i32 10
  %in11 = extractelement <65 x i1> %0, i32 11
  %in12 = extractelement <65 x i1> %0, i32 12
  %in13 = extractelement <65 x i1> %0, i32 13
  %in14 = extractelement <65 x i1> %0, i32 14
  %in15 = extractelement <65 x i1> %0, i32 15
  %in16 = extractelement <65 x i1> %0, i32 16
  %in17 = extractelement <65 x i1> %0, i32 17
  %in18 = extractelement <65 x i1> %0, i32 18
  %in19 = extractelement <65 x i1> %0, i32 19
  %in20 = extractelement <65 x i1> %0, i32 20
  %in21 = extractelement <65 x i1> %0, i32 21
  %in22 = extractelement <65 x i1> %0, i32 22
  %in23 = extractelement <65 x i1> %0, i32 23
  %in24 = extractelement <65 x i1> %0, i32 24
  %in25 = extractelement <65 x i1> %0, i32 25
  %in26 = extractelement <65 x i1> %0, i32 26
  %in27 = extractelement <65 x i1> %0, i32 27
  %in28 = extractelement <65 x i1> %0, i32 28
  %in29 = extractelement <65 x i1> %0, i32 29
  %in30 = extractelement <65 x i1> %0, i32 30
  %in31 = extractelement <65 x i1> %0, i32 31
  %in32 = extractelement <65 x i1> %0, i32 32
  %in33 = extractelement <65 x i1> %0, i32 33
  %in34 = extractelement <65 x i1> %0, i32 34
  %in35 = extractelement <65 x i1> %0, i32 35
  %in36 = extractelement <65 x i1> %0, i32 36
  %in37 = extractelement <65 x i1> %0, i32 37
  %in38 = extractelement <65 x i1> %0, i32 38
  %in39 = extractelement <65 x i1> %0, i32 39
  %in40 = extractelement <65 x i1> %0, i32 40
  %in41 = extractelement <65 x i1> %0, i32 41
  %in42 = extractelement <65 x i1> %0, i32 42
  %in43 = extractelement <65 x i1> %0, i32 43
  %in44 = extractelement <65 x i1> %0, i32 44
  %in45 = extractelement <65 x i1> %0, i32 45
  %in46 = extractelement <65 x i1> %0, i32 46
  %in47 = extractelement <65 x i1> %0, i32 47
  %in48 = extractelement <65 x i1> %0, i32 48
  %in49 = extractelement <65 x i1> %0, i32 49
  %in50 = extractelement <65 x i1> %0, i32 50
  %in51 = extractelement <65 x i1> %0, i32 51
  %in52 = extractelement <65 x i1> %0, i32 52
  %in53 = extractelement <65 x i1> %0, i32 53
  %in54 = extractelement <65 x i1> %0, i32 54
  %in55 = extractelement <65 x i1> %0, i32 55
  %in56 = extractelement <65 x i1> %0, i32 56
  %in57 = extractelement <65 x i1> %0, i32 57
  %in58 = extractelement <65 x i1> %0, i32 58
  %in59 = extractelement <65 x i1> %0, i32 59
  %in60 = extractelement <65 x i1> %0, i32 60
  %in61 = extractelement <65 x i1> %0, i32 61
  %in62 = extractelement <65 x i1> %0, i32 62
  %in63 = extractelement <65 x i1> %0, i32 63
  %in64 = extractelement <65 x i1> %0, i32 64
  %1 = and i1 %in0, %in33
  %2 = xor i1 %1, true
  %3 = or i1 %in0, %in33
  %4 = and i1 %3, %2
  %5 = and i1 %in0, %in34
  %6 = xor i1 %5, true
  %7 = or i1 %in0, %in34
  %8 = and i1 %7, %6
  %9 = and i1 %in0, %in35
  %10 = xor i1 %9, true
  %11 = or i1 %in0, %in35
  %12 = and i1 %11, %10
  %13 = and i1 %in0, %in36
  %14 = xor i1 %13, true
  %15 = or i1 %in0, %in36
  %16 = and i1 %15, %14
  %17 = and i1 %in0, %in37
  %18 = xor i1 %17, true
  %19 = or i1 %in0, %in37
  %20 = and i1 %19, %18
  %21 = and i1 %in0, %in38
  %22 = xor i1 %21, true
  %23 = or i1 %in0, %in38
  %24 = and i1 %23, %22
  %25 = and i1 %in0, %in39
  %26 = xor i1 %25, true
  %27 = or i1 %in0, %in39
  %28 = and i1 %27, %26
  %29 = and i1 %in0, %in40
  %30 = xor i1 %29, true
  %31 = or i1 %in0, %in40
  %32 = and i1 %31, %30
  %33 = and i1 %in0, %in41
  %34 = xor i1 %33, true
  %35 = or i1 %in0, %in41
  %36 = and i1 %35, %34
  %37 = and i1 %in0, %in42
  %38 = xor i1 %37, true
  %39 = or i1 %in0, %in42
  %40 = and i1 %39, %38
  %41 = and i1 %in0, %in43
  %42 = xor i1 %41, true
  %43 = or i1 %in0, %in43
  %44 = and i1 %43, %42
  %45 = and i1 %in0, %in44
  %46 = xor i1 %45, true
  %47 = or i1 %in0, %in44
  %48 = and i1 %47, %46
  %49 = and i1 %in0, %in45
  %50 = xor i1 %49, true
  %51 = or i1 %in0, %in45
  %52 = and i1 %51, %50
  %53 = and i1 %in0, %in46
  %54 = xor i1 %53, true
  %55 = or i1 %in0, %in46
  %56 = and i1 %55, %54
  %57 = and i1 %in0, %in47
  %58 = xor i1 %57, true
  %59 = or i1 %in0, %in47
  %60 = and i1 %59, %58
  %61 = and i1 %in0, %in48
  %62 = xor i1 %61, true
  %63 = or i1 %in0, %in48
  %64 = and i1 %63, %62
  %65 = and i1 %in0, %in49
  %66 = xor i1 %65, true
  %67 = or i1 %in0, %in49
  %68 = and i1 %67, %66
  %69 = and i1 %in0, %in50
  %70 = xor i1 %69, true
  %71 = or i1 %in0, %in50
  %72 = and i1 %71, %70
  %73 = and i1 %in0, %in51
  %74 = xor i1 %73, true
  %75 = or i1 %in0, %in51
  %76 = and i1 %75, %74
  %77 = and i1 %in0, %in52
  %78 = xor i1 %77, true
  %79 = or i1 %in0, %in52
  %80 = and i1 %79, %78
  %81 = and i1 %in0, %in53
  %82 = xor i1 %81, true
  %83 = or i1 %in0, %in53
  %84 = and i1 %83, %82
  %85 = and i1 %in0, %in54
  %86 = xor i1 %85, true
  %87 = or i1 %in0, %in54
  %88 = and i1 %87, %86
  %89 = and i1 %in0, %in55
  %90 = xor i1 %89, true
  %91 = or i1 %in0, %in55
  %92 = and i1 %91, %90
  %93 = and i1 %in0, %in56
  %94 = xor i1 %93, true
  %95 = or i1 %in0, %in56
  %96 = and i1 %95, %94
  %97 = and i1 %in0, %in57
  %98 = xor i1 %97, true
  %99 = or i1 %in0, %in57
  %100 = and i1 %99, %98
  %101 = and i1 %in0, %in58
  %102 = xor i1 %101, true
  %103 = or i1 %in0, %in58
  %104 = and i1 %103, %102
  %105 = and i1 %in0, %in59
  %106 = xor i1 %105, true
  %107 = or i1 %in0, %in59
  %108 = and i1 %107, %106
  %109 = and i1 %in0, %in60
  %110 = xor i1 %109, true
  %111 = or i1 %in0, %in60
  %112 = and i1 %111, %110
  %113 = and i1 %in0, %in61
  %114 = xor i1 %113, true
  %115 = or i1 %in0, %in61
  %116 = and i1 %115, %114
  %117 = and i1 %in0, %in62
  %118 = xor i1 %117, true
  %119 = or i1 %in0, %in62
  %120 = and i1 %119, %118
  %121 = and i1 %in0, %in63
  %122 = xor i1 %121, true
  %123 = or i1 %in0, %in63
  %124 = and i1 %123, %122
  %125 = and i1 %in0, %in64
  %126 = xor i1 %125, true
  %127 = or i1 %in0, %in64
  %128 = and i1 %127, %126
  %129 = and i1 %4, %in1
  %130 = and i1 %8, %in2
  %131 = and i1 %12, %in3
  %132 = and i1 %16, %in4
  %133 = and i1 %20, %in5
  %134 = and i1 %24, %in6
  %135 = and i1 %28, %in7
  %136 = and i1 %32, %in8
  %137 = and i1 %36, %in9
  %138 = and i1 %40, %in10
  %139 = and i1 %44, %in11
  %140 = and i1 %48, %in12
  %141 = and i1 %52, %in13
  %142 = and i1 %56, %in14
  %143 = and i1 %60, %in15
  %144 = and i1 %64, %in16
  %145 = and i1 %68, %in17
  %146 = and i1 %72, %in18
  %147 = and i1 %76, %in19
  %148 = and i1 %80, %in20
  %149 = and i1 %84, %in21
  %150 = and i1 %88, %in22
  %151 = and i1 %92, %in23
  %152 = and i1 %96, %in24
  %153 = and i1 %100, %in25
  %154 = and i1 %104, %in26
  %155 = and i1 %108, %in27
  %156 = and i1 %112, %in28
  %157 = and i1 %116, %in29
  %158 = and i1 %120, %in30
  %159 = and i1 %124, %in31
  %160 = and i1 %128, %in32
  %161 = and i1 %129, %in33
  %162 = xor i1 %161, true
  %163 = or i1 %129, %in33
  %164 = and i1 %163, %162
  %165 = and i1 %130, %in34
  %166 = xor i1 %165, true
  %167 = or i1 %130, %in34
  %168 = and i1 %167, %166
  %169 = and i1 %131, %in35
  %170 = xor i1 %169, true
  %171 = or i1 %131, %in35
  %172 = and i1 %171, %170
  %173 = and i1 %132, %in36
  %174 = xor i1 %173, true
  %175 = or i1 %132, %in36
  %176 = and i1 %175, %174
  %177 = and i1 %133, %in37
  %178 = xor i1 %177, true
  %179 = or i1 %133, %in37
  %180 = and i1 %179, %178
  %181 = and i1 %134, %in38
  %182 = xor i1 %181, true
  %183 = or i1 %134, %in38
  %184 = and i1 %183, %182
  %185 = and i1 %135, %in39
  %186 = xor i1 %185, true
  %187 = or i1 %135, %in39
  %188 = and i1 %187, %186
  %189 = and i1 %136, %in40
  %190 = xor i1 %189, true
  %191 = or i1 %136, %in40
  %192 = and i1 %191, %190
  %193 = and i1 %137, %in41
  %194 = xor i1 %193, true
  %195 = or i1 %137, %in41
  %196 = and i1 %195, %194
  %197 = and i1 %138, %in42
  %198 = xor i1 %197, true
  %199 = or i1 %138, %in42
  %200 = and i1 %199, %198
  %201 = and i1 %139, %in43
  %202 = xor i1 %201, true
  %203 = or i1 %139, %in43
  %204 = and i1 %203, %202
  %205 = and i1 %140, %in44
  %206 = xor i1 %205, true
  %207 = or i1 %140, %in44
  %208 = and i1 %207, %206
  %209 = and i1 %141, %in45
  %210 = xor i1 %209, true
  %211 = or i1 %141, %in45
  %212 = and i1 %211, %210
  %213 = and i1 %142, %in46
  %214 = xor i1 %213, true
  %215 = or i1 %142, %in46
  %216 = and i1 %215, %214
  %217 = and i1 %143, %in47
  %218 = xor i1 %217, true
  %219 = or i1 %143, %in47
  %220 = and i1 %219, %218
  %221 = and i1 %144, %in48
  %222 = xor i1 %221, true
  %223 = or i1 %144, %in48
  %224 = and i1 %223, %222
  %225 = and i1 %145, %in49
  %226 = xor i1 %225, true
  %227 = or i1 %145, %in49
  %228 = and i1 %227, %226
  %229 = and i1 %146, %in50
  %230 = xor i1 %229, true
  %231 = or i1 %146, %in50
  %232 = and i1 %231, %230
  %233 = and i1 %147, %in51
  %234 = xor i1 %233, true
  %235 = or i1 %147, %in51
  %236 = and i1 %235, %234
  %237 = and i1 %148, %in52
  %238 = xor i1 %237, true
  %239 = or i1 %148, %in52
  %240 = and i1 %239, %238
  %241 = and i1 %149, %in53
  %242 = xor i1 %241, true
  %243 = or i1 %149, %in53
  %244 = and i1 %243, %242
  %245 = and i1 %150, %in54
  %246 = xor i1 %245, true
  %247 = or i1 %150, %in54
  %248 = and i1 %247, %246
  %249 = and i1 %151, %in55
  %250 = xor i1 %249, true
  %251 = or i1 %151, %in55
  %252 = and i1 %251, %250
  %253 = and i1 %152, %in56
  %254 = xor i1 %253, true
  %255 = or i1 %152, %in56
  %256 = and i1 %255, %254
  %257 = and i1 %153, %in57
  %258 = xor i1 %257, true
  %259 = or i1 %153, %in57
  %260 = and i1 %259, %258
  %261 = and i1 %154, %in58
  %262 = xor i1 %261, true
  %263 = or i1 %154, %in58
  %264 = and i1 %263, %262
  %265 = and i1 %155, %in59
  %266 = xor i1 %265, true
  %267 = or i1 %155, %in59
  %268 = and i1 %267, %266
  %269 = and i1 %156, %in60
  %270 = xor i1 %269, true
  %271 = or i1 %156, %in60
  %272 = and i1 %271, %270
  %273 = and i1 %157, %in61
  %274 = xor i1 %273, true
  %275 = or i1 %157, %in61
  %276 = and i1 %275, %274
  %277 = and i1 %158, %in62
  %278 = xor i1 %277, true
  %279 = or i1 %158, %in62
  %280 = and i1 %279, %278
  %281 = and i1 %159, %in63
  %282 = xor i1 %281, true
  %283 = or i1 %159, %in63
  %284 = and i1 %283, %282
  %285 = and i1 %160, %in64
  %286 = xor i1 %285, true
  %287 = or i1 %160, %in64
  %288 = and i1 %287, %286
  %out0 = insertelement <32 x i1> undef, i1 %164, i32 0
  %out1 = insertelement <32 x i1> %out0, i1 %168, i32 1
  %out2 = insertelement <32 x i1> %out1, i1 %172, i32 2
  %out3 = insertelement <32 x i1> %out2, i1 %176, i32 3
  %out4 = insertelement <32 x i1> %out3, i1 %180, i32 4
  %out5 = insertelement <32 x i1> %out4, i1 %184, i32 5
  %out6 = insertelement <32 x i1> %out5, i1 %188, i32 6
  %out7 = insertelement <32 x i1> %out6, i1 %192, i32 7
  %out8 = insertelement <32 x i1> %out7, i1 %196, i32 8
  %out9 = insertelement <32 x i1> %out8, i1 %200, i32 9
  %out10 = insertelement <32 x i1> %out9, i1 %204, i32 10
  %out11 = insertelement <32 x i1> %out10, i1 %208, i32 11
  %out12 = insertelement <32 x i1> %out11, i1 %212, i32 12
  %out13 = insertelement <32 x i1> %out12, i1 %216, i32 13
  %out14 = insertelement <32 x i1> %out13, i1 %220, i32 14
  %out15 = insertelement <32 x i1> %out14, i1 %224, i32 15
  %out16 = insertelement <32 x i1> %out15, i1 %228, i32 16
  %out17 = insertelement <32 x i1> %out16, i1 %232, i32 17
  %out18 = insertelement <32 x i1> %out17, i1 %236, i32 18
  %out19 = insertelement <32 x i1> %out18, i1 %240, i32 19
  %out20 = insertelement <32 x i1> %out19, i1 %244, i32 20
  %out21 = insertelement <32 x i1> %out20, i1 %248, i32 21
  %out22 = insertelement <32 x i1> %out21, i1 %252, i32 22
  %out23 = insertelement <32 x i1> %out22, i1 %256, i32 23
  %out24 = insertelement <32 x i1> %out23, i1 %260, i32 24
  %out25 = insertelement <32 x i1> %out24, i1 %264, i32 25
  %out26 = insertelement <32 x i1> %out25, i1 %268, i32 26
  %out27 = insertelement <32 x i1> %out26, i1 %272, i32 27
  %out28 = insertelement <32 x i1> %out27, i1 %276, i32 28
  %out29 = insertelement <32 x i1> %out28, i1 %280, i32 29
  %out30 = insertelement <32 x i1> %out29, i1 %284, i32 30
  %out31 = insertelement <32 x i1> %out30, i1 %288, i32 31
  ret <32 x i1> %out31
}

define <32 x i1> @boolean__Z14set_or_clear_3bjj(<65 x i1>) {
entry:
  %in0 = extractelement <65 x i1> %0, i32 0
  %in1 = extractelement <65 x i1> %0, i32 1
  %in2 = extractelement <65 x i1> %0, i32 2
  %in3 = extractelement <65 x i1> %0, i32 3
  %in4 = extractelement <65 x i1> %0, i32 4
  %in5 = extractelement <65 x i1> %0, i32 5
  %in6 = extractelement <65 x i1> %0, i32 6
  %in7 = extractelement <65 x i1> %0, i32 7
  %in8 = extractelement <65 x i1> %0, i32 8
  %in9 = extractelement <65 x i1> %0, i32 9
  %in10 = extractelement <65 x i1> %0, i32 10
  %in11 = extractelement <65 x i1> %0, i32 11
  %in12 = extractelement <65 x i1> %0, i32 12
  %in13 = extractelement <65 x i1> %0, i32 13
  %in14 = extractelement <65 x i1> %0, i32 14
  %in15 = extractelement <65 x i1> %0, i32 15
  %in16 = extractelement <65 x i1> %0, i32 16
  %in17 = extractelement <65 x i1> %0, i32 17
  %in18 = extractelement <65 x i1> %0, i32 18
  %in19 = extractelement <65 x i1> %0, i32 19
  %in20 = extractelement <65 x i1> %0, i32 20
  %in21 = extractelement <65 x i1> %0, i32 21
  %in22 = extractelement <65 x i1> %0, i32 22
  %in23 = extractelement <65 x i1> %0, i32 23
  %in24 = extractelement <65 x i1> %0, i32 24
  %in25 = extractelement <65 x i1> %0, i32 25
  %in26 = extractelement <65 x i1> %0, i32 26
  %in27 = extractelement <65 x i1> %0, i32 27
  %in28 = extractelement <65 x i1> %0, i32 28
  %in29 = extractelement <65 x i1> %0, i32 29
  %in30 = extractelement <65 x i1> %0, i32 30
  %in31 = extractelement <65 x i1> %0, i32 31
  %in32 = extractelement <65 x i1> %0, i32 32
  %in33 = extractelement <65 x i1> %0, i32 33
  %in34 = extractelement <65 x i1> %0, i32 34
  %in35 = extractelement <65 x i1> %0, i32 35
  %in36 = extractelement <65 x i1> %0, i32 36
  %in37 = extractelement <65 x i1> %0, i32 37
  %in38 = extractelement <65 x i1> %0, i32 38
  %in39 = extractelement <65 x i1> %0, i32 39
  %in40 = extractelement <65 x i1> %0, i32 40
  %in41 = extractelement <65 x i1> %0, i32 41
  %in42 = extractelement <65 x i1> %0, i32 42
  %in43 = extractelement <65 x i1> %0, i32 43
  %in44 = extractelement <65 x i1> %0, i32 44
  %in45 = extractelement <65 x i1> %0, i32 45
  %in46 = extractelement <65 x i1> %0, i32 46
  %in47 = extractelement <65 x i1> %0, i32 47
  %in48 = extractelement <65 x i1> %0, i32 48
  %in49 = extractelement <65 x i1> %0, i32 49
  %in50 = extractelement <65 x i1> %0, i32 50
  %in51 = extractelement <65 x i1> %0, i32 51
  %in52 = extractelement <65 x i1> %0, i32 52
  %in53 = extractelement <65 x i1> %0, i32 53
  %in54 = extractelement <65 x i1> %0, i32 54
  %in55 = extractelement <65 x i1> %0, i32 55
  %in56 = extractelement <65 x i1> %0, i32 56
  %in57 = extractelement <65 x i1> %0, i32 57
  %in58 = extractelement <65 x i1> %0, i32 58
  %in59 = extractelement <65 x i1> %0, i32 59
  %in60 = extractelement <65 x i1> %0, i32 60
  %in61 = extractelement <65 x i1> %0, i32 61
  %in62 = extractelement <65 x i1> %0, i32 62
  %in63 = extractelement <65 x i1> %0, i32 63
  %in64 = extractelement <65 x i1> %0, i32 64
  %1 = xor i1 %in1, true
  %2 = xor i1 %in2, true
  %3 = xor i1 %in3, true
  %4 = xor i1 %in4, true
  %5 = xor i1 %in5, true
  %6 = xor i1 %in6, true
  %7 = xor i1 %in7, true
  %8 = xor i1 %in8, true
  %9 = xor i1 %in9, true
  %10 = xor i1 %in10, true
  %11 = xor i1 %in11, true
  %12 = xor i1 %in12, true
  %13 = xor i1 %in13, true
  %14 = xor i1 %in14, true
  %15 = xor i1 %in15, true
  %16 = xor i1 %in16, true
  %17 = xor i1 %in17, true
  %18 = xor i1 %in18, true
  %19 = xor i1 %in19, true
  %20 = xor i1 %in20, true
  %21 = xor i1 %in21, true
  %22 = xor i1 %in22, true
  %23 = xor i1 %in23, true
  %24 = xor i1 %in24, true
  %25 = xor i1 %in25, true
  %26 = xor i1 %in26, true
  %27 = xor i1 %in27, true
  %28 = xor i1 %in28, true
  %29 = xor i1 %in29, true
  %30 = xor i1 %in30, true
  %31 = xor i1 %in31, true
  %32 = xor i1 %in32, true
  %33 = and i1 %in33, %1
  %34 = and i1 %in34, %2
  %35 = and i1 %in35, %3
  %36 = and i1 %in36, %4
  %37 = and i1 %in37, %5
  %38 = and i1 %in38, %6
  %39 = and i1 %in39, %7
  %40 = and i1 %in40, %8
  %41 = and i1 %in41, %9
  %42 = and i1 %in42, %10
  %43 = and i1 %in43, %11
  %44 = and i1 %in44, %12
  %45 = and i1 %in45, %13
  %46 = and i1 %in46, %14
  %47 = and i1 %in47, %15
  %48 = and i1 %in48, %16
  %49 = and i1 %in49, %17
  %50 = and i1 %in50, %18
  %51 = and i1 %in51, %19
  %52 = and i1 %in52, %20
  %53 = and i1 %in53, %21
  %54 = and i1 %in54, %22
  %55 = and i1 %in55, %23
  %56 = and i1 %in56, %24
  %57 = and i1 %in57, %25
  %58 = and i1 %in58, %26
  %59 = and i1 %in59, %27
  %60 = and i1 %in60, %28
  %61 = and i1 %in61, %29
  %62 = and i1 %in62, %30
  %63 = and i1 %in63, %31
  %64 = and i1 %in64, %32
  %65 = and i1 %in0, %in1
  %66 = and i1 %in0, %in2
  %67 = and i1 %in0, %in3
  %68 = and i1 %in0, %in4
  %69 = and i1 %in0, %in5
  %70 = and i1 %in0, %in6
  %71 = and i1 %in0, %in7
  %72 = and i1 %in0, %in8
  %73 = and i1 %in0, %in9
  %74 = and i1 %in0, %in10
  %75 = and i1 %in0, %in11
  %76 = and i1 %in0, %in12
  %77 = and i1 %in0, %in13
  %78 = and i1 %in0, %in14
  %79 = and i1 %in0, %in15
  %80 = and i1 %in0, %in16
  %81 = and i1 %in0, %in17
  %82 = and i1 %in0, %in18
  %83 = and i1 %in0, %in19
  %84 = and i1 %in0, %in20
  %85 = and i1 %in0, %in21
  %86 = and i1 %in0, %in22
  %87 = and i1 %in0, %in23
  %88 = and i1 %in0, %in24
  %89 = and i1 %in0, %in25
  %90 = and i1 %in0, %in26
  %91 = and i1 %in0, %in27
  %92 = and i1 %in0, %in28
  %93 = and i1 %in0, %in29
  %94 = and i1 %in0, %in30
  %95 = and i1 %in0, %in31
  %96 = and i1 %in0, %in32
  %97 = or i1 %33, %65
  %98 = or i1 %34, %66
  %99 = or i1 %35, %67
  %100 = or i1 %36, %68
  %101 = or i1 %37, %69
  %102 = or i1 %38, %70
  %103 = or i1 %39, %71
  %104 = or i1 %40, %72
  %105 = or i1 %41, %73
  %106 = or i1 %42, %74
  %107 = or i1 %43, %75
  %108 = or i1 %44, %76
  %109 = or i1 %45, %77
  %110 = or i1 %46, %78
  %111 = or i1 %47, %79
  %112 = or i1 %48, %80
  %113 = or i1 %49, %81
  %114 = or i1 %50, %82
  %115 = or i1 %51, %83
  %116 = or i1 %52, %84
  %117 = or i1 %53, %85
  %118 = or i1 %54, %86
  %119 = or i1 %55, %87
  %120 = or i1 %56, %88
  %121 = or i1 %57, %89
  %122 = or i1 %58, %90
  %123 = or i1 %59, %91
  %124 = or i1 %60, %92
  %125 = or i1 %61, %93
  %126 = or i1 %62, %94
  %127 = or i1 %63, %95
  %128 = or i1 %64, %96
  %out0 = insertelement <32 x i1> undef, i1 %97, i32 0
  %out1 = insertelement <32 x i1> %out0, i1 %98, i32 1
  %out2 = insertelement <32 x i1> %out1, i1 %99, i32 2
  %out3 = insertelement <32 x i1> %out2, i1 %100, i32 3
  %out4 = insertelement <32 x i1> %out3, i1 %101, i32 4
  %out5 = insertelement <32 x i1> %out4, i1 %102, i32 5
  %out6 = insertelement <32 x i1> %out5, i1 %103, i32 6
  %out7 = insertelement <32 x i1> %out6, i1 %104, i32 7
  %out8 = insertelement <32 x i1> %out7, i1 %105, i32 8
  %out9 = insertelement <32 x i1> %out8, i1 %106, i32 9
  %out10 = insertelement <32 x i1> %out9, i1 %107, i32 10
  %out11 = insertelement <32 x i1> %out10, i1 %108, i32 11
  %out12 = insertelement <32 x i1> %out11, i1 %109, i32 12
  %out13 = insertelement <32 x i1> %out12, i1 %110, i32 13
  %out14 = insertelement <32 x i1> %out13, i1 %111, i32 14
  %out15 = insertelement <32 x i1> %out14, i1 %112, i32 15
  %out16 = insertelement <32 x i1> %out15, i1 %113, i32 16
  %out17 = insertelement <32 x i1> %out16, i1 %114, i32 17
  %out18 = insertelement <32 x i1> %out17, i1 %115, i32 18
  %out19 = insertelement <32 x i1> %out18, i1 %116, i32 19
  %out20 = insertelement <32 x i1> %out19, i1 %117, i32 20
  %out21 = insertelement <32 x i1> %out20, i1 %118, i32 21
  %out22 = insertelement <32 x i1> %out21, i1 %119, i32 22
  %out23 = insertelement <32 x i1> %out22, i1 %120, i32 23
  %out24 = insertelement <32 x i1> %out23, i1 %121, i32 24
  %out25 = insertelement <32 x i1> %out24, i1 %122, i32 25
  %out26 = insertelement <32 x i1> %out25, i1 %123, i32 26
  %out27 = insertelement <32 x i1> %out26, i1 %124, i32 27
  %out28 = insertelement <32 x i1> %out27, i1 %125, i32 28
  %out29 = insertelement <32 x i1> %out28, i1 %126, i32 29
  %out30 = insertelement <32 x i1> %out29, i1 %127, i32 30
  %out31 = insertelement <32 x i1> %out30, i1 %128, i32 31
  ret <32 x i1> %out31
}

define <1 x i1> @boolean__Z22CHECK_set_or_clear_1_2bjj(<65 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <1 x i1> @boolean__Z22CHECK_set_or_clear_1_3bjj(<65 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <1 x i1> @boolean__Z22CHECK_set_or_clear_2_3bjj(<65 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <32 x i1> @boolean__Z16count_bits_set_1j(<32 x i1>) {
entry:
  %in0 = extractelement <32 x i1> %0, i32 0
  %in1 = extractelement <32 x i1> %0, i32 1
  %in2 = extractelement <32 x i1> %0, i32 2
  %in3 = extractelement <32 x i1> %0, i32 3
  %in4 = extractelement <32 x i1> %0, i32 4
  %in5 = extractelement <32 x i1> %0, i32 5
  %in6 = extractelement <32 x i1> %0, i32 6
  %in7 = extractelement <32 x i1> %0, i32 7
  %in8 = extractelement <32 x i1> %0, i32 8
  %in9 = extractelement <32 x i1> %0, i32 9
  %in10 = extractelement <32 x i1> %0, i32 10
  %in11 = extractelement <32 x i1> %0, i32 11
  %in12 = extractelement <32 x i1> %0, i32 12
  %in13 = extractelement <32 x i1> %0, i32 13
  %in14 = extractelement <32 x i1> %0, i32 14
  %in15 = extractelement <32 x i1> %0, i32 15
  %in16 = extractelement <32 x i1> %0, i32 16
  %in17 = extractelement <32 x i1> %0, i32 17
  %in18 = extractelement <32 x i1> %0, i32 18
  %in19 = extractelement <32 x i1> %0, i32 19
  %in20 = extractelement <32 x i1> %0, i32 20
  %in21 = extractelement <32 x i1> %0, i32 21
  %in22 = extractelement <32 x i1> %0, i32 22
  %in23 = extractelement <32 x i1> %0, i32 23
  %in24 = extractelement <32 x i1> %0, i32 24
  %in25 = extractelement <32 x i1> %0, i32 25
  %in26 = extractelement <32 x i1> %0, i32 26
  %in27 = extractelement <32 x i1> %0, i32 27
  %in28 = extractelement <32 x i1> %0, i32 28
  %in29 = extractelement <32 x i1> %0, i32 29
  %in30 = extractelement <32 x i1> %0, i32 30
  %in31 = extractelement <32 x i1> %0, i32 31
  %1 = and i1 %in1, %in0
  %2 = xor i1 %1, true
  %3 = or i1 %in1, %in0
  %4 = and i1 %3, %2
  %5 = and i1 %in2, %4
  %6 = xor i1 %5, true
  %7 = or i1 %in2, %4
  %8 = and i1 %7, %6
  %9 = or i1 %1, %5
  %10 = and i1 %in3, %8
  %11 = xor i1 %10, true
  %12 = or i1 %in3, %8
  %13 = and i1 %12, %11
  %14 = and i1 %9, %10
  %15 = xor i1 %14, true
  %16 = or i1 %9, %10
  %17 = and i1 %16, %15
  %18 = and i1 %in4, %13
  %19 = xor i1 %18, true
  %20 = or i1 %in4, %13
  %21 = and i1 %20, %19
  %22 = and i1 %17, %18
  %23 = xor i1 %22, true
  %24 = or i1 %17, %18
  %25 = and i1 %24, %23
  %26 = or i1 %14, %22
  %27 = and i1 %in5, %21
  %28 = xor i1 %27, true
  %29 = or i1 %in5, %21
  %30 = and i1 %29, %28
  %31 = and i1 %25, %27
  %32 = xor i1 %31, true
  %33 = or i1 %25, %27
  %34 = and i1 %33, %32
  %35 = and i1 %26, %31
  %36 = xor i1 %35, true
  %37 = or i1 %26, %31
  %38 = and i1 %37, %36
  %39 = and i1 %in6, %30
  %40 = xor i1 %39, true
  %41 = or i1 %in6, %30
  %42 = and i1 %41, %40
  %43 = and i1 %34, %39
  %44 = xor i1 %43, true
  %45 = or i1 %34, %39
  %46 = and i1 %45, %44
  %47 = and i1 %38, %43
  %48 = xor i1 %47, true
  %49 = or i1 %38, %43
  %50 = and i1 %49, %48
  %51 = or i1 %35, %47
  %52 = and i1 %in7, %42
  %53 = xor i1 %52, true
  %54 = or i1 %in7, %42
  %55 = and i1 %54, %53
  %56 = and i1 %46, %52
  %57 = xor i1 %56, true
  %58 = or i1 %46, %52
  %59 = and i1 %58, %57
  %60 = and i1 %50, %56
  %61 = xor i1 %60, true
  %62 = or i1 %50, %56
  %63 = and i1 %62, %61
  %64 = and i1 %51, %60
  %65 = xor i1 %64, true
  %66 = or i1 %51, %60
  %67 = and i1 %66, %65
  %68 = and i1 %in8, %55
  %69 = xor i1 %68, true
  %70 = or i1 %in8, %55
  %71 = and i1 %70, %69
  %72 = and i1 %59, %68
  %73 = xor i1 %72, true
  %74 = or i1 %59, %68
  %75 = and i1 %74, %73
  %76 = and i1 %63, %72
  %77 = xor i1 %76, true
  %78 = or i1 %63, %72
  %79 = and i1 %78, %77
  %80 = and i1 %67, %76
  %81 = xor i1 %80, true
  %82 = or i1 %67, %76
  %83 = and i1 %82, %81
  %84 = or i1 %64, %80
  %85 = and i1 %in9, %71
  %86 = xor i1 %85, true
  %87 = or i1 %in9, %71
  %88 = and i1 %87, %86
  %89 = and i1 %75, %85
  %90 = xor i1 %89, true
  %91 = or i1 %75, %85
  %92 = and i1 %91, %90
  %93 = and i1 %79, %89
  %94 = xor i1 %93, true
  %95 = or i1 %79, %89
  %96 = and i1 %95, %94
  %97 = and i1 %83, %93
  %98 = xor i1 %97, true
  %99 = or i1 %83, %93
  %100 = and i1 %99, %98
  %101 = and i1 %84, %97
  %102 = xor i1 %101, true
  %103 = or i1 %84, %97
  %104 = and i1 %103, %102
  %105 = and i1 %in10, %88
  %106 = xor i1 %105, true
  %107 = or i1 %in10, %88
  %108 = and i1 %107, %106
  %109 = and i1 %92, %105
  %110 = xor i1 %109, true
  %111 = or i1 %92, %105
  %112 = and i1 %111, %110
  %113 = and i1 %96, %109
  %114 = xor i1 %113, true
  %115 = or i1 %96, %109
  %116 = and i1 %115, %114
  %117 = and i1 %100, %113
  %118 = xor i1 %117, true
  %119 = or i1 %100, %113
  %120 = and i1 %119, %118
  %121 = and i1 %104, %117
  %122 = xor i1 %121, true
  %123 = or i1 %104, %117
  %124 = and i1 %123, %122
  %125 = or i1 %101, %121
  %126 = and i1 %in11, %108
  %127 = xor i1 %126, true
  %128 = or i1 %in11, %108
  %129 = and i1 %128, %127
  %130 = and i1 %112, %126
  %131 = xor i1 %130, true
  %132 = or i1 %112, %126
  %133 = and i1 %132, %131
  %134 = and i1 %116, %130
  %135 = xor i1 %134, true
  %136 = or i1 %116, %130
  %137 = and i1 %136, %135
  %138 = and i1 %120, %134
  %139 = xor i1 %138, true
  %140 = or i1 %120, %134
  %141 = and i1 %140, %139
  %142 = and i1 %124, %138
  %143 = xor i1 %142, true
  %144 = or i1 %124, %138
  %145 = and i1 %144, %143
  %146 = and i1 %125, %142
  %147 = xor i1 %146, true
  %148 = or i1 %125, %142
  %149 = and i1 %148, %147
  %150 = and i1 %in12, %129
  %151 = xor i1 %150, true
  %152 = or i1 %in12, %129
  %153 = and i1 %152, %151
  %154 = and i1 %133, %150
  %155 = xor i1 %154, true
  %156 = or i1 %133, %150
  %157 = and i1 %156, %155
  %158 = and i1 %137, %154
  %159 = xor i1 %158, true
  %160 = or i1 %137, %154
  %161 = and i1 %160, %159
  %162 = and i1 %141, %158
  %163 = xor i1 %162, true
  %164 = or i1 %141, %158
  %165 = and i1 %164, %163
  %166 = and i1 %145, %162
  %167 = xor i1 %166, true
  %168 = or i1 %145, %162
  %169 = and i1 %168, %167
  %170 = and i1 %149, %166
  %171 = xor i1 %170, true
  %172 = or i1 %149, %166
  %173 = and i1 %172, %171
  %174 = or i1 %146, %170
  %175 = and i1 %in13, %153
  %176 = xor i1 %175, true
  %177 = or i1 %in13, %153
  %178 = and i1 %177, %176
  %179 = and i1 %157, %175
  %180 = xor i1 %179, true
  %181 = or i1 %157, %175
  %182 = and i1 %181, %180
  %183 = and i1 %161, %179
  %184 = xor i1 %183, true
  %185 = or i1 %161, %179
  %186 = and i1 %185, %184
  %187 = and i1 %165, %183
  %188 = xor i1 %187, true
  %189 = or i1 %165, %183
  %190 = and i1 %189, %188
  %191 = and i1 %169, %187
  %192 = xor i1 %191, true
  %193 = or i1 %169, %187
  %194 = and i1 %193, %192
  %195 = and i1 %173, %191
  %196 = xor i1 %195, true
  %197 = or i1 %173, %191
  %198 = and i1 %197, %196
  %199 = and i1 %174, %195
  %200 = xor i1 %199, true
  %201 = or i1 %174, %195
  %202 = and i1 %201, %200
  %203 = and i1 %in14, %178
  %204 = xor i1 %203, true
  %205 = or i1 %in14, %178
  %206 = and i1 %205, %204
  %207 = and i1 %182, %203
  %208 = xor i1 %207, true
  %209 = or i1 %182, %203
  %210 = and i1 %209, %208
  %211 = and i1 %186, %207
  %212 = xor i1 %211, true
  %213 = or i1 %186, %207
  %214 = and i1 %213, %212
  %215 = and i1 %190, %211
  %216 = xor i1 %215, true
  %217 = or i1 %190, %211
  %218 = and i1 %217, %216
  %219 = and i1 %194, %215
  %220 = xor i1 %219, true
  %221 = or i1 %194, %215
  %222 = and i1 %221, %220
  %223 = and i1 %198, %219
  %224 = xor i1 %223, true
  %225 = or i1 %198, %219
  %226 = and i1 %225, %224
  %227 = and i1 %202, %223
  %228 = xor i1 %227, true
  %229 = or i1 %202, %223
  %230 = and i1 %229, %228
  %231 = or i1 %199, %227
  %232 = and i1 %in15, %206
  %233 = xor i1 %232, true
  %234 = or i1 %in15, %206
  %235 = and i1 %234, %233
  %236 = and i1 %210, %232
  %237 = xor i1 %236, true
  %238 = or i1 %210, %232
  %239 = and i1 %238, %237
  %240 = and i1 %214, %236
  %241 = xor i1 %240, true
  %242 = or i1 %214, %236
  %243 = and i1 %242, %241
  %244 = and i1 %218, %240
  %245 = xor i1 %244, true
  %246 = or i1 %218, %240
  %247 = and i1 %246, %245
  %248 = and i1 %222, %244
  %249 = xor i1 %248, true
  %250 = or i1 %222, %244
  %251 = and i1 %250, %249
  %252 = and i1 %226, %248
  %253 = xor i1 %252, true
  %254 = or i1 %226, %248
  %255 = and i1 %254, %253
  %256 = and i1 %230, %252
  %257 = xor i1 %256, true
  %258 = or i1 %230, %252
  %259 = and i1 %258, %257
  %260 = and i1 %231, %256
  %261 = xor i1 %260, true
  %262 = or i1 %231, %256
  %263 = and i1 %262, %261
  %264 = and i1 %in16, %235
  %265 = xor i1 %264, true
  %266 = or i1 %in16, %235
  %267 = and i1 %266, %265
  %268 = and i1 %239, %264
  %269 = xor i1 %268, true
  %270 = or i1 %239, %264
  %271 = and i1 %270, %269
  %272 = and i1 %243, %268
  %273 = xor i1 %272, true
  %274 = or i1 %243, %268
  %275 = and i1 %274, %273
  %276 = and i1 %247, %272
  %277 = xor i1 %276, true
  %278 = or i1 %247, %272
  %279 = and i1 %278, %277
  %280 = and i1 %251, %276
  %281 = xor i1 %280, true
  %282 = or i1 %251, %276
  %283 = and i1 %282, %281
  %284 = and i1 %255, %280
  %285 = xor i1 %284, true
  %286 = or i1 %255, %280
  %287 = and i1 %286, %285
  %288 = and i1 %259, %284
  %289 = xor i1 %288, true
  %290 = or i1 %259, %284
  %291 = and i1 %290, %289
  %292 = and i1 %263, %288
  %293 = xor i1 %292, true
  %294 = or i1 %263, %288
  %295 = and i1 %294, %293
  %296 = or i1 %260, %292
  %297 = and i1 %in17, %267
  %298 = xor i1 %297, true
  %299 = or i1 %in17, %267
  %300 = and i1 %299, %298
  %301 = and i1 %271, %297
  %302 = xor i1 %301, true
  %303 = or i1 %271, %297
  %304 = and i1 %303, %302
  %305 = and i1 %275, %301
  %306 = xor i1 %305, true
  %307 = or i1 %275, %301
  %308 = and i1 %307, %306
  %309 = and i1 %279, %305
  %310 = xor i1 %309, true
  %311 = or i1 %279, %305
  %312 = and i1 %311, %310
  %313 = and i1 %283, %309
  %314 = xor i1 %313, true
  %315 = or i1 %283, %309
  %316 = and i1 %315, %314
  %317 = and i1 %287, %313
  %318 = xor i1 %317, true
  %319 = or i1 %287, %313
  %320 = and i1 %319, %318
  %321 = and i1 %291, %317
  %322 = xor i1 %321, true
  %323 = or i1 %291, %317
  %324 = and i1 %323, %322
  %325 = and i1 %295, %321
  %326 = xor i1 %325, true
  %327 = or i1 %295, %321
  %328 = and i1 %327, %326
  %329 = and i1 %296, %325
  %330 = xor i1 %329, true
  %331 = or i1 %296, %325
  %332 = and i1 %331, %330
  %333 = and i1 %in18, %300
  %334 = xor i1 %333, true
  %335 = or i1 %in18, %300
  %336 = and i1 %335, %334
  %337 = and i1 %304, %333
  %338 = xor i1 %337, true
  %339 = or i1 %304, %333
  %340 = and i1 %339, %338
  %341 = and i1 %308, %337
  %342 = xor i1 %341, true
  %343 = or i1 %308, %337
  %344 = and i1 %343, %342
  %345 = and i1 %312, %341
  %346 = xor i1 %345, true
  %347 = or i1 %312, %341
  %348 = and i1 %347, %346
  %349 = and i1 %316, %345
  %350 = xor i1 %349, true
  %351 = or i1 %316, %345
  %352 = and i1 %351, %350
  %353 = and i1 %320, %349
  %354 = xor i1 %353, true
  %355 = or i1 %320, %349
  %356 = and i1 %355, %354
  %357 = and i1 %324, %353
  %358 = xor i1 %357, true
  %359 = or i1 %324, %353
  %360 = and i1 %359, %358
  %361 = and i1 %328, %357
  %362 = xor i1 %361, true
  %363 = or i1 %328, %357
  %364 = and i1 %363, %362
  %365 = and i1 %332, %361
  %366 = xor i1 %365, true
  %367 = or i1 %332, %361
  %368 = and i1 %367, %366
  %369 = or i1 %329, %365
  %370 = and i1 %in19, %336
  %371 = xor i1 %370, true
  %372 = or i1 %in19, %336
  %373 = and i1 %372, %371
  %374 = and i1 %340, %370
  %375 = xor i1 %374, true
  %376 = or i1 %340, %370
  %377 = and i1 %376, %375
  %378 = and i1 %344, %374
  %379 = xor i1 %378, true
  %380 = or i1 %344, %374
  %381 = and i1 %380, %379
  %382 = and i1 %348, %378
  %383 = xor i1 %382, true
  %384 = or i1 %348, %378
  %385 = and i1 %384, %383
  %386 = and i1 %352, %382
  %387 = xor i1 %386, true
  %388 = or i1 %352, %382
  %389 = and i1 %388, %387
  %390 = and i1 %356, %386
  %391 = xor i1 %390, true
  %392 = or i1 %356, %386
  %393 = and i1 %392, %391
  %394 = and i1 %360, %390
  %395 = xor i1 %394, true
  %396 = or i1 %360, %390
  %397 = and i1 %396, %395
  %398 = and i1 %364, %394
  %399 = xor i1 %398, true
  %400 = or i1 %364, %394
  %401 = and i1 %400, %399
  %402 = and i1 %368, %398
  %403 = xor i1 %402, true
  %404 = or i1 %368, %398
  %405 = and i1 %404, %403
  %406 = and i1 %369, %402
  %407 = xor i1 %406, true
  %408 = or i1 %369, %402
  %409 = and i1 %408, %407
  %410 = and i1 %in20, %373
  %411 = xor i1 %410, true
  %412 = or i1 %in20, %373
  %413 = and i1 %412, %411
  %414 = and i1 %377, %410
  %415 = xor i1 %414, true
  %416 = or i1 %377, %410
  %417 = and i1 %416, %415
  %418 = and i1 %381, %414
  %419 = xor i1 %418, true
  %420 = or i1 %381, %414
  %421 = and i1 %420, %419
  %422 = and i1 %385, %418
  %423 = xor i1 %422, true
  %424 = or i1 %385, %418
  %425 = and i1 %424, %423
  %426 = and i1 %389, %422
  %427 = xor i1 %426, true
  %428 = or i1 %389, %422
  %429 = and i1 %428, %427
  %430 = and i1 %393, %426
  %431 = xor i1 %430, true
  %432 = or i1 %393, %426
  %433 = and i1 %432, %431
  %434 = and i1 %397, %430
  %435 = xor i1 %434, true
  %436 = or i1 %397, %430
  %437 = and i1 %436, %435
  %438 = and i1 %401, %434
  %439 = xor i1 %438, true
  %440 = or i1 %401, %434
  %441 = and i1 %440, %439
  %442 = and i1 %405, %438
  %443 = xor i1 %442, true
  %444 = or i1 %405, %438
  %445 = and i1 %444, %443
  %446 = and i1 %409, %442
  %447 = xor i1 %446, true
  %448 = or i1 %409, %442
  %449 = and i1 %448, %447
  %450 = or i1 %406, %446
  %451 = and i1 %in21, %413
  %452 = xor i1 %451, true
  %453 = or i1 %in21, %413
  %454 = and i1 %453, %452
  %455 = and i1 %417, %451
  %456 = xor i1 %455, true
  %457 = or i1 %417, %451
  %458 = and i1 %457, %456
  %459 = and i1 %421, %455
  %460 = xor i1 %459, true
  %461 = or i1 %421, %455
  %462 = and i1 %461, %460
  %463 = and i1 %425, %459
  %464 = xor i1 %463, true
  %465 = or i1 %425, %459
  %466 = and i1 %465, %464
  %467 = and i1 %429, %463
  %468 = xor i1 %467, true
  %469 = or i1 %429, %463
  %470 = and i1 %469, %468
  %471 = and i1 %433, %467
  %472 = xor i1 %471, true
  %473 = or i1 %433, %467
  %474 = and i1 %473, %472
  %475 = and i1 %437, %471
  %476 = xor i1 %475, true
  %477 = or i1 %437, %471
  %478 = and i1 %477, %476
  %479 = and i1 %441, %475
  %480 = xor i1 %479, true
  %481 = or i1 %441, %475
  %482 = and i1 %481, %480
  %483 = and i1 %445, %479
  %484 = xor i1 %483, true
  %485 = or i1 %445, %479
  %486 = and i1 %485, %484
  %487 = and i1 %449, %483
  %488 = xor i1 %487, true
  %489 = or i1 %449, %483
  %490 = and i1 %489, %488
  %491 = and i1 %450, %487
  %492 = xor i1 %491, true
  %493 = or i1 %450, %487
  %494 = and i1 %493, %492
  %495 = and i1 %in22, %454
  %496 = xor i1 %495, true
  %497 = or i1 %in22, %454
  %498 = and i1 %497, %496
  %499 = and i1 %458, %495
  %500 = xor i1 %499, true
  %501 = or i1 %458, %495
  %502 = and i1 %501, %500
  %503 = and i1 %462, %499
  %504 = xor i1 %503, true
  %505 = or i1 %462, %499
  %506 = and i1 %505, %504
  %507 = and i1 %466, %503
  %508 = xor i1 %507, true
  %509 = or i1 %466, %503
  %510 = and i1 %509, %508
  %511 = and i1 %470, %507
  %512 = xor i1 %511, true
  %513 = or i1 %470, %507
  %514 = and i1 %513, %512
  %515 = and i1 %474, %511
  %516 = xor i1 %515, true
  %517 = or i1 %474, %511
  %518 = and i1 %517, %516
  %519 = and i1 %478, %515
  %520 = xor i1 %519, true
  %521 = or i1 %478, %515
  %522 = and i1 %521, %520
  %523 = and i1 %482, %519
  %524 = xor i1 %523, true
  %525 = or i1 %482, %519
  %526 = and i1 %525, %524
  %527 = and i1 %486, %523
  %528 = xor i1 %527, true
  %529 = or i1 %486, %523
  %530 = and i1 %529, %528
  %531 = and i1 %490, %527
  %532 = xor i1 %531, true
  %533 = or i1 %490, %527
  %534 = and i1 %533, %532
  %535 = and i1 %494, %531
  %536 = xor i1 %535, true
  %537 = or i1 %494, %531
  %538 = and i1 %537, %536
  %539 = or i1 %491, %535
  %540 = and i1 %in23, %498
  %541 = xor i1 %540, true
  %542 = or i1 %in23, %498
  %543 = and i1 %542, %541
  %544 = and i1 %502, %540
  %545 = xor i1 %544, true
  %546 = or i1 %502, %540
  %547 = and i1 %546, %545
  %548 = and i1 %506, %544
  %549 = xor i1 %548, true
  %550 = or i1 %506, %544
  %551 = and i1 %550, %549
  %552 = and i1 %510, %548
  %553 = xor i1 %552, true
  %554 = or i1 %510, %548
  %555 = and i1 %554, %553
  %556 = and i1 %514, %552
  %557 = xor i1 %556, true
  %558 = or i1 %514, %552
  %559 = and i1 %558, %557
  %560 = and i1 %518, %556
  %561 = xor i1 %560, true
  %562 = or i1 %518, %556
  %563 = and i1 %562, %561
  %564 = and i1 %522, %560
  %565 = xor i1 %564, true
  %566 = or i1 %522, %560
  %567 = and i1 %566, %565
  %568 = and i1 %526, %564
  %569 = xor i1 %568, true
  %570 = or i1 %526, %564
  %571 = and i1 %570, %569
  %572 = and i1 %530, %568
  %573 = xor i1 %572, true
  %574 = or i1 %530, %568
  %575 = and i1 %574, %573
  %576 = and i1 %534, %572
  %577 = xor i1 %576, true
  %578 = or i1 %534, %572
  %579 = and i1 %578, %577
  %580 = and i1 %538, %576
  %581 = xor i1 %580, true
  %582 = or i1 %538, %576
  %583 = and i1 %582, %581
  %584 = and i1 %539, %580
  %585 = xor i1 %584, true
  %586 = or i1 %539, %580
  %587 = and i1 %586, %585
  %588 = and i1 %in24, %543
  %589 = xor i1 %588, true
  %590 = or i1 %in24, %543
  %591 = and i1 %590, %589
  %592 = and i1 %547, %588
  %593 = xor i1 %592, true
  %594 = or i1 %547, %588
  %595 = and i1 %594, %593
  %596 = and i1 %551, %592
  %597 = xor i1 %596, true
  %598 = or i1 %551, %592
  %599 = and i1 %598, %597
  %600 = and i1 %555, %596
  %601 = xor i1 %600, true
  %602 = or i1 %555, %596
  %603 = and i1 %602, %601
  %604 = and i1 %559, %600
  %605 = xor i1 %604, true
  %606 = or i1 %559, %600
  %607 = and i1 %606, %605
  %608 = and i1 %563, %604
  %609 = xor i1 %608, true
  %610 = or i1 %563, %604
  %611 = and i1 %610, %609
  %612 = and i1 %567, %608
  %613 = xor i1 %612, true
  %614 = or i1 %567, %608
  %615 = and i1 %614, %613
  %616 = and i1 %571, %612
  %617 = xor i1 %616, true
  %618 = or i1 %571, %612
  %619 = and i1 %618, %617
  %620 = and i1 %575, %616
  %621 = xor i1 %620, true
  %622 = or i1 %575, %616
  %623 = and i1 %622, %621
  %624 = and i1 %579, %620
  %625 = xor i1 %624, true
  %626 = or i1 %579, %620
  %627 = and i1 %626, %625
  %628 = and i1 %583, %624
  %629 = xor i1 %628, true
  %630 = or i1 %583, %624
  %631 = and i1 %630, %629
  %632 = and i1 %587, %628
  %633 = xor i1 %632, true
  %634 = or i1 %587, %628
  %635 = and i1 %634, %633
  %636 = or i1 %584, %632
  %637 = and i1 %in25, %591
  %638 = xor i1 %637, true
  %639 = or i1 %in25, %591
  %640 = and i1 %639, %638
  %641 = and i1 %595, %637
  %642 = xor i1 %641, true
  %643 = or i1 %595, %637
  %644 = and i1 %643, %642
  %645 = and i1 %599, %641
  %646 = xor i1 %645, true
  %647 = or i1 %599, %641
  %648 = and i1 %647, %646
  %649 = and i1 %603, %645
  %650 = xor i1 %649, true
  %651 = or i1 %603, %645
  %652 = and i1 %651, %650
  %653 = and i1 %607, %649
  %654 = xor i1 %653, true
  %655 = or i1 %607, %649
  %656 = and i1 %655, %654
  %657 = and i1 %611, %653
  %658 = xor i1 %657, true
  %659 = or i1 %611, %653
  %660 = and i1 %659, %658
  %661 = and i1 %615, %657
  %662 = xor i1 %661, true
  %663 = or i1 %615, %657
  %664 = and i1 %663, %662
  %665 = and i1 %619, %661
  %666 = xor i1 %665, true
  %667 = or i1 %619, %661
  %668 = and i1 %667, %666
  %669 = and i1 %623, %665
  %670 = xor i1 %669, true
  %671 = or i1 %623, %665
  %672 = and i1 %671, %670
  %673 = and i1 %627, %669
  %674 = xor i1 %673, true
  %675 = or i1 %627, %669
  %676 = and i1 %675, %674
  %677 = and i1 %631, %673
  %678 = xor i1 %677, true
  %679 = or i1 %631, %673
  %680 = and i1 %679, %678
  %681 = and i1 %635, %677
  %682 = xor i1 %681, true
  %683 = or i1 %635, %677
  %684 = and i1 %683, %682
  %685 = and i1 %636, %681
  %686 = xor i1 %685, true
  %687 = or i1 %636, %681
  %688 = and i1 %687, %686
  %689 = and i1 %in26, %640
  %690 = xor i1 %689, true
  %691 = or i1 %in26, %640
  %692 = and i1 %691, %690
  %693 = and i1 %644, %689
  %694 = xor i1 %693, true
  %695 = or i1 %644, %689
  %696 = and i1 %695, %694
  %697 = and i1 %648, %693
  %698 = xor i1 %697, true
  %699 = or i1 %648, %693
  %700 = and i1 %699, %698
  %701 = and i1 %652, %697
  %702 = xor i1 %701, true
  %703 = or i1 %652, %697
  %704 = and i1 %703, %702
  %705 = and i1 %656, %701
  %706 = xor i1 %705, true
  %707 = or i1 %656, %701
  %708 = and i1 %707, %706
  %709 = and i1 %660, %705
  %710 = xor i1 %709, true
  %711 = or i1 %660, %705
  %712 = and i1 %711, %710
  %713 = and i1 %664, %709
  %714 = xor i1 %713, true
  %715 = or i1 %664, %709
  %716 = and i1 %715, %714
  %717 = and i1 %668, %713
  %718 = xor i1 %717, true
  %719 = or i1 %668, %713
  %720 = and i1 %719, %718
  %721 = and i1 %672, %717
  %722 = xor i1 %721, true
  %723 = or i1 %672, %717
  %724 = and i1 %723, %722
  %725 = and i1 %676, %721
  %726 = xor i1 %725, true
  %727 = or i1 %676, %721
  %728 = and i1 %727, %726
  %729 = and i1 %680, %725
  %730 = xor i1 %729, true
  %731 = or i1 %680, %725
  %732 = and i1 %731, %730
  %733 = and i1 %684, %729
  %734 = xor i1 %733, true
  %735 = or i1 %684, %729
  %736 = and i1 %735, %734
  %737 = and i1 %688, %733
  %738 = xor i1 %737, true
  %739 = or i1 %688, %733
  %740 = and i1 %739, %738
  %741 = or i1 %685, %737
  %742 = and i1 %in27, %692
  %743 = xor i1 %742, true
  %744 = or i1 %in27, %692
  %745 = and i1 %744, %743
  %746 = and i1 %696, %742
  %747 = xor i1 %746, true
  %748 = or i1 %696, %742
  %749 = and i1 %748, %747
  %750 = and i1 %700, %746
  %751 = xor i1 %750, true
  %752 = or i1 %700, %746
  %753 = and i1 %752, %751
  %754 = and i1 %704, %750
  %755 = xor i1 %754, true
  %756 = or i1 %704, %750
  %757 = and i1 %756, %755
  %758 = and i1 %708, %754
  %759 = xor i1 %758, true
  %760 = or i1 %708, %754
  %761 = and i1 %760, %759
  %762 = and i1 %712, %758
  %763 = xor i1 %762, true
  %764 = or i1 %712, %758
  %765 = and i1 %764, %763
  %766 = and i1 %716, %762
  %767 = xor i1 %766, true
  %768 = or i1 %716, %762
  %769 = and i1 %768, %767
  %770 = and i1 %720, %766
  %771 = xor i1 %770, true
  %772 = or i1 %720, %766
  %773 = and i1 %772, %771
  %774 = and i1 %724, %770
  %775 = xor i1 %774, true
  %776 = or i1 %724, %770
  %777 = and i1 %776, %775
  %778 = and i1 %728, %774
  %779 = xor i1 %778, true
  %780 = or i1 %728, %774
  %781 = and i1 %780, %779
  %782 = and i1 %732, %778
  %783 = xor i1 %782, true
  %784 = or i1 %732, %778
  %785 = and i1 %784, %783
  %786 = and i1 %736, %782
  %787 = xor i1 %786, true
  %788 = or i1 %736, %782
  %789 = and i1 %788, %787
  %790 = and i1 %740, %786
  %791 = xor i1 %790, true
  %792 = or i1 %740, %786
  %793 = and i1 %792, %791
  %794 = and i1 %741, %790
  %795 = xor i1 %794, true
  %796 = or i1 %741, %790
  %797 = and i1 %796, %795
  %798 = and i1 %in28, %745
  %799 = xor i1 %798, true
  %800 = or i1 %in28, %745
  %801 = and i1 %800, %799
  %802 = and i1 %749, %798
  %803 = xor i1 %802, true
  %804 = or i1 %749, %798
  %805 = and i1 %804, %803
  %806 = and i1 %753, %802
  %807 = xor i1 %806, true
  %808 = or i1 %753, %802
  %809 = and i1 %808, %807
  %810 = and i1 %757, %806
  %811 = xor i1 %810, true
  %812 = or i1 %757, %806
  %813 = and i1 %812, %811
  %814 = and i1 %761, %810
  %815 = xor i1 %814, true
  %816 = or i1 %761, %810
  %817 = and i1 %816, %815
  %818 = and i1 %765, %814
  %819 = xor i1 %818, true
  %820 = or i1 %765, %814
  %821 = and i1 %820, %819
  %822 = and i1 %769, %818
  %823 = xor i1 %822, true
  %824 = or i1 %769, %818
  %825 = and i1 %824, %823
  %826 = and i1 %773, %822
  %827 = xor i1 %826, true
  %828 = or i1 %773, %822
  %829 = and i1 %828, %827
  %830 = and i1 %777, %826
  %831 = xor i1 %830, true
  %832 = or i1 %777, %826
  %833 = and i1 %832, %831
  %834 = and i1 %781, %830
  %835 = xor i1 %834, true
  %836 = or i1 %781, %830
  %837 = and i1 %836, %835
  %838 = and i1 %785, %834
  %839 = xor i1 %838, true
  %840 = or i1 %785, %834
  %841 = and i1 %840, %839
  %842 = and i1 %789, %838
  %843 = xor i1 %842, true
  %844 = or i1 %789, %838
  %845 = and i1 %844, %843
  %846 = and i1 %793, %842
  %847 = xor i1 %846, true
  %848 = or i1 %793, %842
  %849 = and i1 %848, %847
  %850 = and i1 %797, %846
  %851 = xor i1 %850, true
  %852 = or i1 %797, %846
  %853 = and i1 %852, %851
  %854 = or i1 %794, %850
  %855 = and i1 %in29, %801
  %856 = xor i1 %855, true
  %857 = or i1 %in29, %801
  %858 = and i1 %857, %856
  %859 = and i1 %805, %855
  %860 = xor i1 %859, true
  %861 = or i1 %805, %855
  %862 = and i1 %861, %860
  %863 = and i1 %809, %859
  %864 = xor i1 %863, true
  %865 = or i1 %809, %859
  %866 = and i1 %865, %864
  %867 = and i1 %813, %863
  %868 = xor i1 %867, true
  %869 = or i1 %813, %863
  %870 = and i1 %869, %868
  %871 = and i1 %817, %867
  %872 = xor i1 %871, true
  %873 = or i1 %817, %867
  %874 = and i1 %873, %872
  %875 = and i1 %821, %871
  %876 = xor i1 %875, true
  %877 = or i1 %821, %871
  %878 = and i1 %877, %876
  %879 = and i1 %825, %875
  %880 = xor i1 %879, true
  %881 = or i1 %825, %875
  %882 = and i1 %881, %880
  %883 = and i1 %829, %879
  %884 = xor i1 %883, true
  %885 = or i1 %829, %879
  %886 = and i1 %885, %884
  %887 = and i1 %833, %883
  %888 = xor i1 %887, true
  %889 = or i1 %833, %883
  %890 = and i1 %889, %888
  %891 = and i1 %837, %887
  %892 = xor i1 %891, true
  %893 = or i1 %837, %887
  %894 = and i1 %893, %892
  %895 = and i1 %841, %891
  %896 = xor i1 %895, true
  %897 = or i1 %841, %891
  %898 = and i1 %897, %896
  %899 = and i1 %845, %895
  %900 = xor i1 %899, true
  %901 = or i1 %845, %895
  %902 = and i1 %901, %900
  %903 = and i1 %849, %899
  %904 = xor i1 %903, true
  %905 = or i1 %849, %899
  %906 = and i1 %905, %904
  %907 = and i1 %853, %903
  %908 = xor i1 %907, true
  %909 = or i1 %853, %903
  %910 = and i1 %909, %908
  %911 = and i1 %854, %907
  %912 = xor i1 %911, true
  %913 = or i1 %854, %907
  %914 = and i1 %913, %912
  %915 = and i1 %in30, %858
  %916 = xor i1 %915, true
  %917 = or i1 %in30, %858
  %918 = and i1 %917, %916
  %919 = and i1 %862, %915
  %920 = xor i1 %919, true
  %921 = or i1 %862, %915
  %922 = and i1 %921, %920
  %923 = and i1 %866, %919
  %924 = xor i1 %923, true
  %925 = or i1 %866, %919
  %926 = and i1 %925, %924
  %927 = and i1 %870, %923
  %928 = xor i1 %927, true
  %929 = or i1 %870, %923
  %930 = and i1 %929, %928
  %931 = and i1 %874, %927
  %932 = xor i1 %931, true
  %933 = or i1 %874, %927
  %934 = and i1 %933, %932
  %935 = and i1 %878, %931
  %936 = xor i1 %935, true
  %937 = or i1 %878, %931
  %938 = and i1 %937, %936
  %939 = and i1 %882, %935
  %940 = xor i1 %939, true
  %941 = or i1 %882, %935
  %942 = and i1 %941, %940
  %943 = and i1 %886, %939
  %944 = xor i1 %943, true
  %945 = or i1 %886, %939
  %946 = and i1 %945, %944
  %947 = and i1 %890, %943
  %948 = xor i1 %947, true
  %949 = or i1 %890, %943
  %950 = and i1 %949, %948
  %951 = and i1 %894, %947
  %952 = xor i1 %951, true
  %953 = or i1 %894, %947
  %954 = and i1 %953, %952
  %955 = and i1 %898, %951
  %956 = xor i1 %955, true
  %957 = or i1 %898, %951
  %958 = and i1 %957, %956
  %959 = and i1 %902, %955
  %960 = xor i1 %959, true
  %961 = or i1 %902, %955
  %962 = and i1 %961, %960
  %963 = and i1 %906, %959
  %964 = xor i1 %963, true
  %965 = or i1 %906, %959
  %966 = and i1 %965, %964
  %967 = and i1 %910, %963
  %968 = xor i1 %967, true
  %969 = or i1 %910, %963
  %970 = and i1 %969, %968
  %971 = and i1 %914, %967
  %972 = xor i1 %971, true
  %973 = or i1 %914, %967
  %974 = and i1 %973, %972
  %975 = or i1 %911, %971
  %976 = and i1 %in31, %918
  %977 = xor i1 %976, true
  %978 = or i1 %in31, %918
  %979 = and i1 %978, %977
  %980 = and i1 %922, %976
  %981 = xor i1 %980, true
  %982 = or i1 %922, %976
  %983 = and i1 %982, %981
  %984 = and i1 %926, %980
  %985 = xor i1 %984, true
  %986 = or i1 %926, %980
  %987 = and i1 %986, %985
  %988 = and i1 %930, %984
  %989 = xor i1 %988, true
  %990 = or i1 %930, %984
  %991 = and i1 %990, %989
  %992 = and i1 %934, %988
  %993 = xor i1 %992, true
  %994 = or i1 %934, %988
  %995 = and i1 %994, %993
  %996 = and i1 %938, %992
  %997 = xor i1 %996, true
  %998 = or i1 %938, %992
  %999 = and i1 %998, %997
  %1000 = and i1 %942, %996
  %1001 = xor i1 %1000, true
  %1002 = or i1 %942, %996
  %1003 = and i1 %1002, %1001
  %1004 = and i1 %946, %1000
  %1005 = xor i1 %1004, true
  %1006 = or i1 %946, %1000
  %1007 = and i1 %1006, %1005
  %1008 = and i1 %950, %1004
  %1009 = xor i1 %1008, true
  %1010 = or i1 %950, %1004
  %1011 = and i1 %1010, %1009
  %1012 = and i1 %954, %1008
  %1013 = xor i1 %1012, true
  %1014 = or i1 %954, %1008
  %1015 = and i1 %1014, %1013
  %1016 = and i1 %958, %1012
  %1017 = xor i1 %1016, true
  %1018 = or i1 %958, %1012
  %1019 = and i1 %1018, %1017
  %1020 = and i1 %962, %1016
  %1021 = xor i1 %1020, true
  %1022 = or i1 %962, %1016
  %1023 = and i1 %1022, %1021
  %1024 = and i1 %966, %1020
  %1025 = xor i1 %1024, true
  %1026 = or i1 %966, %1020
  %1027 = and i1 %1026, %1025
  %1028 = and i1 %970, %1024
  %1029 = xor i1 %1028, true
  %1030 = or i1 %970, %1024
  %1031 = and i1 %1030, %1029
  %1032 = and i1 %974, %1028
  %1033 = xor i1 %1032, true
  %1034 = or i1 %974, %1028
  %1035 = and i1 %1034, %1033
  %1036 = and i1 %975, %1032
  %1037 = xor i1 %1036, true
  %1038 = or i1 %975, %1032
  %1039 = and i1 %1038, %1037
  %out0 = insertelement <32 x i1> undef, i1 %979, i32 0
  %out1 = insertelement <32 x i1> %out0, i1 %983, i32 1
  %out2 = insertelement <32 x i1> %out1, i1 %987, i32 2
  %out3 = insertelement <32 x i1> %out2, i1 %991, i32 3
  %out4 = insertelement <32 x i1> %out3, i1 %995, i32 4
  %out5 = insertelement <32 x i1> %out4, i1 %999, i32 5
  %out6 = insertelement <32 x i1> %out5, i1 %1003, i32 6
  %out7 = insertelement <32 x i1> %out6, i1 %1007, i32 7
  %out8 = insertelement <32 x i1> %out7, i1 %1011, i32 8
  %out9 = insertelement <32 x i1> %out8, i1 %1015, i32 9
  %out10 = insertelement <32 x i1> %out9, i1 %1019, i32 10
  %out11 = insertelement <32 x i1> %out10, i1 %1023, i32 11
  %out12 = insertelement <32 x i1> %out11, i1 %1027, i32 12
  %out13 = insertelement <32 x i1> %out12, i1 %1031, i32 13
  %out14 = insertelement <32 x i1> %out13, i1 %1035, i32 14
  %out15 = insertelement <32 x i1> %out14, i1 %1039, i32 15
  %out16 = insertelement <32 x i1> %out15, i1 %1036, i32 16
  %out17 = insertelement <32 x i1> %out16, i1 false, i32 17
  %out18 = insertelement <32 x i1> %out17, i1 false, i32 18
  %out19 = insertelement <32 x i1> %out18, i1 false, i32 19
  %out20 = insertelement <32 x i1> %out19, i1 false, i32 20
  %out21 = insertelement <32 x i1> %out20, i1 false, i32 21
  %out22 = insertelement <32 x i1> %out21, i1 false, i32 22
  %out23 = insertelement <32 x i1> %out22, i1 false, i32 23
  %out24 = insertelement <32 x i1> %out23, i1 false, i32 24
  %out25 = insertelement <32 x i1> %out24, i1 false, i32 25
  %out26 = insertelement <32 x i1> %out25, i1 false, i32 26
  %out27 = insertelement <32 x i1> %out26, i1 false, i32 27
  %out28 = insertelement <32 x i1> %out27, i1 false, i32 28
  %out29 = insertelement <32 x i1> %out28, i1 false, i32 29
  %out30 = insertelement <32 x i1> %out29, i1 false, i32 30
  %out31 = insertelement <32 x i1> %out30, i1 false, i32 31
  ret <32 x i1> %out31
}

define <32 x i1> @boolean__Z16count_bits_set_5j(<32 x i1>) {
entry:
  %in0 = extractelement <32 x i1> %0, i32 0
  %in1 = extractelement <32 x i1> %0, i32 1
  %in2 = extractelement <32 x i1> %0, i32 2
  %in3 = extractelement <32 x i1> %0, i32 3
  %in4 = extractelement <32 x i1> %0, i32 4
  %in5 = extractelement <32 x i1> %0, i32 5
  %in6 = extractelement <32 x i1> %0, i32 6
  %in7 = extractelement <32 x i1> %0, i32 7
  %in8 = extractelement <32 x i1> %0, i32 8
  %in9 = extractelement <32 x i1> %0, i32 9
  %in10 = extractelement <32 x i1> %0, i32 10
  %in11 = extractelement <32 x i1> %0, i32 11
  %in12 = extractelement <32 x i1> %0, i32 12
  %in13 = extractelement <32 x i1> %0, i32 13
  %in14 = extractelement <32 x i1> %0, i32 14
  %in15 = extractelement <32 x i1> %0, i32 15
  %in16 = extractelement <32 x i1> %0, i32 16
  %in17 = extractelement <32 x i1> %0, i32 17
  %in18 = extractelement <32 x i1> %0, i32 18
  %in19 = extractelement <32 x i1> %0, i32 19
  %in20 = extractelement <32 x i1> %0, i32 20
  %in21 = extractelement <32 x i1> %0, i32 21
  %in22 = extractelement <32 x i1> %0, i32 22
  %in23 = extractelement <32 x i1> %0, i32 23
  %in24 = extractelement <32 x i1> %0, i32 24
  %in25 = extractelement <32 x i1> %0, i32 25
  %in26 = extractelement <32 x i1> %0, i32 26
  %in27 = extractelement <32 x i1> %0, i32 27
  %in28 = extractelement <32 x i1> %0, i32 28
  %in29 = extractelement <32 x i1> %0, i32 29
  %in30 = extractelement <32 x i1> %0, i32 30
  %in31 = extractelement <32 x i1> %0, i32 31
  %1 = and i1 %in0, %in1
  %2 = xor i1 %1, true
  %3 = or i1 %in0, %in1
  %4 = and i1 %3, %2
  %5 = xor i1 %in0, true
  %6 = and i1 %5, %in1
  %7 = xor i1 %6, true
  %8 = and i1 %in1, %7
  %9 = and i1 %in2, %in3
  %10 = xor i1 %9, true
  %11 = or i1 %in2, %in3
  %12 = and i1 %11, %10
  %13 = xor i1 %in2, true
  %14 = and i1 %13, %in3
  %15 = xor i1 %14, true
  %16 = and i1 %in3, %15
  %17 = and i1 %in4, %in5
  %18 = xor i1 %17, true
  %19 = or i1 %in4, %in5
  %20 = and i1 %19, %18
  %21 = xor i1 %in4, true
  %22 = and i1 %21, %in5
  %23 = xor i1 %22, true
  %24 = and i1 %in5, %23
  %25 = and i1 %in6, %in7
  %26 = xor i1 %25, true
  %27 = or i1 %in6, %in7
  %28 = and i1 %27, %26
  %29 = xor i1 %in6, true
  %30 = and i1 %29, %in7
  %31 = xor i1 %30, true
  %32 = and i1 %in7, %31
  %33 = and i1 %in8, %in9
  %34 = xor i1 %33, true
  %35 = or i1 %in8, %in9
  %36 = and i1 %35, %34
  %37 = xor i1 %in8, true
  %38 = and i1 %37, %in9
  %39 = xor i1 %38, true
  %40 = and i1 %in9, %39
  %41 = and i1 %in10, %in11
  %42 = xor i1 %41, true
  %43 = or i1 %in10, %in11
  %44 = and i1 %43, %42
  %45 = xor i1 %in10, true
  %46 = and i1 %45, %in11
  %47 = xor i1 %46, true
  %48 = and i1 %in11, %47
  %49 = and i1 %in12, %in13
  %50 = xor i1 %49, true
  %51 = or i1 %in12, %in13
  %52 = and i1 %51, %50
  %53 = xor i1 %in12, true
  %54 = and i1 %53, %in13
  %55 = xor i1 %54, true
  %56 = and i1 %in13, %55
  %57 = and i1 %in14, %in15
  %58 = xor i1 %57, true
  %59 = or i1 %in14, %in15
  %60 = and i1 %59, %58
  %61 = xor i1 %in14, true
  %62 = and i1 %61, %in15
  %63 = xor i1 %62, true
  %64 = and i1 %in15, %63
  %65 = and i1 %in16, %in17
  %66 = xor i1 %65, true
  %67 = or i1 %in16, %in17
  %68 = and i1 %67, %66
  %69 = xor i1 %in16, true
  %70 = and i1 %69, %in17
  %71 = xor i1 %70, true
  %72 = and i1 %in17, %71
  %73 = and i1 %in18, %in19
  %74 = xor i1 %73, true
  %75 = or i1 %in18, %in19
  %76 = and i1 %75, %74
  %77 = xor i1 %in18, true
  %78 = and i1 %77, %in19
  %79 = xor i1 %78, true
  %80 = and i1 %in19, %79
  %81 = and i1 %in20, %in21
  %82 = xor i1 %81, true
  %83 = or i1 %in20, %in21
  %84 = and i1 %83, %82
  %85 = xor i1 %in20, true
  %86 = and i1 %85, %in21
  %87 = xor i1 %86, true
  %88 = and i1 %in21, %87
  %89 = and i1 %in22, %in23
  %90 = xor i1 %89, true
  %91 = or i1 %in22, %in23
  %92 = and i1 %91, %90
  %93 = xor i1 %in22, true
  %94 = and i1 %93, %in23
  %95 = xor i1 %94, true
  %96 = and i1 %in23, %95
  %97 = and i1 %in24, %in25
  %98 = xor i1 %97, true
  %99 = or i1 %in24, %in25
  %100 = and i1 %99, %98
  %101 = xor i1 %in24, true
  %102 = and i1 %101, %in25
  %103 = xor i1 %102, true
  %104 = and i1 %in25, %103
  %105 = and i1 %in26, %in27
  %106 = xor i1 %105, true
  %107 = or i1 %in26, %in27
  %108 = and i1 %107, %106
  %109 = xor i1 %in26, true
  %110 = and i1 %109, %in27
  %111 = xor i1 %110, true
  %112 = and i1 %in27, %111
  %113 = and i1 %in28, %in29
  %114 = xor i1 %113, true
  %115 = or i1 %in28, %in29
  %116 = and i1 %115, %114
  %117 = xor i1 %in28, true
  %118 = and i1 %117, %in29
  %119 = xor i1 %118, true
  %120 = and i1 %in29, %119
  %121 = and i1 %in30, %in31
  %122 = xor i1 %121, true
  %123 = or i1 %in30, %in31
  %124 = and i1 %123, %122
  %125 = xor i1 %in30, true
  %126 = and i1 %125, %in31
  %127 = xor i1 %126, true
  %128 = and i1 %in31, %127
  %129 = and i1 %12, %4
  %130 = xor i1 %129, true
  %131 = or i1 %12, %4
  %132 = and i1 %131, %130
  %133 = and i1 %16, %8
  %134 = xor i1 %133, true
  %135 = or i1 %16, %8
  %136 = and i1 %135, %134
  %137 = and i1 %136, %129
  %138 = xor i1 %137, true
  %139 = or i1 %136, %129
  %140 = and i1 %139, %138
  %141 = or i1 %137, %133
  %142 = and i1 %28, %20
  %143 = xor i1 %142, true
  %144 = or i1 %28, %20
  %145 = and i1 %144, %143
  %146 = and i1 %32, %24
  %147 = xor i1 %146, true
  %148 = or i1 %32, %24
  %149 = and i1 %148, %147
  %150 = and i1 %149, %142
  %151 = xor i1 %150, true
  %152 = or i1 %149, %142
  %153 = and i1 %152, %151
  %154 = or i1 %150, %146
  %155 = and i1 %44, %36
  %156 = xor i1 %155, true
  %157 = or i1 %44, %36
  %158 = and i1 %157, %156
  %159 = and i1 %48, %40
  %160 = xor i1 %159, true
  %161 = or i1 %48, %40
  %162 = and i1 %161, %160
  %163 = and i1 %162, %155
  %164 = xor i1 %163, true
  %165 = or i1 %162, %155
  %166 = and i1 %165, %164
  %167 = or i1 %163, %159
  %168 = and i1 %60, %52
  %169 = xor i1 %168, true
  %170 = or i1 %60, %52
  %171 = and i1 %170, %169
  %172 = and i1 %64, %56
  %173 = xor i1 %172, true
  %174 = or i1 %64, %56
  %175 = and i1 %174, %173
  %176 = and i1 %175, %168
  %177 = xor i1 %176, true
  %178 = or i1 %175, %168
  %179 = and i1 %178, %177
  %180 = or i1 %176, %172
  %181 = and i1 %76, %68
  %182 = xor i1 %181, true
  %183 = or i1 %76, %68
  %184 = and i1 %183, %182
  %185 = and i1 %80, %72
  %186 = xor i1 %185, true
  %187 = or i1 %80, %72
  %188 = and i1 %187, %186
  %189 = and i1 %188, %181
  %190 = xor i1 %189, true
  %191 = or i1 %188, %181
  %192 = and i1 %191, %190
  %193 = or i1 %189, %185
  %194 = and i1 %92, %84
  %195 = xor i1 %194, true
  %196 = or i1 %92, %84
  %197 = and i1 %196, %195
  %198 = and i1 %96, %88
  %199 = xor i1 %198, true
  %200 = or i1 %96, %88
  %201 = and i1 %200, %199
  %202 = and i1 %201, %194
  %203 = xor i1 %202, true
  %204 = or i1 %201, %194
  %205 = and i1 %204, %203
  %206 = or i1 %202, %198
  %207 = and i1 %108, %100
  %208 = xor i1 %207, true
  %209 = or i1 %108, %100
  %210 = and i1 %209, %208
  %211 = and i1 %112, %104
  %212 = xor i1 %211, true
  %213 = or i1 %112, %104
  %214 = and i1 %213, %212
  %215 = and i1 %214, %207
  %216 = xor i1 %215, true
  %217 = or i1 %214, %207
  %218 = and i1 %217, %216
  %219 = or i1 %215, %211
  %220 = and i1 %124, %116
  %221 = xor i1 %220, true
  %222 = or i1 %124, %116
  %223 = and i1 %222, %221
  %224 = and i1 %128, %120
  %225 = xor i1 %224, true
  %226 = or i1 %128, %120
  %227 = and i1 %226, %225
  %228 = and i1 %227, %220
  %229 = xor i1 %228, true
  %230 = or i1 %227, %220
  %231 = and i1 %230, %229
  %232 = or i1 %228, %224
  %233 = and i1 %145, %132
  %234 = xor i1 %233, true
  %235 = or i1 %145, %132
  %236 = and i1 %235, %234
  %237 = and i1 %153, %140
  %238 = xor i1 %237, true
  %239 = or i1 %153, %140
  %240 = and i1 %239, %238
  %241 = and i1 %240, %233
  %242 = xor i1 %241, true
  %243 = or i1 %240, %233
  %244 = and i1 %243, %242
  %245 = or i1 %241, %237
  %246 = and i1 %154, %141
  %247 = xor i1 %246, true
  %248 = or i1 %154, %141
  %249 = and i1 %248, %247
  %250 = and i1 %249, %245
  %251 = xor i1 %250, true
  %252 = or i1 %249, %245
  %253 = and i1 %252, %251
  %254 = or i1 %250, %246
  %255 = and i1 %171, %158
  %256 = xor i1 %255, true
  %257 = or i1 %171, %158
  %258 = and i1 %257, %256
  %259 = and i1 %179, %166
  %260 = xor i1 %259, true
  %261 = or i1 %179, %166
  %262 = and i1 %261, %260
  %263 = and i1 %262, %255
  %264 = xor i1 %263, true
  %265 = or i1 %262, %255
  %266 = and i1 %265, %264
  %267 = or i1 %263, %259
  %268 = and i1 %180, %167
  %269 = xor i1 %268, true
  %270 = or i1 %180, %167
  %271 = and i1 %270, %269
  %272 = and i1 %271, %267
  %273 = xor i1 %272, true
  %274 = or i1 %271, %267
  %275 = and i1 %274, %273
  %276 = or i1 %272, %268
  %277 = and i1 %197, %184
  %278 = xor i1 %277, true
  %279 = or i1 %197, %184
  %280 = and i1 %279, %278
  %281 = and i1 %205, %192
  %282 = xor i1 %281, true
  %283 = or i1 %205, %192
  %284 = and i1 %283, %282
  %285 = and i1 %284, %277
  %286 = xor i1 %285, true
  %287 = or i1 %284, %277
  %288 = and i1 %287, %286
  %289 = or i1 %285, %281
  %290 = and i1 %206, %193
  %291 = xor i1 %290, true
  %292 = or i1 %206, %193
  %293 = and i1 %292, %291
  %294 = and i1 %293, %289
  %295 = xor i1 %294, true
  %296 = or i1 %293, %289
  %297 = and i1 %296, %295
  %298 = or i1 %294, %290
  %299 = and i1 %223, %210
  %300 = xor i1 %299, true
  %301 = or i1 %223, %210
  %302 = and i1 %301, %300
  %303 = and i1 %231, %218
  %304 = xor i1 %303, true
  %305 = or i1 %231, %218
  %306 = and i1 %305, %304
  %307 = and i1 %306, %299
  %308 = xor i1 %307, true
  %309 = or i1 %306, %299
  %310 = and i1 %309, %308
  %311 = or i1 %307, %303
  %312 = and i1 %232, %219
  %313 = xor i1 %312, true
  %314 = or i1 %232, %219
  %315 = and i1 %314, %313
  %316 = and i1 %315, %311
  %317 = xor i1 %316, true
  %318 = or i1 %315, %311
  %319 = and i1 %318, %317
  %320 = or i1 %316, %312
  %321 = and i1 %258, %236
  %322 = xor i1 %321, true
  %323 = or i1 %258, %236
  %324 = and i1 %323, %322
  %325 = and i1 %266, %244
  %326 = xor i1 %325, true
  %327 = or i1 %266, %244
  %328 = and i1 %327, %326
  %329 = and i1 %328, %321
  %330 = xor i1 %329, true
  %331 = or i1 %328, %321
  %332 = and i1 %331, %330
  %333 = or i1 %329, %325
  %334 = and i1 %275, %253
  %335 = xor i1 %334, true
  %336 = or i1 %275, %253
  %337 = and i1 %336, %335
  %338 = and i1 %337, %333
  %339 = xor i1 %338, true
  %340 = or i1 %337, %333
  %341 = and i1 %340, %339
  %342 = or i1 %338, %334
  %343 = and i1 %276, %254
  %344 = xor i1 %343, true
  %345 = or i1 %276, %254
  %346 = and i1 %345, %344
  %347 = and i1 %346, %342
  %348 = xor i1 %347, true
  %349 = or i1 %346, %342
  %350 = and i1 %349, %348
  %351 = or i1 %347, %343
  %352 = and i1 %302, %280
  %353 = xor i1 %352, true
  %354 = or i1 %302, %280
  %355 = and i1 %354, %353
  %356 = and i1 %310, %288
  %357 = xor i1 %356, true
  %358 = or i1 %310, %288
  %359 = and i1 %358, %357
  %360 = and i1 %359, %352
  %361 = xor i1 %360, true
  %362 = or i1 %359, %352
  %363 = and i1 %362, %361
  %364 = or i1 %360, %356
  %365 = and i1 %319, %297
  %366 = xor i1 %365, true
  %367 = or i1 %319, %297
  %368 = and i1 %367, %366
  %369 = and i1 %368, %364
  %370 = xor i1 %369, true
  %371 = or i1 %368, %364
  %372 = and i1 %371, %370
  %373 = or i1 %369, %365
  %374 = and i1 %320, %298
  %375 = xor i1 %374, true
  %376 = or i1 %320, %298
  %377 = and i1 %376, %375
  %378 = and i1 %377, %373
  %379 = xor i1 %378, true
  %380 = or i1 %377, %373
  %381 = and i1 %380, %379
  %382 = or i1 %378, %374
  %383 = and i1 %355, %324
  %384 = xor i1 %383, true
  %385 = or i1 %355, %324
  %386 = and i1 %385, %384
  %387 = and i1 %363, %332
  %388 = xor i1 %387, true
  %389 = or i1 %363, %332
  %390 = and i1 %389, %388
  %391 = and i1 %390, %383
  %392 = xor i1 %391, true
  %393 = or i1 %390, %383
  %394 = and i1 %393, %392
  %395 = or i1 %391, %387
  %396 = and i1 %372, %341
  %397 = xor i1 %396, true
  %398 = or i1 %372, %341
  %399 = and i1 %398, %397
  %400 = and i1 %399, %395
  %401 = xor i1 %400, true
  %402 = or i1 %399, %395
  %403 = and i1 %402, %401
  %404 = or i1 %400, %396
  %405 = and i1 %381, %350
  %406 = xor i1 %405, true
  %407 = or i1 %381, %350
  %408 = and i1 %407, %406
  %409 = and i1 %408, %404
  %410 = xor i1 %409, true
  %411 = or i1 %408, %404
  %412 = and i1 %411, %410
  %413 = or i1 %409, %405
  %414 = and i1 %382, %351
  %415 = xor i1 %414, true
  %416 = or i1 %382, %351
  %417 = and i1 %416, %415
  %418 = and i1 %417, %413
  %419 = xor i1 %418, true
  %420 = or i1 %417, %413
  %421 = and i1 %420, %419
  %422 = or i1 %418, %414
  %out0 = insertelement <32 x i1> undef, i1 %386, i32 0
  %out1 = insertelement <32 x i1> %out0, i1 %394, i32 1
  %out2 = insertelement <32 x i1> %out1, i1 %403, i32 2
  %out3 = insertelement <32 x i1> %out2, i1 %412, i32 3
  %out4 = insertelement <32 x i1> %out3, i1 %421, i32 4
  %out5 = insertelement <32 x i1> %out4, i1 %422, i32 5
  %out6 = insertelement <32 x i1> %out5, i1 false, i32 6
  %out7 = insertelement <32 x i1> %out6, i1 false, i32 7
  %out8 = insertelement <32 x i1> %out7, i1 false, i32 8
  %out9 = insertelement <32 x i1> %out8, i1 false, i32 9
  %out10 = insertelement <32 x i1> %out9, i1 false, i32 10
  %out11 = insertelement <32 x i1> %out10, i1 false, i32 11
  %out12 = insertelement <32 x i1> %out11, i1 false, i32 12
  %out13 = insertelement <32 x i1> %out12, i1 false, i32 13
  %out14 = insertelement <32 x i1> %out13, i1 false, i32 14
  %out15 = insertelement <32 x i1> %out14, i1 false, i32 15
  %out16 = insertelement <32 x i1> %out15, i1 false, i32 16
  %out17 = insertelement <32 x i1> %out16, i1 false, i32 17
  %out18 = insertelement <32 x i1> %out17, i1 false, i32 18
  %out19 = insertelement <32 x i1> %out18, i1 false, i32 19
  %out20 = insertelement <32 x i1> %out19, i1 false, i32 20
  %out21 = insertelement <32 x i1> %out20, i1 false, i32 21
  %out22 = insertelement <32 x i1> %out21, i1 false, i32 22
  %out23 = insertelement <32 x i1> %out22, i1 false, i32 23
  %out24 = insertelement <32 x i1> %out23, i1 false, i32 24
  %out25 = insertelement <32 x i1> %out24, i1 false, i32 25
  %out26 = insertelement <32 x i1> %out25, i1 false, i32 26
  %out27 = insertelement <32 x i1> %out26, i1 false, i32 27
  %out28 = insertelement <32 x i1> %out27, i1 false, i32 28
  %out29 = insertelement <32 x i1> %out28, i1 false, i32 29
  %out30 = insertelement <32 x i1> %out29, i1 false, i32 30
  %out31 = insertelement <32 x i1> %out30, i1 false, i32 31
  ret <32 x i1> %out31
}

define <1 x i1> @boolean__Z24CHECK_count_bits_set_1_5j(<32 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <1 x i1> @boolean__Z8parity_1j(<32 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <1 x i1> @boolean__Z8parity_3j(<32 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <1 x i1> @boolean__Z8parity_4j(<32 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <1 x i1> @boolean__Z16CHECK_parity_1_3j(<32 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <1 x i1> @boolean__Z16CHECK_parity_1_4j(<32 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <1 x i1> @boolean__Z16CHECK_parity_3_4j(<32 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <64 x i1> @boolean__Z6swap_11P(<64 x i1>) {
entry:
  %in0 = extractelement <64 x i1> %0, i32 0
  %in1 = extractelement <64 x i1> %0, i32 1
  %in2 = extractelement <64 x i1> %0, i32 2
  %in3 = extractelement <64 x i1> %0, i32 3
  %in4 = extractelement <64 x i1> %0, i32 4
  %in5 = extractelement <64 x i1> %0, i32 5
  %in6 = extractelement <64 x i1> %0, i32 6
  %in7 = extractelement <64 x i1> %0, i32 7
  %in8 = extractelement <64 x i1> %0, i32 8
  %in9 = extractelement <64 x i1> %0, i32 9
  %in10 = extractelement <64 x i1> %0, i32 10
  %in11 = extractelement <64 x i1> %0, i32 11
  %in12 = extractelement <64 x i1> %0, i32 12
  %in13 = extractelement <64 x i1> %0, i32 13
  %in14 = extractelement <64 x i1> %0, i32 14
  %in15 = extractelement <64 x i1> %0, i32 15
  %in16 = extractelement <64 x i1> %0, i32 16
  %in17 = extractelement <64 x i1> %0, i32 17
  %in18 = extractelement <64 x i1> %0, i32 18
  %in19 = extractelement <64 x i1> %0, i32 19
  %in20 = extractelement <64 x i1> %0, i32 20
  %in21 = extractelement <64 x i1> %0, i32 21
  %in22 = extractelement <64 x i1> %0, i32 22
  %in23 = extractelement <64 x i1> %0, i32 23
  %in24 = extractelement <64 x i1> %0, i32 24
  %in25 = extractelement <64 x i1> %0, i32 25
  %in26 = extractelement <64 x i1> %0, i32 26
  %in27 = extractelement <64 x i1> %0, i32 27
  %in28 = extractelement <64 x i1> %0, i32 28
  %in29 = extractelement <64 x i1> %0, i32 29
  %in30 = extractelement <64 x i1> %0, i32 30
  %in31 = extractelement <64 x i1> %0, i32 31
  %in32 = extractelement <64 x i1> %0, i32 32
  %in33 = extractelement <64 x i1> %0, i32 33
  %in34 = extractelement <64 x i1> %0, i32 34
  %in35 = extractelement <64 x i1> %0, i32 35
  %in36 = extractelement <64 x i1> %0, i32 36
  %in37 = extractelement <64 x i1> %0, i32 37
  %in38 = extractelement <64 x i1> %0, i32 38
  %in39 = extractelement <64 x i1> %0, i32 39
  %in40 = extractelement <64 x i1> %0, i32 40
  %in41 = extractelement <64 x i1> %0, i32 41
  %in42 = extractelement <64 x i1> %0, i32 42
  %in43 = extractelement <64 x i1> %0, i32 43
  %in44 = extractelement <64 x i1> %0, i32 44
  %in45 = extractelement <64 x i1> %0, i32 45
  %in46 = extractelement <64 x i1> %0, i32 46
  %in47 = extractelement <64 x i1> %0, i32 47
  %in48 = extractelement <64 x i1> %0, i32 48
  %in49 = extractelement <64 x i1> %0, i32 49
  %in50 = extractelement <64 x i1> %0, i32 50
  %in51 = extractelement <64 x i1> %0, i32 51
  %in52 = extractelement <64 x i1> %0, i32 52
  %in53 = extractelement <64 x i1> %0, i32 53
  %in54 = extractelement <64 x i1> %0, i32 54
  %in55 = extractelement <64 x i1> %0, i32 55
  %in56 = extractelement <64 x i1> %0, i32 56
  %in57 = extractelement <64 x i1> %0, i32 57
  %in58 = extractelement <64 x i1> %0, i32 58
  %in59 = extractelement <64 x i1> %0, i32 59
  %in60 = extractelement <64 x i1> %0, i32 60
  %in61 = extractelement <64 x i1> %0, i32 61
  %in62 = extractelement <64 x i1> %0, i32 62
  %in63 = extractelement <64 x i1> %0, i32 63
  %out0 = insertelement <64 x i1> undef, i1 %in32, i32 0
  %out1 = insertelement <64 x i1> %out0, i1 %in33, i32 1
  %out2 = insertelement <64 x i1> %out1, i1 %in34, i32 2
  %out3 = insertelement <64 x i1> %out2, i1 %in35, i32 3
  %out4 = insertelement <64 x i1> %out3, i1 %in36, i32 4
  %out5 = insertelement <64 x i1> %out4, i1 %in37, i32 5
  %out6 = insertelement <64 x i1> %out5, i1 %in38, i32 6
  %out7 = insertelement <64 x i1> %out6, i1 %in39, i32 7
  %out8 = insertelement <64 x i1> %out7, i1 %in40, i32 8
  %out9 = insertelement <64 x i1> %out8, i1 %in41, i32 9
  %out10 = insertelement <64 x i1> %out9, i1 %in42, i32 10
  %out11 = insertelement <64 x i1> %out10, i1 %in43, i32 11
  %out12 = insertelement <64 x i1> %out11, i1 %in44, i32 12
  %out13 = insertelement <64 x i1> %out12, i1 %in45, i32 13
  %out14 = insertelement <64 x i1> %out13, i1 %in46, i32 14
  %out15 = insertelement <64 x i1> %out14, i1 %in47, i32 15
  %out16 = insertelement <64 x i1> %out15, i1 %in48, i32 16
  %out17 = insertelement <64 x i1> %out16, i1 %in49, i32 17
  %out18 = insertelement <64 x i1> %out17, i1 %in50, i32 18
  %out19 = insertelement <64 x i1> %out18, i1 %in51, i32 19
  %out20 = insertelement <64 x i1> %out19, i1 %in52, i32 20
  %out21 = insertelement <64 x i1> %out20, i1 %in53, i32 21
  %out22 = insertelement <64 x i1> %out21, i1 %in54, i32 22
  %out23 = insertelement <64 x i1> %out22, i1 %in55, i32 23
  %out24 = insertelement <64 x i1> %out23, i1 %in56, i32 24
  %out25 = insertelement <64 x i1> %out24, i1 %in57, i32 25
  %out26 = insertelement <64 x i1> %out25, i1 %in58, i32 26
  %out27 = insertelement <64 x i1> %out26, i1 %in59, i32 27
  %out28 = insertelement <64 x i1> %out27, i1 %in60, i32 28
  %out29 = insertelement <64 x i1> %out28, i1 %in61, i32 29
  %out30 = insertelement <64 x i1> %out29, i1 %in62, i32 30
  %out31 = insertelement <64 x i1> %out30, i1 %in63, i32 31
  %out32 = insertelement <64 x i1> %out31, i1 %in0, i32 32
  %out33 = insertelement <64 x i1> %out32, i1 %in1, i32 33
  %out34 = insertelement <64 x i1> %out33, i1 %in2, i32 34
  %out35 = insertelement <64 x i1> %out34, i1 %in3, i32 35
  %out36 = insertelement <64 x i1> %out35, i1 %in4, i32 36
  %out37 = insertelement <64 x i1> %out36, i1 %in5, i32 37
  %out38 = insertelement <64 x i1> %out37, i1 %in6, i32 38
  %out39 = insertelement <64 x i1> %out38, i1 %in7, i32 39
  %out40 = insertelement <64 x i1> %out39, i1 %in8, i32 40
  %out41 = insertelement <64 x i1> %out40, i1 %in9, i32 41
  %out42 = insertelement <64 x i1> %out41, i1 %in10, i32 42
  %out43 = insertelement <64 x i1> %out42, i1 %in11, i32 43
  %out44 = insertelement <64 x i1> %out43, i1 %in12, i32 44
  %out45 = insertelement <64 x i1> %out44, i1 %in13, i32 45
  %out46 = insertelement <64 x i1> %out45, i1 %in14, i32 46
  %out47 = insertelement <64 x i1> %out46, i1 %in15, i32 47
  %out48 = insertelement <64 x i1> %out47, i1 %in16, i32 48
  %out49 = insertelement <64 x i1> %out48, i1 %in17, i32 49
  %out50 = insertelement <64 x i1> %out49, i1 %in18, i32 50
  %out51 = insertelement <64 x i1> %out50, i1 %in19, i32 51
  %out52 = insertelement <64 x i1> %out51, i1 %in20, i32 52
  %out53 = insertelement <64 x i1> %out52, i1 %in21, i32 53
  %out54 = insertelement <64 x i1> %out53, i1 %in22, i32 54
  %out55 = insertelement <64 x i1> %out54, i1 %in23, i32 55
  %out56 = insertelement <64 x i1> %out55, i1 %in24, i32 56
  %out57 = insertelement <64 x i1> %out56, i1 %in25, i32 57
  %out58 = insertelement <64 x i1> %out57, i1 %in26, i32 58
  %out59 = insertelement <64 x i1> %out58, i1 %in27, i32 59
  %out60 = insertelement <64 x i1> %out59, i1 %in28, i32 60
  %out61 = insertelement <64 x i1> %out60, i1 %in29, i32 61
  %out62 = insertelement <64 x i1> %out61, i1 %in30, i32 62
  %out63 = insertelement <64 x i1> %out62, i1 %in31, i32 63
  ret <64 x i1> %out63
}

define <64 x i1> @boolean__Z6swap_21P(<64 x i1>) {
entry:
  %in0 = extractelement <64 x i1> %0, i32 0
  %in1 = extractelement <64 x i1> %0, i32 1
  %in2 = extractelement <64 x i1> %0, i32 2
  %in3 = extractelement <64 x i1> %0, i32 3
  %in4 = extractelement <64 x i1> %0, i32 4
  %in5 = extractelement <64 x i1> %0, i32 5
  %in6 = extractelement <64 x i1> %0, i32 6
  %in7 = extractelement <64 x i1> %0, i32 7
  %in8 = extractelement <64 x i1> %0, i32 8
  %in9 = extractelement <64 x i1> %0, i32 9
  %in10 = extractelement <64 x i1> %0, i32 10
  %in11 = extractelement <64 x i1> %0, i32 11
  %in12 = extractelement <64 x i1> %0, i32 12
  %in13 = extractelement <64 x i1> %0, i32 13
  %in14 = extractelement <64 x i1> %0, i32 14
  %in15 = extractelement <64 x i1> %0, i32 15
  %in16 = extractelement <64 x i1> %0, i32 16
  %in17 = extractelement <64 x i1> %0, i32 17
  %in18 = extractelement <64 x i1> %0, i32 18
  %in19 = extractelement <64 x i1> %0, i32 19
  %in20 = extractelement <64 x i1> %0, i32 20
  %in21 = extractelement <64 x i1> %0, i32 21
  %in22 = extractelement <64 x i1> %0, i32 22
  %in23 = extractelement <64 x i1> %0, i32 23
  %in24 = extractelement <64 x i1> %0, i32 24
  %in25 = extractelement <64 x i1> %0, i32 25
  %in26 = extractelement <64 x i1> %0, i32 26
  %in27 = extractelement <64 x i1> %0, i32 27
  %in28 = extractelement <64 x i1> %0, i32 28
  %in29 = extractelement <64 x i1> %0, i32 29
  %in30 = extractelement <64 x i1> %0, i32 30
  %in31 = extractelement <64 x i1> %0, i32 31
  %in32 = extractelement <64 x i1> %0, i32 32
  %in33 = extractelement <64 x i1> %0, i32 33
  %in34 = extractelement <64 x i1> %0, i32 34
  %in35 = extractelement <64 x i1> %0, i32 35
  %in36 = extractelement <64 x i1> %0, i32 36
  %in37 = extractelement <64 x i1> %0, i32 37
  %in38 = extractelement <64 x i1> %0, i32 38
  %in39 = extractelement <64 x i1> %0, i32 39
  %in40 = extractelement <64 x i1> %0, i32 40
  %in41 = extractelement <64 x i1> %0, i32 41
  %in42 = extractelement <64 x i1> %0, i32 42
  %in43 = extractelement <64 x i1> %0, i32 43
  %in44 = extractelement <64 x i1> %0, i32 44
  %in45 = extractelement <64 x i1> %0, i32 45
  %in46 = extractelement <64 x i1> %0, i32 46
  %in47 = extractelement <64 x i1> %0, i32 47
  %in48 = extractelement <64 x i1> %0, i32 48
  %in49 = extractelement <64 x i1> %0, i32 49
  %in50 = extractelement <64 x i1> %0, i32 50
  %in51 = extractelement <64 x i1> %0, i32 51
  %in52 = extractelement <64 x i1> %0, i32 52
  %in53 = extractelement <64 x i1> %0, i32 53
  %in54 = extractelement <64 x i1> %0, i32 54
  %in55 = extractelement <64 x i1> %0, i32 55
  %in56 = extractelement <64 x i1> %0, i32 56
  %in57 = extractelement <64 x i1> %0, i32 57
  %in58 = extractelement <64 x i1> %0, i32 58
  %in59 = extractelement <64 x i1> %0, i32 59
  %in60 = extractelement <64 x i1> %0, i32 60
  %in61 = extractelement <64 x i1> %0, i32 61
  %in62 = extractelement <64 x i1> %0, i32 62
  %in63 = extractelement <64 x i1> %0, i32 63
  %out0 = insertelement <64 x i1> undef, i1 %in32, i32 0
  %out1 = insertelement <64 x i1> %out0, i1 %in33, i32 1
  %out2 = insertelement <64 x i1> %out1, i1 %in34, i32 2
  %out3 = insertelement <64 x i1> %out2, i1 %in35, i32 3
  %out4 = insertelement <64 x i1> %out3, i1 %in36, i32 4
  %out5 = insertelement <64 x i1> %out4, i1 %in37, i32 5
  %out6 = insertelement <64 x i1> %out5, i1 %in38, i32 6
  %out7 = insertelement <64 x i1> %out6, i1 %in39, i32 7
  %out8 = insertelement <64 x i1> %out7, i1 %in40, i32 8
  %out9 = insertelement <64 x i1> %out8, i1 %in41, i32 9
  %out10 = insertelement <64 x i1> %out9, i1 %in42, i32 10
  %out11 = insertelement <64 x i1> %out10, i1 %in43, i32 11
  %out12 = insertelement <64 x i1> %out11, i1 %in44, i32 12
  %out13 = insertelement <64 x i1> %out12, i1 %in45, i32 13
  %out14 = insertelement <64 x i1> %out13, i1 %in46, i32 14
  %out15 = insertelement <64 x i1> %out14, i1 %in47, i32 15
  %out16 = insertelement <64 x i1> %out15, i1 %in48, i32 16
  %out17 = insertelement <64 x i1> %out16, i1 %in49, i32 17
  %out18 = insertelement <64 x i1> %out17, i1 %in50, i32 18
  %out19 = insertelement <64 x i1> %out18, i1 %in51, i32 19
  %out20 = insertelement <64 x i1> %out19, i1 %in52, i32 20
  %out21 = insertelement <64 x i1> %out20, i1 %in53, i32 21
  %out22 = insertelement <64 x i1> %out21, i1 %in54, i32 22
  %out23 = insertelement <64 x i1> %out22, i1 %in55, i32 23
  %out24 = insertelement <64 x i1> %out23, i1 %in56, i32 24
  %out25 = insertelement <64 x i1> %out24, i1 %in57, i32 25
  %out26 = insertelement <64 x i1> %out25, i1 %in58, i32 26
  %out27 = insertelement <64 x i1> %out26, i1 %in59, i32 27
  %out28 = insertelement <64 x i1> %out27, i1 %in60, i32 28
  %out29 = insertelement <64 x i1> %out28, i1 %in61, i32 29
  %out30 = insertelement <64 x i1> %out29, i1 %in62, i32 30
  %out31 = insertelement <64 x i1> %out30, i1 %in63, i32 31
  %out32 = insertelement <64 x i1> %out31, i1 %in0, i32 32
  %out33 = insertelement <64 x i1> %out32, i1 %in1, i32 33
  %out34 = insertelement <64 x i1> %out33, i1 %in2, i32 34
  %out35 = insertelement <64 x i1> %out34, i1 %in3, i32 35
  %out36 = insertelement <64 x i1> %out35, i1 %in4, i32 36
  %out37 = insertelement <64 x i1> %out36, i1 %in5, i32 37
  %out38 = insertelement <64 x i1> %out37, i1 %in6, i32 38
  %out39 = insertelement <64 x i1> %out38, i1 %in7, i32 39
  %out40 = insertelement <64 x i1> %out39, i1 %in8, i32 40
  %out41 = insertelement <64 x i1> %out40, i1 %in9, i32 41
  %out42 = insertelement <64 x i1> %out41, i1 %in10, i32 42
  %out43 = insertelement <64 x i1> %out42, i1 %in11, i32 43
  %out44 = insertelement <64 x i1> %out43, i1 %in12, i32 44
  %out45 = insertelement <64 x i1> %out44, i1 %in13, i32 45
  %out46 = insertelement <64 x i1> %out45, i1 %in14, i32 46
  %out47 = insertelement <64 x i1> %out46, i1 %in15, i32 47
  %out48 = insertelement <64 x i1> %out47, i1 %in16, i32 48
  %out49 = insertelement <64 x i1> %out48, i1 %in17, i32 49
  %out50 = insertelement <64 x i1> %out49, i1 %in18, i32 50
  %out51 = insertelement <64 x i1> %out50, i1 %in19, i32 51
  %out52 = insertelement <64 x i1> %out51, i1 %in20, i32 52
  %out53 = insertelement <64 x i1> %out52, i1 %in21, i32 53
  %out54 = insertelement <64 x i1> %out53, i1 %in22, i32 54
  %out55 = insertelement <64 x i1> %out54, i1 %in23, i32 55
  %out56 = insertelement <64 x i1> %out55, i1 %in24, i32 56
  %out57 = insertelement <64 x i1> %out56, i1 %in25, i32 57
  %out58 = insertelement <64 x i1> %out57, i1 %in26, i32 58
  %out59 = insertelement <64 x i1> %out58, i1 %in27, i32 59
  %out60 = insertelement <64 x i1> %out59, i1 %in28, i32 60
  %out61 = insertelement <64 x i1> %out60, i1 %in29, i32 61
  %out62 = insertelement <64 x i1> %out61, i1 %in30, i32 62
  %out63 = insertelement <64 x i1> %out62, i1 %in31, i32 63
  ret <64 x i1> %out63
}

define <64 x i1> @boolean__Z6swap_31P(<64 x i1>) {
entry:
  %in0 = extractelement <64 x i1> %0, i32 0
  %in1 = extractelement <64 x i1> %0, i32 1
  %in2 = extractelement <64 x i1> %0, i32 2
  %in3 = extractelement <64 x i1> %0, i32 3
  %in4 = extractelement <64 x i1> %0, i32 4
  %in5 = extractelement <64 x i1> %0, i32 5
  %in6 = extractelement <64 x i1> %0, i32 6
  %in7 = extractelement <64 x i1> %0, i32 7
  %in8 = extractelement <64 x i1> %0, i32 8
  %in9 = extractelement <64 x i1> %0, i32 9
  %in10 = extractelement <64 x i1> %0, i32 10
  %in11 = extractelement <64 x i1> %0, i32 11
  %in12 = extractelement <64 x i1> %0, i32 12
  %in13 = extractelement <64 x i1> %0, i32 13
  %in14 = extractelement <64 x i1> %0, i32 14
  %in15 = extractelement <64 x i1> %0, i32 15
  %in16 = extractelement <64 x i1> %0, i32 16
  %in17 = extractelement <64 x i1> %0, i32 17
  %in18 = extractelement <64 x i1> %0, i32 18
  %in19 = extractelement <64 x i1> %0, i32 19
  %in20 = extractelement <64 x i1> %0, i32 20
  %in21 = extractelement <64 x i1> %0, i32 21
  %in22 = extractelement <64 x i1> %0, i32 22
  %in23 = extractelement <64 x i1> %0, i32 23
  %in24 = extractelement <64 x i1> %0, i32 24
  %in25 = extractelement <64 x i1> %0, i32 25
  %in26 = extractelement <64 x i1> %0, i32 26
  %in27 = extractelement <64 x i1> %0, i32 27
  %in28 = extractelement <64 x i1> %0, i32 28
  %in29 = extractelement <64 x i1> %0, i32 29
  %in30 = extractelement <64 x i1> %0, i32 30
  %in31 = extractelement <64 x i1> %0, i32 31
  %in32 = extractelement <64 x i1> %0, i32 32
  %in33 = extractelement <64 x i1> %0, i32 33
  %in34 = extractelement <64 x i1> %0, i32 34
  %in35 = extractelement <64 x i1> %0, i32 35
  %in36 = extractelement <64 x i1> %0, i32 36
  %in37 = extractelement <64 x i1> %0, i32 37
  %in38 = extractelement <64 x i1> %0, i32 38
  %in39 = extractelement <64 x i1> %0, i32 39
  %in40 = extractelement <64 x i1> %0, i32 40
  %in41 = extractelement <64 x i1> %0, i32 41
  %in42 = extractelement <64 x i1> %0, i32 42
  %in43 = extractelement <64 x i1> %0, i32 43
  %in44 = extractelement <64 x i1> %0, i32 44
  %in45 = extractelement <64 x i1> %0, i32 45
  %in46 = extractelement <64 x i1> %0, i32 46
  %in47 = extractelement <64 x i1> %0, i32 47
  %in48 = extractelement <64 x i1> %0, i32 48
  %in49 = extractelement <64 x i1> %0, i32 49
  %in50 = extractelement <64 x i1> %0, i32 50
  %in51 = extractelement <64 x i1> %0, i32 51
  %in52 = extractelement <64 x i1> %0, i32 52
  %in53 = extractelement <64 x i1> %0, i32 53
  %in54 = extractelement <64 x i1> %0, i32 54
  %in55 = extractelement <64 x i1> %0, i32 55
  %in56 = extractelement <64 x i1> %0, i32 56
  %in57 = extractelement <64 x i1> %0, i32 57
  %in58 = extractelement <64 x i1> %0, i32 58
  %in59 = extractelement <64 x i1> %0, i32 59
  %in60 = extractelement <64 x i1> %0, i32 60
  %in61 = extractelement <64 x i1> %0, i32 61
  %in62 = extractelement <64 x i1> %0, i32 62
  %in63 = extractelement <64 x i1> %0, i32 63
  %out0 = insertelement <64 x i1> undef, i1 %in32, i32 0
  %out1 = insertelement <64 x i1> %out0, i1 %in33, i32 1
  %out2 = insertelement <64 x i1> %out1, i1 %in34, i32 2
  %out3 = insertelement <64 x i1> %out2, i1 %in35, i32 3
  %out4 = insertelement <64 x i1> %out3, i1 %in36, i32 4
  %out5 = insertelement <64 x i1> %out4, i1 %in37, i32 5
  %out6 = insertelement <64 x i1> %out5, i1 %in38, i32 6
  %out7 = insertelement <64 x i1> %out6, i1 %in39, i32 7
  %out8 = insertelement <64 x i1> %out7, i1 %in40, i32 8
  %out9 = insertelement <64 x i1> %out8, i1 %in41, i32 9
  %out10 = insertelement <64 x i1> %out9, i1 %in42, i32 10
  %out11 = insertelement <64 x i1> %out10, i1 %in43, i32 11
  %out12 = insertelement <64 x i1> %out11, i1 %in44, i32 12
  %out13 = insertelement <64 x i1> %out12, i1 %in45, i32 13
  %out14 = insertelement <64 x i1> %out13, i1 %in46, i32 14
  %out15 = insertelement <64 x i1> %out14, i1 %in47, i32 15
  %out16 = insertelement <64 x i1> %out15, i1 %in48, i32 16
  %out17 = insertelement <64 x i1> %out16, i1 %in49, i32 17
  %out18 = insertelement <64 x i1> %out17, i1 %in50, i32 18
  %out19 = insertelement <64 x i1> %out18, i1 %in51, i32 19
  %out20 = insertelement <64 x i1> %out19, i1 %in52, i32 20
  %out21 = insertelement <64 x i1> %out20, i1 %in53, i32 21
  %out22 = insertelement <64 x i1> %out21, i1 %in54, i32 22
  %out23 = insertelement <64 x i1> %out22, i1 %in55, i32 23
  %out24 = insertelement <64 x i1> %out23, i1 %in56, i32 24
  %out25 = insertelement <64 x i1> %out24, i1 %in57, i32 25
  %out26 = insertelement <64 x i1> %out25, i1 %in58, i32 26
  %out27 = insertelement <64 x i1> %out26, i1 %in59, i32 27
  %out28 = insertelement <64 x i1> %out27, i1 %in60, i32 28
  %out29 = insertelement <64 x i1> %out28, i1 %in61, i32 29
  %out30 = insertelement <64 x i1> %out29, i1 %in62, i32 30
  %out31 = insertelement <64 x i1> %out30, i1 %in63, i32 31
  %out32 = insertelement <64 x i1> %out31, i1 %in0, i32 32
  %out33 = insertelement <64 x i1> %out32, i1 %in1, i32 33
  %out34 = insertelement <64 x i1> %out33, i1 %in2, i32 34
  %out35 = insertelement <64 x i1> %out34, i1 %in3, i32 35
  %out36 = insertelement <64 x i1> %out35, i1 %in4, i32 36
  %out37 = insertelement <64 x i1> %out36, i1 %in5, i32 37
  %out38 = insertelement <64 x i1> %out37, i1 %in6, i32 38
  %out39 = insertelement <64 x i1> %out38, i1 %in7, i32 39
  %out40 = insertelement <64 x i1> %out39, i1 %in8, i32 40
  %out41 = insertelement <64 x i1> %out40, i1 %in9, i32 41
  %out42 = insertelement <64 x i1> %out41, i1 %in10, i32 42
  %out43 = insertelement <64 x i1> %out42, i1 %in11, i32 43
  %out44 = insertelement <64 x i1> %out43, i1 %in12, i32 44
  %out45 = insertelement <64 x i1> %out44, i1 %in13, i32 45
  %out46 = insertelement <64 x i1> %out45, i1 %in14, i32 46
  %out47 = insertelement <64 x i1> %out46, i1 %in15, i32 47
  %out48 = insertelement <64 x i1> %out47, i1 %in16, i32 48
  %out49 = insertelement <64 x i1> %out48, i1 %in17, i32 49
  %out50 = insertelement <64 x i1> %out49, i1 %in18, i32 50
  %out51 = insertelement <64 x i1> %out50, i1 %in19, i32 51
  %out52 = insertelement <64 x i1> %out51, i1 %in20, i32 52
  %out53 = insertelement <64 x i1> %out52, i1 %in21, i32 53
  %out54 = insertelement <64 x i1> %out53, i1 %in22, i32 54
  %out55 = insertelement <64 x i1> %out54, i1 %in23, i32 55
  %out56 = insertelement <64 x i1> %out55, i1 %in24, i32 56
  %out57 = insertelement <64 x i1> %out56, i1 %in25, i32 57
  %out58 = insertelement <64 x i1> %out57, i1 %in26, i32 58
  %out59 = insertelement <64 x i1> %out58, i1 %in27, i32 59
  %out60 = insertelement <64 x i1> %out59, i1 %in28, i32 60
  %out61 = insertelement <64 x i1> %out60, i1 %in29, i32 61
  %out62 = insertelement <64 x i1> %out61, i1 %in30, i32 62
  %out63 = insertelement <64 x i1> %out62, i1 %in31, i32 63
  ret <64 x i1> %out63
}

define <1 x i1> @boolean__Z14CHECK_swap_1_21P(<64 x i1>) {
entry:
  ret <1 x i1> <i1 true>
}

define <1 x i1> @boolean__Z14CHECK_swap_1_31P(<64 x i1>) {
entry:
  ret <1 x i1> <i1 true>
}

define <1 x i1> @boolean__Z14CHECK_swap_2_31P(<64 x i1>) {
entry:
  ret <1 x i1> <i1 true>
}

define <8 x i1> @boolean__Z9reverse_1h(<8 x i1>) {
entry:
  %in0 = extractelement <8 x i1> %0, i32 0
  %in1 = extractelement <8 x i1> %0, i32 1
  %in2 = extractelement <8 x i1> %0, i32 2
  %in3 = extractelement <8 x i1> %0, i32 3
  %in4 = extractelement <8 x i1> %0, i32 4
  %in5 = extractelement <8 x i1> %0, i32 5
  %in6 = extractelement <8 x i1> %0, i32 6
  %in7 = extractelement <8 x i1> %0, i32 7
  %1 = or i1 %in2, %in0
  %2 = or i1 %in3, %in1
  %3 = or i1 %in4, %1
  %4 = or i1 %in4, %in2
  %5 = or i1 %in5, %2
  %6 = or i1 %in6, %3
  %7 = or i1 %in5, %in3
  %8 = or i1 %in6, %4
  %9 = or i1 %in7, %5
  %10 = or i1 %in6, %in4
  %11 = or i1 %in7, %7
  %12 = or i1 %in7, %in5
  %out0 = insertelement <8 x i1> undef, i1 %in7, i32 0
  %out1 = insertelement <8 x i1> %out0, i1 %in6, i32 1
  %out2 = insertelement <8 x i1> %out1, i1 %12, i32 2
  %out3 = insertelement <8 x i1> %out2, i1 %10, i32 3
  %out4 = insertelement <8 x i1> %out3, i1 %11, i32 4
  %out5 = insertelement <8 x i1> %out4, i1 %8, i32 5
  %out6 = insertelement <8 x i1> %out5, i1 %9, i32 6
  %out7 = insertelement <8 x i1> %out6, i1 %6, i32 7
  ret <8 x i1> %out7
}

define <8 x i1> @boolean__Z9reverse_3h(<8 x i1>) {
entry:
  %in0 = extractelement <8 x i1> %0, i32 0
  %in1 = extractelement <8 x i1> %0, i32 1
  %in2 = extractelement <8 x i1> %0, i32 2
  %in3 = extractelement <8 x i1> %0, i32 3
  %in4 = extractelement <8 x i1> %0, i32 4
  %1 = and i1 %in0, %in1
  %2 = xor i1 %1, true
  %3 = or i1 %in0, %in1
  %4 = and i1 %3, %2
  %5 = and i1 %in1, %in2
  %6 = xor i1 %5, true
  %7 = or i1 %in1, %in2
  %8 = and i1 %7, %6
  %9 = and i1 %8, %1
  %10 = xor i1 %9, true
  %11 = or i1 %8, %1
  %12 = and i1 %11, %10
  %13 = or i1 %9, %5
  %14 = and i1 %in2, %in3
  %15 = xor i1 %14, true
  %16 = or i1 %in2, %in3
  %17 = and i1 %16, %15
  %18 = and i1 %17, %13
  %19 = xor i1 %18, true
  %20 = or i1 %17, %13
  %21 = and i1 %20, %19
  %22 = or i1 %18, %14
  %23 = and i1 %in3, %in4
  %24 = xor i1 %23, true
  %25 = or i1 %in3, %in4
  %26 = and i1 %25, %24
  %27 = and i1 %26, %22
  %28 = xor i1 %27, true
  %29 = or i1 %26, %22
  %30 = and i1 %29, %28
  %31 = and i1 %4, %in1
  %32 = xor i1 %31, true
  %33 = and i1 %3, %32
  %34 = and i1 %33, %in0
  %35 = xor i1 %34, true
  %36 = or i1 %33, %in0
  %37 = and i1 %36, %35
  %38 = or i1 %34, %31
  %39 = and i1 %12, %in2
  %40 = xor i1 %39, true
  %41 = or i1 %12, %in2
  %42 = and i1 %41, %40
  %43 = and i1 %42, %38
  %44 = xor i1 %43, true
  %45 = or i1 %42, %38
  %46 = and i1 %45, %44
  %47 = or i1 %43, %39
  %48 = and i1 %21, %in3
  %49 = xor i1 %48, true
  %50 = or i1 %21, %in3
  %51 = and i1 %50, %49
  %52 = and i1 %51, %47
  %53 = xor i1 %52, true
  %54 = or i1 %51, %47
  %55 = and i1 %54, %53
  %56 = or i1 %52, %48
  %57 = and i1 %30, %in4
  %58 = xor i1 %57, true
  %59 = or i1 %30, %in4
  %60 = and i1 %59, %58
  %61 = and i1 %60, %56
  %62 = xor i1 %61, true
  %63 = or i1 %60, %56
  %64 = and i1 %63, %62
  %65 = and i1 %37, %in1
  %66 = xor i1 %65, true
  %67 = or i1 %37, %in1
  %68 = and i1 %67, %66
  %69 = and i1 %46, %in2
  %70 = xor i1 %69, true
  %71 = or i1 %46, %in2
  %72 = and i1 %71, %70
  %73 = and i1 %72, %65
  %74 = xor i1 %73, true
  %75 = or i1 %72, %65
  %76 = and i1 %75, %74
  %77 = or i1 %73, %69
  %78 = and i1 %55, %in3
  %79 = xor i1 %78, true
  %80 = or i1 %55, %in3
  %81 = and i1 %80, %79
  %82 = and i1 %81, %77
  %83 = xor i1 %82, true
  %84 = or i1 %81, %77
  %85 = and i1 %84, %83
  %86 = or i1 %82, %78
  %87 = and i1 %64, %in4
  %88 = xor i1 %87, true
  %89 = or i1 %64, %in4
  %90 = and i1 %89, %88
  %91 = and i1 %90, %86
  %92 = xor i1 %91, true
  %93 = or i1 %90, %86
  %94 = and i1 %93, %92
  %95 = and i1 %68, %in1
  %96 = xor i1 %95, true
  %97 = and i1 %67, %96
  %98 = and i1 %97, %in0
  %99 = xor i1 %98, true
  %100 = or i1 %97, %in0
  %101 = and i1 %100, %99
  %102 = or i1 %98, %95
  %103 = and i1 %76, %in2
  %104 = xor i1 %103, true
  %105 = or i1 %76, %in2
  %106 = and i1 %105, %104
  %107 = and i1 %106, %102
  %108 = xor i1 %107, true
  %109 = or i1 %106, %102
  %110 = and i1 %109, %108
  %111 = or i1 %107, %103
  %112 = and i1 %85, %in3
  %113 = xor i1 %112, true
  %114 = or i1 %85, %in3
  %115 = and i1 %114, %113
  %116 = and i1 %115, %111
  %117 = xor i1 %116, true
  %118 = or i1 %115, %111
  %119 = and i1 %118, %117
  %120 = or i1 %116, %112
  %121 = and i1 %94, %in4
  %122 = xor i1 %121, true
  %123 = or i1 %94, %in4
  %124 = and i1 %123, %122
  %125 = and i1 %124, %120
  %126 = xor i1 %125, true
  %127 = or i1 %124, %120
  %128 = and i1 %127, %126
  %129 = and i1 %101, %in1
  %130 = xor i1 %129, true
  %131 = or i1 %101, %in1
  %132 = and i1 %131, %130
  %133 = and i1 %110, %in2
  %134 = xor i1 %133, true
  %135 = or i1 %110, %in2
  %136 = and i1 %135, %134
  %137 = and i1 %136, %129
  %138 = xor i1 %137, true
  %139 = or i1 %136, %129
  %140 = and i1 %139, %138
  %141 = or i1 %137, %133
  %142 = and i1 %119, %in3
  %143 = xor i1 %142, true
  %144 = or i1 %119, %in3
  %145 = and i1 %144, %143
  %146 = and i1 %145, %141
  %147 = xor i1 %146, true
  %148 = or i1 %145, %141
  %149 = and i1 %148, %147
  %150 = or i1 %146, %142
  %151 = and i1 %128, %in4
  %152 = xor i1 %151, true
  %153 = or i1 %128, %in4
  %154 = and i1 %153, %152
  %155 = and i1 %154, %150
  %156 = xor i1 %155, true
  %157 = or i1 %154, %150
  %158 = and i1 %157, %156
  %159 = and i1 %132, %in1
  %160 = xor i1 %159, true
  %161 = and i1 %131, %160
  %162 = and i1 %161, %in0
  %163 = or i1 %162, %159
  %164 = and i1 %140, %in2
  %165 = xor i1 %164, true
  %166 = or i1 %140, %in2
  %167 = and i1 %166, %165
  %168 = and i1 %167, %163
  %169 = or i1 %168, %164
  %170 = and i1 %149, %in3
  %171 = xor i1 %170, true
  %172 = or i1 %149, %in3
  %173 = and i1 %172, %171
  %174 = and i1 %173, %169
  %175 = or i1 %174, %170
  %176 = and i1 %158, %in4
  %177 = xor i1 %176, true
  %178 = or i1 %158, %in4
  %179 = and i1 %178, %177
  %180 = and i1 %179, %175
  %181 = xor i1 %180, true
  %182 = or i1 %179, %175
  %183 = and i1 %182, %181
  %out3 = insertelement <8 x i1> <i1 false, i1 false, i1 false, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef>, i1 %in4, i32 3
  %out4 = insertelement <8 x i1> %out3, i1 %183, i32 4
  %out5 = insertelement <8 x i1> %out4, i1 false, i32 5
  %out6 = insertelement <8 x i1> %out5, i1 false, i32 6
  %out7 = insertelement <8 x i1> %out6, i1 false, i32 7
  ret <8 x i1> %out7
}

define <8 x i1> @boolean__Z9reverse_4h(<8 x i1>) {
entry:
  %in0 = extractelement <8 x i1> %0, i32 0
  %in1 = extractelement <8 x i1> %0, i32 1
  %in2 = extractelement <8 x i1> %0, i32 2
  %in3 = extractelement <8 x i1> %0, i32 3
  %in4 = extractelement <8 x i1> %0, i32 4
  %in5 = extractelement <8 x i1> %0, i32 5
  %in6 = extractelement <8 x i1> %0, i32 6
  %1 = and i1 %in0, %in1
  %2 = xor i1 %1, true
  %3 = or i1 %in0, %in1
  %4 = and i1 %3, %2
  %5 = and i1 %in1, %in2
  %6 = xor i1 %5, true
  %7 = or i1 %in1, %in2
  %8 = and i1 %7, %6
  %9 = and i1 %8, %1
  %10 = xor i1 %9, true
  %11 = or i1 %8, %1
  %12 = and i1 %11, %10
  %13 = or i1 %9, %5
  %14 = and i1 %in2, %in3
  %15 = xor i1 %14, true
  %16 = or i1 %in2, %in3
  %17 = and i1 %16, %15
  %18 = and i1 %17, %13
  %19 = xor i1 %18, true
  %20 = or i1 %17, %13
  %21 = and i1 %20, %19
  %22 = or i1 %18, %14
  %23 = and i1 %in3, %in4
  %24 = xor i1 %23, true
  %25 = or i1 %in3, %in4
  %26 = and i1 %25, %24
  %27 = and i1 %26, %22
  %28 = xor i1 %27, true
  %29 = or i1 %26, %22
  %30 = and i1 %29, %28
  %31 = or i1 %27, %23
  %32 = and i1 %in4, %in5
  %33 = xor i1 %32, true
  %34 = or i1 %in4, %in5
  %35 = and i1 %34, %33
  %36 = and i1 %35, %31
  %37 = xor i1 %36, true
  %38 = or i1 %35, %31
  %39 = and i1 %38, %37
  %40 = or i1 %36, %32
  %41 = and i1 %in5, %in6
  %42 = xor i1 %41, true
  %43 = or i1 %in5, %in6
  %44 = and i1 %43, %42
  %45 = and i1 %44, %40
  %46 = xor i1 %45, true
  %47 = or i1 %44, %40
  %48 = and i1 %47, %46
  %49 = and i1 %4, %in1
  %50 = xor i1 %49, true
  %51 = and i1 %3, %50
  %52 = and i1 %51, %in0
  %53 = xor i1 %52, true
  %54 = or i1 %51, %in0
  %55 = and i1 %54, %53
  %56 = or i1 %52, %49
  %57 = and i1 %12, %in2
  %58 = xor i1 %57, true
  %59 = or i1 %12, %in2
  %60 = and i1 %59, %58
  %61 = and i1 %60, %56
  %62 = xor i1 %61, true
  %63 = or i1 %60, %56
  %64 = and i1 %63, %62
  %65 = or i1 %61, %57
  %66 = and i1 %21, %in3
  %67 = xor i1 %66, true
  %68 = or i1 %21, %in3
  %69 = and i1 %68, %67
  %70 = and i1 %69, %65
  %71 = xor i1 %70, true
  %72 = or i1 %69, %65
  %73 = and i1 %72, %71
  %74 = or i1 %70, %66
  %75 = and i1 %30, %in4
  %76 = xor i1 %75, true
  %77 = or i1 %30, %in4
  %78 = and i1 %77, %76
  %79 = and i1 %78, %74
  %80 = xor i1 %79, true
  %81 = or i1 %78, %74
  %82 = and i1 %81, %80
  %83 = or i1 %79, %75
  %84 = and i1 %39, %in5
  %85 = xor i1 %84, true
  %86 = or i1 %39, %in5
  %87 = and i1 %86, %85
  %88 = and i1 %87, %83
  %89 = xor i1 %88, true
  %90 = or i1 %87, %83
  %91 = and i1 %90, %89
  %92 = or i1 %88, %84
  %93 = and i1 %48, %in6
  %94 = xor i1 %93, true
  %95 = or i1 %48, %in6
  %96 = and i1 %95, %94
  %97 = and i1 %96, %92
  %98 = xor i1 %97, true
  %99 = or i1 %96, %92
  %100 = and i1 %99, %98
  %101 = and i1 %55, %in1
  %102 = xor i1 %101, true
  %103 = or i1 %55, %in1
  %104 = and i1 %103, %102
  %105 = and i1 %64, %in2
  %106 = xor i1 %105, true
  %107 = or i1 %64, %in2
  %108 = and i1 %107, %106
  %109 = and i1 %108, %101
  %110 = xor i1 %109, true
  %111 = or i1 %108, %101
  %112 = and i1 %111, %110
  %113 = or i1 %109, %105
  %114 = and i1 %73, %in3
  %115 = xor i1 %114, true
  %116 = or i1 %73, %in3
  %117 = and i1 %116, %115
  %118 = and i1 %117, %113
  %119 = xor i1 %118, true
  %120 = or i1 %117, %113
  %121 = and i1 %120, %119
  %122 = or i1 %118, %114
  %123 = and i1 %82, %in4
  %124 = xor i1 %123, true
  %125 = or i1 %82, %in4
  %126 = and i1 %125, %124
  %127 = and i1 %126, %122
  %128 = xor i1 %127, true
  %129 = or i1 %126, %122
  %130 = and i1 %129, %128
  %131 = or i1 %127, %123
  %132 = and i1 %91, %in5
  %133 = xor i1 %132, true
  %134 = or i1 %91, %in5
  %135 = and i1 %134, %133
  %136 = and i1 %135, %131
  %137 = xor i1 %136, true
  %138 = or i1 %135, %131
  %139 = and i1 %138, %137
  %140 = or i1 %136, %132
  %141 = and i1 %100, %in6
  %142 = xor i1 %141, true
  %143 = or i1 %100, %in6
  %144 = and i1 %143, %142
  %145 = and i1 %144, %140
  %146 = xor i1 %145, true
  %147 = or i1 %144, %140
  %148 = and i1 %147, %146
  %149 = and i1 %104, %in1
  %150 = xor i1 %149, true
  %151 = and i1 %103, %150
  %152 = and i1 %151, %in0
  %153 = xor i1 %152, true
  %154 = or i1 %151, %in0
  %155 = and i1 %154, %153
  %156 = or i1 %152, %149
  %157 = and i1 %112, %in2
  %158 = xor i1 %157, true
  %159 = or i1 %112, %in2
  %160 = and i1 %159, %158
  %161 = and i1 %160, %156
  %162 = xor i1 %161, true
  %163 = or i1 %160, %156
  %164 = and i1 %163, %162
  %165 = or i1 %161, %157
  %166 = and i1 %121, %in3
  %167 = xor i1 %166, true
  %168 = or i1 %121, %in3
  %169 = and i1 %168, %167
  %170 = and i1 %169, %165
  %171 = xor i1 %170, true
  %172 = or i1 %169, %165
  %173 = and i1 %172, %171
  %174 = or i1 %170, %166
  %175 = and i1 %130, %in4
  %176 = xor i1 %175, true
  %177 = or i1 %130, %in4
  %178 = and i1 %177, %176
  %179 = and i1 %178, %174
  %180 = xor i1 %179, true
  %181 = or i1 %178, %174
  %182 = and i1 %181, %180
  %183 = or i1 %179, %175
  %184 = and i1 %139, %in5
  %185 = xor i1 %184, true
  %186 = or i1 %139, %in5
  %187 = and i1 %186, %185
  %188 = and i1 %187, %183
  %189 = xor i1 %188, true
  %190 = or i1 %187, %183
  %191 = and i1 %190, %189
  %192 = or i1 %188, %184
  %193 = and i1 %148, %in6
  %194 = xor i1 %193, true
  %195 = or i1 %148, %in6
  %196 = and i1 %195, %194
  %197 = and i1 %196, %192
  %198 = xor i1 %197, true
  %199 = or i1 %196, %192
  %200 = and i1 %199, %198
  %201 = and i1 %155, %in1
  %202 = xor i1 %201, true
  %203 = or i1 %155, %in1
  %204 = and i1 %203, %202
  %205 = and i1 %164, %in2
  %206 = xor i1 %205, true
  %207 = or i1 %164, %in2
  %208 = and i1 %207, %206
  %209 = and i1 %208, %201
  %210 = xor i1 %209, true
  %211 = or i1 %208, %201
  %212 = and i1 %211, %210
  %213 = or i1 %209, %205
  %214 = and i1 %173, %in3
  %215 = xor i1 %214, true
  %216 = or i1 %173, %in3
  %217 = and i1 %216, %215
  %218 = and i1 %217, %213
  %219 = xor i1 %218, true
  %220 = or i1 %217, %213
  %221 = and i1 %220, %219
  %222 = or i1 %218, %214
  %223 = and i1 %182, %in4
  %224 = xor i1 %223, true
  %225 = or i1 %182, %in4
  %226 = and i1 %225, %224
  %227 = and i1 %226, %222
  %228 = xor i1 %227, true
  %229 = or i1 %226, %222
  %230 = and i1 %229, %228
  %231 = or i1 %227, %223
  %232 = and i1 %191, %in5
  %233 = xor i1 %232, true
  %234 = or i1 %191, %in5
  %235 = and i1 %234, %233
  %236 = and i1 %235, %231
  %237 = xor i1 %236, true
  %238 = or i1 %235, %231
  %239 = and i1 %238, %237
  %240 = or i1 %236, %232
  %241 = and i1 %200, %in6
  %242 = xor i1 %241, true
  %243 = or i1 %200, %in6
  %244 = and i1 %243, %242
  %245 = and i1 %244, %240
  %246 = xor i1 %245, true
  %247 = or i1 %244, %240
  %248 = and i1 %247, %246
  %249 = and i1 %204, %in1
  %250 = xor i1 %249, true
  %251 = and i1 %203, %250
  %252 = and i1 %251, %in0
  %253 = xor i1 %252, true
  %254 = or i1 %251, %in0
  %255 = and i1 %254, %253
  %256 = or i1 %252, %249
  %257 = and i1 %212, %in2
  %258 = xor i1 %257, true
  %259 = or i1 %212, %in2
  %260 = and i1 %259, %258
  %261 = and i1 %260, %256
  %262 = xor i1 %261, true
  %263 = or i1 %260, %256
  %264 = and i1 %263, %262
  %265 = or i1 %261, %257
  %266 = and i1 %221, %in3
  %267 = xor i1 %266, true
  %268 = or i1 %221, %in3
  %269 = and i1 %268, %267
  %270 = and i1 %269, %265
  %271 = xor i1 %270, true
  %272 = or i1 %269, %265
  %273 = and i1 %272, %271
  %274 = or i1 %270, %266
  %275 = and i1 %230, %in4
  %276 = xor i1 %275, true
  %277 = or i1 %230, %in4
  %278 = and i1 %277, %276
  %279 = and i1 %278, %274
  %280 = xor i1 %279, true
  %281 = or i1 %278, %274
  %282 = and i1 %281, %280
  %283 = or i1 %279, %275
  %284 = and i1 %239, %in5
  %285 = xor i1 %284, true
  %286 = or i1 %239, %in5
  %287 = and i1 %286, %285
  %288 = and i1 %287, %283
  %289 = xor i1 %288, true
  %290 = or i1 %287, %283
  %291 = and i1 %290, %289
  %292 = or i1 %288, %284
  %293 = and i1 %248, %in6
  %294 = xor i1 %293, true
  %295 = or i1 %248, %in6
  %296 = and i1 %295, %294
  %297 = and i1 %296, %292
  %298 = xor i1 %297, true
  %299 = or i1 %296, %292
  %300 = and i1 %299, %298
  %301 = and i1 %255, %in1
  %302 = xor i1 %301, true
  %303 = or i1 %255, %in1
  %304 = and i1 %303, %302
  %305 = and i1 %264, %in2
  %306 = xor i1 %305, true
  %307 = or i1 %264, %in2
  %308 = and i1 %307, %306
  %309 = and i1 %308, %301
  %310 = xor i1 %309, true
  %311 = or i1 %308, %301
  %312 = and i1 %311, %310
  %313 = or i1 %309, %305
  %314 = and i1 %273, %in3
  %315 = xor i1 %314, true
  %316 = or i1 %273, %in3
  %317 = and i1 %316, %315
  %318 = and i1 %317, %313
  %319 = xor i1 %318, true
  %320 = or i1 %317, %313
  %321 = and i1 %320, %319
  %322 = or i1 %318, %314
  %323 = and i1 %282, %in4
  %324 = xor i1 %323, true
  %325 = or i1 %282, %in4
  %326 = and i1 %325, %324
  %327 = and i1 %326, %322
  %328 = xor i1 %327, true
  %329 = or i1 %326, %322
  %330 = and i1 %329, %328
  %331 = or i1 %327, %323
  %332 = and i1 %291, %in5
  %333 = xor i1 %332, true
  %334 = or i1 %291, %in5
  %335 = and i1 %334, %333
  %336 = and i1 %335, %331
  %337 = xor i1 %336, true
  %338 = or i1 %335, %331
  %339 = and i1 %338, %337
  %340 = or i1 %336, %332
  %341 = and i1 %300, %in6
  %342 = xor i1 %341, true
  %343 = or i1 %300, %in6
  %344 = and i1 %343, %342
  %345 = and i1 %344, %340
  %346 = xor i1 %345, true
  %347 = or i1 %344, %340
  %348 = and i1 %347, %346
  %349 = and i1 %304, %in1
  %350 = xor i1 %349, true
  %351 = and i1 %303, %350
  %352 = and i1 %351, %in0
  %353 = or i1 %352, %349
  %354 = and i1 %312, %in2
  %355 = xor i1 %354, true
  %356 = or i1 %312, %in2
  %357 = and i1 %356, %355
  %358 = and i1 %357, %353
  %359 = or i1 %358, %354
  %360 = and i1 %321, %in3
  %361 = xor i1 %360, true
  %362 = or i1 %321, %in3
  %363 = and i1 %362, %361
  %364 = and i1 %363, %359
  %365 = or i1 %364, %360
  %366 = and i1 %330, %in4
  %367 = xor i1 %366, true
  %368 = or i1 %330, %in4
  %369 = and i1 %368, %367
  %370 = and i1 %369, %365
  %371 = or i1 %370, %366
  %372 = and i1 %339, %in5
  %373 = xor i1 %372, true
  %374 = or i1 %339, %in5
  %375 = and i1 %374, %373
  %376 = and i1 %375, %371
  %377 = or i1 %376, %372
  %378 = and i1 %348, %in6
  %379 = xor i1 %378, true
  %380 = or i1 %348, %in6
  %381 = and i1 %380, %379
  %382 = and i1 %381, %377
  %383 = xor i1 %382, true
  %384 = or i1 %381, %377
  %385 = and i1 %384, %383
  %out1 = insertelement <8 x i1> <i1 false, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef>, i1 %in6, i32 1
  %out2 = insertelement <8 x i1> %out1, i1 false, i32 2
  %out3 = insertelement <8 x i1> %out2, i1 %in4, i32 3
  %out4 = insertelement <8 x i1> %out3, i1 %82, i32 4
  %out5 = insertelement <8 x i1> %out4, i1 false, i32 5
  %out6 = insertelement <8 x i1> %out5, i1 %385, i32 6
  %out7 = insertelement <8 x i1> %out6, i1 false, i32 7
  ret <8 x i1> %out7
}

define <1 x i1> @boolean__Z17CHECK_reverse_1_3h(<8 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <1 x i1> @boolean__Z17CHECK_reverse_1_4h(<8 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}

define <1 x i1> @boolean__Z17CHECK_reverse_3_4h(<8 x i1>) {
entry:
  ret <1 x i1> zeroinitializer
}
